import { AxeResults } from '@sa11y/common';
import { NodeResult, Result, CheckResult } from 'axe-core';
export declare class A11yResults {
    private static consolidated;
    /**
     * Clear accumulated consolidated results
     */
    static clear(): void;
    /**
     * Consolidate given a11y results based on the given key (test scope)
     * and return new results that are not already present
     */
    static add(results: A11yResult[], key?: string): A11yResult[];
    /**
     * Sort a11y violations from axe in order of impact
     */
    static sort(violations: AxeResults): AxeResults;
    /**
     * Normalize and flatten a11y violations from Axe
     */
    static convert(violations: AxeResults): A11yResult[];
}
/**
 * Filtered a11y result containing selected and normalized info about the a11y failure
 */
export declare class A11yResult {
    readonly id: string;
    readonly selectors: string;
    readonly html: string;
    readonly description: string;
    readonly helpUrl: string;
    readonly wcag: string;
    readonly summary: string;
    readonly key: string;
    readonly ancestry: string;
    readonly any: string;
    readonly all: string;
    readonly none: string;
    readonly relatedNodeAny: string;
    readonly relatedNodeAll: string;
    readonly relatedNodeNone: string;
    private readonly wcagData;
    constructor(violation: Result, node: NodeResult);
    /**
     * Sort results by Priority and WCAG Level
     */
    static sort(results: A11yResult[]): A11yResult[];
    formatRelatedNodes(node: CheckResult[]): string;
}
/**
 * Adds WCAG Success Criteria Info to result violations
 * @param results - Array of Axe results
 */
export declare function appendWcag(results: AxeResults): void;
//# sourceMappingURL=result.d.ts.map