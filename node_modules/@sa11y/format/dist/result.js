"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.appendWcag = exports.A11yResult = exports.A11yResults = void 0;
const preset_rules_1 = require("@sa11y/preset-rules");
const defaultImpact = 'minor'; // if impact is undefined
const formatSpacing = '\t'.repeat(6);
// Helper object to sort violations by impact order
const impactOrder = {
    critical: 1,
    serious: 2,
    moderate: 3,
    minor: 4,
};
class A11yResults {
    /**
     * Clear accumulated consolidated results
     */
    static clear() {
        this.consolidated.clear();
    }
    /**
     * Consolidate given a11y results based on the given key (test scope)
     * and return new results that are not already present
     */
    static add(results, key = '') {
        const existingResults = this.consolidated.get(key) || [];
        if (existingResults.length === 0)
            this.consolidated.set(key, existingResults);
        return results.filter((result) => {
            if (!existingResults.includes(result.key)) {
                existingResults.push(result.key);
                return result;
            }
        });
    }
    /**
     * Sort a11y violations from axe in order of impact
     */
    static sort(violations) {
        return violations.sort((a, b) => {
            const aImpact = impactOrder[a.impact || defaultImpact];
            const bImpact = impactOrder[b.impact || defaultImpact];
            if (aImpact < bImpact)
                return -1;
            if (aImpact > bImpact)
                return 1;
            return 0;
        });
    }
    /**
     * Normalize and flatten a11y violations from Axe
     */
    static convert(violations) {
        return A11yResults.sort(violations).flatMap((violation) => {
            return violation.nodes.map((node) => {
                return new A11yResult(violation, node);
            });
        });
    }
}
exports.A11yResults = A11yResults;
A11yResults.consolidated = new Map();
/**
 * Filtered a11y result containing selected and normalized info about the a11y failure
 */
class A11yResult {
    constructor(violation, node) {
        this.id = violation.id;
        this.description = violation.description;
        this.wcagData = new preset_rules_1.WcagMetadata(violation);
        this.wcag = this.wcagData.toString();
        this.helpUrl = violation.helpUrl.split('?')[0];
        this.selectors = node.target.sort().join('; ');
        this.html = node.html;
        // TODO (code cov): Add test data where failure summary is missing
        /* istanbul ignore next */
        this.summary = node.failureSummary || '';
        this.key = `${this.id}--${this.selectors}`;
        this.ancestry = (node.ancestry?.flat(Infinity) ?? []).join('\n');
        this.any = node.any?.map((item) => `${formatSpacing}• ${item.message}`).join('\n');
        this.all = node.all?.map((item) => `${formatSpacing}• ${item.message}`).join('\n');
        this.none = node.none?.map((item) => `${formatSpacing}• ${item.message}`).join('\n');
        this.relatedNodeAny = this.formatRelatedNodes(node.any);
        this.relatedNodeAll = this.formatRelatedNodes(node.all);
        this.relatedNodeNone = this.formatRelatedNodes(node.none);
    }
    /**
     * Sort results by Priority and WCAG Level
     */
    static sort(results) {
        return results.sort((a, b) => {
            const priorityA = preset_rules_1.priorities.indexOf(a.wcagData.priority);
            const priorityB = preset_rules_1.priorities.indexOf(b.wcagData.priority);
            const wcagLevelA = preset_rules_1.wcagLevels.indexOf(a.wcagData.wcagLevel);
            const wcagLevelB = preset_rules_1.wcagLevels.indexOf(b.wcagData.wcagLevel);
            return priorityA - priorityB || wcagLevelA - wcagLevelB;
        });
    }
    formatRelatedNodes(node) {
        return node
            ?.map((item) => item.relatedNodes && item.relatedNodes.length > 0
            ? item.relatedNodes.map((relatedNode) => `${formatSpacing}• ${relatedNode.html}`).join('\n')
            : null)
            .filter(Boolean)
            .join('\n');
    }
}
exports.A11yResult = A11yResult;
/**
 * Adds WCAG Success Criteria Info to result violations
 * @param results - Array of Axe results
 */
function appendWcag(results) {
    for (const violation of results) {
        const wcagMetadata = new preset_rules_1.WcagMetadata(violation);
        violation.tags.push(wcagMetadata.toString());
    }
}
exports.appendWcag = appendWcag;
//# sourceMappingURL=result.js.map