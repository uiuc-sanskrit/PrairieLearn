"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.A11yError = void 0;
const common_1 = require("@sa11y/common");
const result_1 = require("./result");
/**
 * Default options to be used while formatting a11y issues
 */
const defaultOptions = {
    a11yViolationIndicator: '*',
    helpUrlIndicator: '-',
    // TODO (refactor): Create a Default formatter that points to A11yError.format()
    formatter: undefined,
    highlighter: (text) => text,
    deduplicate: false,
};
/**
 *  Custom error object to represent a11y violations
 */
class A11yError extends Error {
    /**
     * Throw error with formatted a11y violations
     * @param violations - List of a11y violations
     * @param opts - Options used for formatting a11y issues
     */
    static checkAndThrow(violations, opts = defaultOptions) {
        let a11yResults = result_1.A11yResults.convert(violations).sort();
        if (opts.deduplicate) {
            a11yResults = result_1.A11yResults.add(a11yResults);
        }
        if (a11yResults.length > 0) {
            throw new A11yError(violations, a11yResults, opts);
        }
    }
    constructor(violations, a11yResults, opts = defaultOptions) {
        super(`${a11yResults.length} ${common_1.errMsgHeader}`);
        this.violations = violations;
        this.a11yResults = a11yResults;
        this.name = A11yError.name;
        this.message = `${a11yResults.length} ${common_1.errMsgHeader}\n ${this.format(opts)}`;
    }
    get length() {
        return this.a11yResults.length;
    }
    /**
     * Format a11y violations into a readable format highlighting important information to help fixing the issue.
     * @param opts - Options used for formatting a11y issues.
     */
    format(opts) {
        const options = { ...defaultOptions, ...opts };
        // TODO (code cov): Fails only in CI, passes locally
        /* istanbul ignore next */
        if (options.formatter !== undefined) {
            return options.formatter(this.violations);
        }
        return this.a11yResults
            .map((a11yResult) => {
            return (options.highlighter(`${options.a11yViolationIndicator} (${a11yResult.id}) ${a11yResult.description}: ${a11yResult.selectors}`) +
                `\n\t${options.helpUrlIndicator} Help URL: ${a11yResult.helpUrl} \n\t${options.helpUrlIndicator} WCAG Criteria: ${a11yResult.wcag}`);
        })
            .join('\n\n');
    }
}
exports.A11yError = A11yError;
//# sourceMappingURL=format.js.map