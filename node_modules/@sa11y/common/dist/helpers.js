"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerCustomRules = exports.processFiles = exports.useCustomRules = exports.useFilesToBeExempted = exports.log = void 0;
/**
 * Convenience wrapper to prefix a standard header for console log messages.
 * Logging is enabled only when environment variable `SA11Y_DEBUG` is set.
 */
const sa11yAutoFilterListDefaultPackageName = 'sa11y-jest-automated-check-file-exclusion';
const axe_core_1 = __importDefault(require("axe-core"));
const fs = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
function log(...args) {
    // Probably not worth it to mock and test console logging for this helper util
    /* istanbul ignore next */
    if (process.env.SA11Y_DEBUG)
        console.log('â™¿[Sa11y]', ...args);
}
exports.log = log;
function useFilesToBeExempted() {
    const packageName = process.env.SA11Y_AUTO_FILTER_LIST_PACKAGE_NAME ?? sa11yAutoFilterListDefaultPackageName;
    let getFilesToBeExempted;
    if (packageName !== '') {
        try {
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            getFilesToBeExempted = require(packageName);
            const filesToBeExempted = getFilesToBeExempted();
            return filesToBeExempted;
        }
        catch (error) {
            if (packageName !== sa11yAutoFilterListDefaultPackageName)
                console.log('Package not found : ', packageName);
        }
    }
    return [];
}
exports.useFilesToBeExempted = useFilesToBeExempted;
function useCustomRules() {
    const filePath = process.env.SA11Y_CUSTOM_RULES ?? '';
    if (filePath !== '') {
        try {
            // Read the file asynchronously
            const data = fs.readFileSync(filePath, 'utf-8');
            const { rules } = JSON.parse(data);
            // Access the rules array
            return rules;
        }
        catch (err) {
            console.error('Error reading the custom ruleset file:', err);
        }
    }
    return [];
}
exports.useCustomRules = useCustomRules;
// Function to process files in a directory and push their content to a target array
const processFiles = (dir, targetArray, extension, parser) => {
    const files = fs.readdirSync(dir);
    files.forEach((file) => {
        if (path_1.default.extname(file) === extension) {
            const filePath = path_1.default.join(dir, file);
            const fileData = parser(fs.readFileSync(filePath, 'utf8'));
            targetArray.push(fileData);
        }
    });
};
exports.processFiles = processFiles;
const registerCustomRules = (changesData, rulesData, checksData) => {
    const newChecks = [];
    const newRules = [];
    // Read and parse existing rule changes
    const { rules } = changesData;
    const newRulesData = rulesData;
    const newChecksData = checksData;
    if (rules && Array.isArray(rules)) {
        newRules.push(...rules);
    }
    newRules.push(...newRulesData);
    newChecks.push(...newChecksData);
    // Configure axe with the new checks and rules
    const spec = { rules: newRules, checks: newChecks };
    axe_core_1.default.configure(spec);
};
exports.registerCustomRules = registerCustomRules;
//# sourceMappingURL=helpers.js.map