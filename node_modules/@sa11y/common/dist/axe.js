"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAxeRules = exports.getViolations = exports.axeVersion = exports.axeRuntimeExceptionMsgPrefix = void 0;
const axe = __importStar(require("axe-core"));
exports.axeRuntimeExceptionMsgPrefix = 'Error running accessibility checks using axe:';
exports.axeVersion = axe.version;
/**
 * Get violations by running axe with given function
 * @param axeRunner - function satisfying AxeRunner interface
 */
async function getViolations(axeRunner) {
    let violations;
    try {
        violations = await axeRunner();
    }
    catch (e) {
        throw new Error(`${exports.axeRuntimeExceptionMsgPrefix} ${e.message}`);
    }
    return violations;
}
exports.getViolations = getViolations;
/**
 * Return list of axe rules as a map of rule id to corresponding metadata
 */
function getAxeRules() {
    const axeRules = new Map();
    axe.getRules().forEach((rule) => axeRules.set(rule.ruleId, rule));
    return axeRules;
}
exports.getAxeRules = getAxeRules;
//# sourceMappingURL=axe.js.map