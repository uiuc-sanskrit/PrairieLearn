"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WcagMetadata = void 0;
const rules_1 = require("./rules");
const extended_1 = require("./extended");
/**
 * Process given tags from a11y violations and extract WCAG meta-data
 * Ref: https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#axe-core-tags
 */
class WcagMetadata {
    constructor(violation) {
        this.violation = violation;
        this.wcagLevel = '';
        this.successCriteria = WcagMetadata.defaultSC;
        this.priority = rules_1.defaultPriority;
        const ruleInfo = extended_1.extendedRulesInfo.get(violation.id);
        if (ruleInfo) {
            // rule has metadata provided in preset-rules
            this.wcagVersion = rules_1.defaultWcagVersion;
            this.wcagLevel = ruleInfo.wcagLevel;
            this.successCriteria = ruleInfo.wcagSC;
            this.priority = ruleInfo.priority;
            return;
        }
        // TODO (refactor): Is the following required anymore?
        //  Cleanup taking the new preset-rules structure into account?
        // If rule info metadata doesn't exist (e.g. full ruleset)
        for (const tag of violation.tags.sort()) {
            const match = WcagMetadata.regExp.exec(tag);
            if (!match || !match.groups)
                continue;
            const level = match.groups.level;
            const versionOrSC = match.groups.version_or_sc.split('').join('.');
            // Tags starting with "wcag" can contain either wcag version and level
            // or success criteria e.g. "wcag2aa", "wcag111"
            if (level) {
                this.wcagLevel = level.toUpperCase();
                if (versionOrSC === '2') {
                    this.wcagVersion = '2.0'; // Add decimal for consistency
                }
                else {
                    this.wcagVersion = versionOrSC;
                }
            }
            else {
                this.successCriteria = `${versionOrSC}`;
            }
        }
    }
    /**
     * Return formatted string containing WCAG SC and Priority
     */
    toString() {
        const successCriteria = this.successCriteria === WcagMetadata.defaultSC ? this.successCriteria : `WCAG-SC${this.successCriteria}`;
        return `SA11Y-${successCriteria}-${this.priority}`;
    }
}
exports.WcagMetadata = WcagMetadata;
WcagMetadata.regExp = /^(wcag)(?<version_or_sc>\d+)(?<level>a*)$/;
// Default SC for axe rules not strictly associated with a WCAG SC
//  Could also be experimental rules that are enabled in sa11y preset rules
WcagMetadata.defaultSC = 'best-practice';
//# sourceMappingURL=wcag.js.map