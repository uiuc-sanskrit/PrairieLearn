"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRulesDoc = void 0;
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const common_1 = require("@sa11y/common");
const base_1 = require("./base");
const extended_1 = require("./extended");
const fs = __importStar(require("fs"));
const markdown_table_ts_1 = require("markdown-table-ts");
/**
 * Generate markdown table of rules with the rules metadata.
 * Called from the rules tests.
 * @param rulesInfo - preset-rule to generate docs for. Defaults to
 * @param updateReadmePath - append given file with generated rules md doc
 */
function getRulesDoc(rulesInfo = extended_1.extendedRulesInfo, updateReadmePath = '') {
    const rulesDocRows = [];
    // Markers used to denote if a rule belongs in base, extended ruleset
    const no = '✖️';
    const yes = '✅';
    const axeRules = (0, common_1.getAxeRules)();
    for (const [ruleID, ruleMetadata] of rulesInfo.entries()) {
        const axeRule = axeRules.get(ruleID);
        if (!axeRule)
            throw new Error(`Unable to find rule: ${ruleID}`);
        rulesDocRows.push([
            `[${ruleID}](${axeRule.helpUrl.split('?')[0]})`,
            axeRule.description.replace(/</g, '&lt;'),
            ruleMetadata.wcagSC,
            ruleMetadata.wcagLevel,
            ruleMetadata.priority,
            base_1.baseRulesInfo.has(ruleID) ? yes : no,
            yes,
        ]);
    }
    const table = (0, markdown_table_ts_1.getMarkdownTable)({
        table: {
            head: [
                'Rule ID',
                'Description',
                'WCAG SC',
                'WCAG Level',
                'Priority',
                'In Base ruleset',
                'In Extended ruleset',
            ],
            body: [...rulesDocRows],
        },
    });
    // Note: Updating Readme is currently a manual dev process
    /* istanbul ignore next */
    if (updateReadmePath) {
        (0, common_1.log)(`Updating ${updateReadmePath} ..`);
        fs.appendFileSync(updateReadmePath, table);
    }
    return table;
}
exports.getRulesDoc = getRulesDoc;
//# sourceMappingURL=docgen.js.map