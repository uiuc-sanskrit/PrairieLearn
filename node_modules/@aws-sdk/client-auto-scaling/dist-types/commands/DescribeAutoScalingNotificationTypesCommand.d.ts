import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { AutoScalingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../AutoScalingClient";
import { DescribeAutoScalingNotificationTypesAnswer } from "../models/models_0";
/**
 * @public
 */
export type { __MetadataBearer };
export { $Command };
/**
 * @public
 *
 * The input for {@link DescribeAutoScalingNotificationTypesCommand}.
 */
export interface DescribeAutoScalingNotificationTypesCommandInput {
}
/**
 * @public
 *
 * The output of {@link DescribeAutoScalingNotificationTypesCommand}.
 */
export interface DescribeAutoScalingNotificationTypesCommandOutput extends DescribeAutoScalingNotificationTypesAnswer, __MetadataBearer {
}
declare const DescribeAutoScalingNotificationTypesCommand_base: {
    new (input: DescribeAutoScalingNotificationTypesCommandInput): import("@smithy/smithy-client").CommandImpl<DescribeAutoScalingNotificationTypesCommandInput, DescribeAutoScalingNotificationTypesCommandOutput, AutoScalingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (...[input]: [] | [DescribeAutoScalingNotificationTypesCommandInput]): import("@smithy/smithy-client").CommandImpl<DescribeAutoScalingNotificationTypesCommandInput, DescribeAutoScalingNotificationTypesCommandOutput, AutoScalingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>Describes the notification types that are supported by Amazon EC2 Auto Scaling.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { AutoScalingClient, DescribeAutoScalingNotificationTypesCommand } from "@aws-sdk/client-auto-scaling"; // ES Modules import
 * // const { AutoScalingClient, DescribeAutoScalingNotificationTypesCommand } = require("@aws-sdk/client-auto-scaling"); // CommonJS import
 * const client = new AutoScalingClient(config);
 * const input = {};
 * const command = new DescribeAutoScalingNotificationTypesCommand(input);
 * const response = await client.send(command);
 * // { // DescribeAutoScalingNotificationTypesAnswer
 * //   AutoScalingNotificationTypes: [ // AutoScalingNotificationTypes
 * //     "STRING_VALUE",
 * //   ],
 * // };
 *
 * ```
 *
 * @param DescribeAutoScalingNotificationTypesCommandInput - {@link DescribeAutoScalingNotificationTypesCommandInput}
 * @returns {@link DescribeAutoScalingNotificationTypesCommandOutput}
 * @see {@link DescribeAutoScalingNotificationTypesCommandInput} for command's `input` shape.
 * @see {@link DescribeAutoScalingNotificationTypesCommandOutput} for command's `response` shape.
 * @see {@link AutoScalingClientResolvedConfig | config} for AutoScalingClient's `config` shape.
 *
 * @throws {@link ResourceContentionFault} (server fault)
 *  <p>You already have a pending update to an Amazon EC2 Auto Scaling resource (for example, an Auto Scaling group,
 *             instance, or load balancer).</p>
 *
 * @throws {@link AutoScalingServiceException}
 * <p>Base exception class for all service exceptions from AutoScaling service.</p>
 *
 * @public
 * @example To describe the Auto Scaling notification types
 * ```javascript
 * // This example describes the available notification types.
 * const input = {};
 * const command = new DescribeAutoScalingNotificationTypesCommand(input);
 * const response = await client.send(command);
 * /* response ==
 * {
 *   "AutoScalingNotificationTypes": [
 *     "autoscaling:EC2_INSTANCE_LAUNCH",
 *     "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
 *     "autoscaling:EC2_INSTANCE_TERMINATE",
 *     "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
 *     "autoscaling:TEST_NOTIFICATION"
 *   ]
 * }
 * *\/
 * // example id: autoscaling-describe-auto-scaling-notification-types-1
 * ```
 *
 */
export declare class DescribeAutoScalingNotificationTypesCommand extends DescribeAutoScalingNotificationTypesCommand_base {
}
