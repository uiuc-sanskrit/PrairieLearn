import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { AutoScalingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../AutoScalingClient";
import { ExecutePolicyType } from "../models/models_0";
/**
 * @public
 */
export type { __MetadataBearer };
export { $Command };
/**
 * @public
 *
 * The input for {@link ExecutePolicyCommand}.
 */
export interface ExecutePolicyCommandInput extends ExecutePolicyType {
}
/**
 * @public
 *
 * The output of {@link ExecutePolicyCommand}.
 */
export interface ExecutePolicyCommandOutput extends __MetadataBearer {
}
declare const ExecutePolicyCommand_base: {
    new (input: ExecutePolicyCommandInput): import("@smithy/smithy-client").CommandImpl<ExecutePolicyCommandInput, ExecutePolicyCommandOutput, AutoScalingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (__0_0: ExecutePolicyCommandInput): import("@smithy/smithy-client").CommandImpl<ExecutePolicyCommandInput, ExecutePolicyCommandOutput, AutoScalingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>Executes the specified policy. This can be useful for testing the design of your
 *             scaling policy.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { AutoScalingClient, ExecutePolicyCommand } from "@aws-sdk/client-auto-scaling"; // ES Modules import
 * // const { AutoScalingClient, ExecutePolicyCommand } = require("@aws-sdk/client-auto-scaling"); // CommonJS import
 * const client = new AutoScalingClient(config);
 * const input = { // ExecutePolicyType
 *   AutoScalingGroupName: "STRING_VALUE",
 *   PolicyName: "STRING_VALUE", // required
 *   HonorCooldown: true || false,
 *   MetricValue: Number("double"),
 *   BreachThreshold: Number("double"),
 * };
 * const command = new ExecutePolicyCommand(input);
 * const response = await client.send(command);
 * // {};
 *
 * ```
 *
 * @param ExecutePolicyCommandInput - {@link ExecutePolicyCommandInput}
 * @returns {@link ExecutePolicyCommandOutput}
 * @see {@link ExecutePolicyCommandInput} for command's `input` shape.
 * @see {@link ExecutePolicyCommandOutput} for command's `response` shape.
 * @see {@link AutoScalingClientResolvedConfig | config} for AutoScalingClient's `config` shape.
 *
 * @throws {@link ResourceContentionFault} (server fault)
 *  <p>You already have a pending update to an Amazon EC2 Auto Scaling resource (for example, an Auto Scaling group,
 *             instance, or load balancer).</p>
 *
 * @throws {@link ScalingActivityInProgressFault} (client fault)
 *  <p>The operation can't be performed because there are scaling activities in
 *             progress.</p>
 *
 * @throws {@link AutoScalingServiceException}
 * <p>Base exception class for all service exceptions from AutoScaling service.</p>
 *
 * @public
 * @example To execute a scaling policy
 * ```javascript
 * // This example executes the specified policy.
 * const input = {
 *   "AutoScalingGroupName": "my-auto-scaling-group",
 *   "BreachThreshold": 50,
 *   "MetricValue": 59,
 *   "PolicyName": "my-step-scale-out-policy"
 * };
 * const command = new ExecutePolicyCommand(input);
 * await client.send(command);
 * // example id: autoscaling-execute-policy-1
 * ```
 *
 */
export declare class ExecutePolicyCommand extends ExecutePolicyCommand_base {
}
