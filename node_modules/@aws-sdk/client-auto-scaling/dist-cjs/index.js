"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AcceleratorManufacturer: () => AcceleratorManufacturer,
  AcceleratorName: () => AcceleratorName,
  AcceleratorType: () => AcceleratorType,
  ActiveInstanceRefreshNotFoundFault: () => ActiveInstanceRefreshNotFoundFault,
  AlreadyExistsFault: () => AlreadyExistsFault,
  AttachInstancesCommand: () => AttachInstancesCommand,
  AttachLoadBalancerTargetGroupsCommand: () => AttachLoadBalancerTargetGroupsCommand,
  AttachLoadBalancersCommand: () => AttachLoadBalancersCommand,
  AttachTrafficSourcesCommand: () => AttachTrafficSourcesCommand,
  AutoScaling: () => AutoScaling,
  AutoScalingClient: () => AutoScalingClient,
  AutoScalingServiceException: () => AutoScalingServiceException,
  BareMetal: () => BareMetal,
  BatchDeleteScheduledActionCommand: () => BatchDeleteScheduledActionCommand,
  BatchPutScheduledUpdateGroupActionCommand: () => BatchPutScheduledUpdateGroupActionCommand,
  BurstablePerformance: () => BurstablePerformance,
  CancelInstanceRefreshCommand: () => CancelInstanceRefreshCommand,
  CompleteLifecycleActionCommand: () => CompleteLifecycleActionCommand,
  CpuManufacturer: () => CpuManufacturer,
  CreateAutoScalingGroupCommand: () => CreateAutoScalingGroupCommand,
  CreateLaunchConfigurationCommand: () => CreateLaunchConfigurationCommand,
  CreateOrUpdateTagsCommand: () => CreateOrUpdateTagsCommand,
  DeleteAutoScalingGroupCommand: () => DeleteAutoScalingGroupCommand,
  DeleteLaunchConfigurationCommand: () => DeleteLaunchConfigurationCommand,
  DeleteLifecycleHookCommand: () => DeleteLifecycleHookCommand,
  DeleteNotificationConfigurationCommand: () => DeleteNotificationConfigurationCommand,
  DeletePolicyCommand: () => DeletePolicyCommand,
  DeleteScheduledActionCommand: () => DeleteScheduledActionCommand,
  DeleteTagsCommand: () => DeleteTagsCommand,
  DeleteWarmPoolCommand: () => DeleteWarmPoolCommand,
  DescribeAccountLimitsCommand: () => DescribeAccountLimitsCommand,
  DescribeAdjustmentTypesCommand: () => DescribeAdjustmentTypesCommand,
  DescribeAutoScalingGroupsCommand: () => DescribeAutoScalingGroupsCommand,
  DescribeAutoScalingInstancesCommand: () => DescribeAutoScalingInstancesCommand,
  DescribeAutoScalingNotificationTypesCommand: () => DescribeAutoScalingNotificationTypesCommand,
  DescribeInstanceRefreshesCommand: () => DescribeInstanceRefreshesCommand,
  DescribeLaunchConfigurationsCommand: () => DescribeLaunchConfigurationsCommand,
  DescribeLifecycleHookTypesCommand: () => DescribeLifecycleHookTypesCommand,
  DescribeLifecycleHooksCommand: () => DescribeLifecycleHooksCommand,
  DescribeLoadBalancerTargetGroupsCommand: () => DescribeLoadBalancerTargetGroupsCommand,
  DescribeLoadBalancersCommand: () => DescribeLoadBalancersCommand,
  DescribeMetricCollectionTypesCommand: () => DescribeMetricCollectionTypesCommand,
  DescribeNotificationConfigurationsCommand: () => DescribeNotificationConfigurationsCommand,
  DescribePoliciesCommand: () => DescribePoliciesCommand,
  DescribeScalingActivitiesCommand: () => DescribeScalingActivitiesCommand,
  DescribeScalingProcessTypesCommand: () => DescribeScalingProcessTypesCommand,
  DescribeScheduledActionsCommand: () => DescribeScheduledActionsCommand,
  DescribeTagsCommand: () => DescribeTagsCommand,
  DescribeTerminationPolicyTypesCommand: () => DescribeTerminationPolicyTypesCommand,
  DescribeTrafficSourcesCommand: () => DescribeTrafficSourcesCommand,
  DescribeWarmPoolCommand: () => DescribeWarmPoolCommand,
  DetachInstancesCommand: () => DetachInstancesCommand,
  DetachLoadBalancerTargetGroupsCommand: () => DetachLoadBalancerTargetGroupsCommand,
  DetachLoadBalancersCommand: () => DetachLoadBalancersCommand,
  DetachTrafficSourcesCommand: () => DetachTrafficSourcesCommand,
  DisableMetricsCollectionCommand: () => DisableMetricsCollectionCommand,
  EnableMetricsCollectionCommand: () => EnableMetricsCollectionCommand,
  EnterStandbyCommand: () => EnterStandbyCommand,
  ExecutePolicyCommand: () => ExecutePolicyCommand,
  ExitStandbyCommand: () => ExitStandbyCommand,
  GetPredictiveScalingForecastCommand: () => GetPredictiveScalingForecastCommand,
  InstanceGeneration: () => InstanceGeneration,
  InstanceMetadataEndpointState: () => InstanceMetadataEndpointState,
  InstanceMetadataHttpTokensState: () => InstanceMetadataHttpTokensState,
  InstanceRefreshInProgressFault: () => InstanceRefreshInProgressFault,
  InstanceRefreshStatus: () => InstanceRefreshStatus,
  InvalidNextToken: () => InvalidNextToken,
  IrreversibleInstanceRefreshFault: () => IrreversibleInstanceRefreshFault,
  LifecycleState: () => LifecycleState,
  LimitExceededFault: () => LimitExceededFault,
  LocalStorage: () => LocalStorage,
  LocalStorageType: () => LocalStorageType,
  MetricStatistic: () => MetricStatistic,
  MetricType: () => MetricType,
  PredefinedLoadMetricType: () => PredefinedLoadMetricType,
  PredefinedMetricPairType: () => PredefinedMetricPairType,
  PredefinedScalingMetricType: () => PredefinedScalingMetricType,
  PredictiveScalingMaxCapacityBreachBehavior: () => PredictiveScalingMaxCapacityBreachBehavior,
  PredictiveScalingMode: () => PredictiveScalingMode,
  PutLifecycleHookCommand: () => PutLifecycleHookCommand,
  PutNotificationConfigurationCommand: () => PutNotificationConfigurationCommand,
  PutScalingPolicyCommand: () => PutScalingPolicyCommand,
  PutScheduledUpdateGroupActionCommand: () => PutScheduledUpdateGroupActionCommand,
  PutWarmPoolCommand: () => PutWarmPoolCommand,
  RecordLifecycleActionHeartbeatCommand: () => RecordLifecycleActionHeartbeatCommand,
  RefreshStrategy: () => RefreshStrategy,
  ResourceContentionFault: () => ResourceContentionFault,
  ResourceInUseFault: () => ResourceInUseFault,
  ResumeProcessesCommand: () => ResumeProcessesCommand,
  RollbackInstanceRefreshCommand: () => RollbackInstanceRefreshCommand,
  ScaleInProtectedInstances: () => ScaleInProtectedInstances,
  ScalingActivityInProgressFault: () => ScalingActivityInProgressFault,
  ScalingActivityStatusCode: () => ScalingActivityStatusCode,
  ServiceLinkedRoleFailure: () => ServiceLinkedRoleFailure,
  SetDesiredCapacityCommand: () => SetDesiredCapacityCommand,
  SetInstanceHealthCommand: () => SetInstanceHealthCommand,
  SetInstanceProtectionCommand: () => SetInstanceProtectionCommand,
  StandbyInstances: () => StandbyInstances,
  StartInstanceRefreshCommand: () => StartInstanceRefreshCommand,
  SuspendProcessesCommand: () => SuspendProcessesCommand,
  TerminateInstanceInAutoScalingGroupCommand: () => TerminateInstanceInAutoScalingGroupCommand,
  UpdateAutoScalingGroupCommand: () => UpdateAutoScalingGroupCommand,
  WarmPoolState: () => WarmPoolState,
  WarmPoolStatus: () => WarmPoolStatus,
  __Client: () => import_smithy_client.Client,
  paginateDescribeAutoScalingGroups: () => paginateDescribeAutoScalingGroups,
  paginateDescribeAutoScalingInstances: () => paginateDescribeAutoScalingInstances,
  paginateDescribeInstanceRefreshes: () => paginateDescribeInstanceRefreshes,
  paginateDescribeLaunchConfigurations: () => paginateDescribeLaunchConfigurations,
  paginateDescribeLoadBalancerTargetGroups: () => paginateDescribeLoadBalancerTargetGroups,
  paginateDescribeLoadBalancers: () => paginateDescribeLoadBalancers,
  paginateDescribeNotificationConfigurations: () => paginateDescribeNotificationConfigurations,
  paginateDescribePolicies: () => paginateDescribePolicies,
  paginateDescribeScalingActivities: () => paginateDescribeScalingActivities,
  paginateDescribeScheduledActions: () => paginateDescribeScheduledActions,
  paginateDescribeTags: () => paginateDescribeTags,
  paginateDescribeTrafficSources: () => paginateDescribeTrafficSources,
  paginateDescribeWarmPool: () => paginateDescribeWarmPool,
  waitForGroupExists: () => waitForGroupExists,
  waitForGroupInService: () => waitForGroupInService,
  waitForGroupNotExists: () => waitForGroupNotExists,
  waitUntilGroupExists: () => waitUntilGroupExists,
  waitUntilGroupInService: () => waitUntilGroupInService,
  waitUntilGroupNotExists: () => waitUntilGroupNotExists
});
module.exports = __toCommonJS(src_exports);

// src/AutoScalingClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "autoscaling"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/AutoScalingClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/AutoScalingClient.ts
var _AutoScalingClient = class _AutoScalingClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
    const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
    const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultAutoScalingHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        })
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
};
__name(_AutoScalingClient, "AutoScalingClient");
var AutoScalingClient = _AutoScalingClient;

// src/AutoScaling.ts


// src/commands/AttachInstancesCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");


// src/protocols/Aws_query.ts
var import_core2 = require("@aws-sdk/core");



// src/models/AutoScalingServiceException.ts

var _AutoScalingServiceException = class _AutoScalingServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _AutoScalingServiceException.prototype);
  }
};
__name(_AutoScalingServiceException, "AutoScalingServiceException");
var AutoScalingServiceException = _AutoScalingServiceException;

// src/models/models_0.ts
var AcceleratorManufacturer = {
  AMAZON_WEB_SERVICES: "amazon-web-services",
  AMD: "amd",
  NVIDIA: "nvidia",
  XILINX: "xilinx"
};
var AcceleratorName = {
  A100: "a100",
  K80: "k80",
  M60: "m60",
  RADEON_PRO_V520: "radeon-pro-v520",
  T4: "t4",
  V100: "v100",
  VU9P: "vu9p"
};
var AcceleratorType = {
  FPGA: "fpga",
  GPU: "gpu",
  INFERENCE: "inference"
};
var _ActiveInstanceRefreshNotFoundFault = class _ActiveInstanceRefreshNotFoundFault extends AutoScalingServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ActiveInstanceRefreshNotFoundFault",
      $fault: "client",
      ...opts
    });
    this.name = "ActiveInstanceRefreshNotFoundFault";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ActiveInstanceRefreshNotFoundFault.prototype);
  }
};
__name(_ActiveInstanceRefreshNotFoundFault, "ActiveInstanceRefreshNotFoundFault");
var ActiveInstanceRefreshNotFoundFault = _ActiveInstanceRefreshNotFoundFault;
var ScalingActivityStatusCode = {
  Cancelled: "Cancelled",
  Failed: "Failed",
  InProgress: "InProgress",
  MidLifecycleAction: "MidLifecycleAction",
  PendingSpotBidPlacement: "PendingSpotBidPlacement",
  PreInService: "PreInService",
  Successful: "Successful",
  WaitingForConnectionDraining: "WaitingForConnectionDraining",
  WaitingForELBConnectionDraining: "WaitingForELBConnectionDraining",
  WaitingForInstanceId: "WaitingForInstanceId",
  WaitingForInstanceWarmup: "WaitingForInstanceWarmup",
  WaitingForSpotInstanceId: "WaitingForSpotInstanceId",
  WaitingForSpotInstanceRequestId: "WaitingForSpotInstanceRequestId"
};
var _AlreadyExistsFault = class _AlreadyExistsFault extends AutoScalingServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    this.name = "AlreadyExistsFault";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AlreadyExistsFault.prototype);
  }
};
__name(_AlreadyExistsFault, "AlreadyExistsFault");
var AlreadyExistsFault = _AlreadyExistsFault;
var _ResourceContentionFault = class _ResourceContentionFault extends AutoScalingServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceContentionFault",
      $fault: "server",
      ...opts
    });
    this.name = "ResourceContentionFault";
    this.$fault = "server";
    Object.setPrototypeOf(this, _ResourceContentionFault.prototype);
  }
};
__name(_ResourceContentionFault, "ResourceContentionFault");
var ResourceContentionFault = _ResourceContentionFault;
var _ServiceLinkedRoleFailure = class _ServiceLinkedRoleFailure extends AutoScalingServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceLinkedRoleFailure",
      $fault: "server",
      ...opts
    });
    this.name = "ServiceLinkedRoleFailure";
    this.$fault = "server";
    Object.setPrototypeOf(this, _ServiceLinkedRoleFailure.prototype);
  }
};
__name(_ServiceLinkedRoleFailure, "ServiceLinkedRoleFailure");
var ServiceLinkedRoleFailure = _ServiceLinkedRoleFailure;
var _LimitExceededFault = class _LimitExceededFault extends AutoScalingServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "LimitExceededFault",
      $fault: "client",
      ...opts
    });
    this.name = "LimitExceededFault";
    this.$fault = "client";
    Object.setPrototypeOf(this, _LimitExceededFault.prototype);
  }
};
__name(_LimitExceededFault, "LimitExceededFault");
var LimitExceededFault = _LimitExceededFault;
var BareMetal = {
  EXCLUDED: "excluded",
  INCLUDED: "included",
  REQUIRED: "required"
};
var BurstablePerformance = {
  EXCLUDED: "excluded",
  INCLUDED: "included",
  REQUIRED: "required"
};
var CpuManufacturer = {
  AMAZON_WEB_SERVICES: "amazon-web-services",
  AMD: "amd",
  INTEL: "intel"
};
var InstanceGeneration = {
  CURRENT: "current",
  PREVIOUS: "previous"
};
var LocalStorage = {
  EXCLUDED: "excluded",
  INCLUDED: "included",
  REQUIRED: "required"
};
var LocalStorageType = {
  HDD: "hdd",
  SSD: "ssd"
};
var InstanceMetadataEndpointState = {
  Disabled: "disabled",
  Enabled: "enabled"
};
var InstanceMetadataHttpTokensState = {
  Optional: "optional",
  Required: "required"
};
var _ResourceInUseFault = class _ResourceInUseFault extends AutoScalingServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceInUseFault",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceInUseFault";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceInUseFault.prototype);
  }
};
__name(_ResourceInUseFault, "ResourceInUseFault");
var ResourceInUseFault = _ResourceInUseFault;
var _ScalingActivityInProgressFault = class _ScalingActivityInProgressFault extends AutoScalingServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ScalingActivityInProgressFault",
      $fault: "client",
      ...opts
    });
    this.name = "ScalingActivityInProgressFault";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ScalingActivityInProgressFault.prototype);
  }
};
__name(_ScalingActivityInProgressFault, "ScalingActivityInProgressFault");
var ScalingActivityInProgressFault = _ScalingActivityInProgressFault;
var LifecycleState = {
  DETACHED: "Detached",
  DETACHING: "Detaching",
  ENTERING_STANDBY: "EnteringStandby",
  IN_SERVICE: "InService",
  PENDING: "Pending",
  PENDING_PROCEED: "Pending:Proceed",
  PENDING_WAIT: "Pending:Wait",
  QUARANTINED: "Quarantined",
  STANDBY: "Standby",
  TERMINATED: "Terminated",
  TERMINATING: "Terminating",
  TERMINATING_PROCEED: "Terminating:Proceed",
  TERMINATING_WAIT: "Terminating:Wait",
  WARMED_HIBERNATED: "Warmed:Hibernated",
  WARMED_PENDING: "Warmed:Pending",
  WARMED_PENDING_PROCEED: "Warmed:Pending:Proceed",
  WARMED_PENDING_WAIT: "Warmed:Pending:Wait",
  WARMED_RUNNING: "Warmed:Running",
  WARMED_STOPPED: "Warmed:Stopped",
  WARMED_TERMINATED: "Warmed:Terminated",
  WARMED_TERMINATING: "Warmed:Terminating",
  WARMED_TERMINATING_PROCEED: "Warmed:Terminating:Proceed",
  WARMED_TERMINATING_WAIT: "Warmed:Terminating:Wait"
};
var WarmPoolState = {
  Hibernated: "Hibernated",
  Running: "Running",
  Stopped: "Stopped"
};
var WarmPoolStatus = {
  PendingDelete: "PendingDelete"
};
var _InvalidNextToken = class _InvalidNextToken extends AutoScalingServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidNextToken",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidNextToken";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidNextToken.prototype);
  }
};
__name(_InvalidNextToken, "InvalidNextToken");
var InvalidNextToken = _InvalidNextToken;
var ScaleInProtectedInstances = {
  Ignore: "Ignore",
  Refresh: "Refresh",
  Wait: "Wait"
};
var StandbyInstances = {
  Ignore: "Ignore",
  Terminate: "Terminate",
  Wait: "Wait"
};
var InstanceRefreshStatus = {
  Cancelled: "Cancelled",
  Cancelling: "Cancelling",
  Failed: "Failed",
  InProgress: "InProgress",
  Pending: "Pending",
  RollbackFailed: "RollbackFailed",
  RollbackInProgress: "RollbackInProgress",
  RollbackSuccessful: "RollbackSuccessful",
  Successful: "Successful"
};
var PredictiveScalingMaxCapacityBreachBehavior = {
  HonorMaxCapacity: "HonorMaxCapacity",
  IncreaseMaxCapacity: "IncreaseMaxCapacity"
};
var PredefinedLoadMetricType = {
  ALBTargetGroupRequestCount: "ALBTargetGroupRequestCount",
  ASGTotalCPUUtilization: "ASGTotalCPUUtilization",
  ASGTotalNetworkIn: "ASGTotalNetworkIn",
  ASGTotalNetworkOut: "ASGTotalNetworkOut"
};
var PredefinedMetricPairType = {
  ALBRequestCount: "ALBRequestCount",
  ASGCPUUtilization: "ASGCPUUtilization",
  ASGNetworkIn: "ASGNetworkIn",
  ASGNetworkOut: "ASGNetworkOut"
};
var PredefinedScalingMetricType = {
  ALBRequestCountPerTarget: "ALBRequestCountPerTarget",
  ASGAverageCPUUtilization: "ASGAverageCPUUtilization",
  ASGAverageNetworkIn: "ASGAverageNetworkIn",
  ASGAverageNetworkOut: "ASGAverageNetworkOut"
};
var PredictiveScalingMode = {
  ForecastAndScale: "ForecastAndScale",
  ForecastOnly: "ForecastOnly"
};
var MetricStatistic = {
  Average: "Average",
  Maximum: "Maximum",
  Minimum: "Minimum",
  SampleCount: "SampleCount",
  Sum: "Sum"
};
var MetricType = {
  ALBRequestCountPerTarget: "ALBRequestCountPerTarget",
  ASGAverageCPUUtilization: "ASGAverageCPUUtilization",
  ASGAverageNetworkIn: "ASGAverageNetworkIn",
  ASGAverageNetworkOut: "ASGAverageNetworkOut"
};
var _IrreversibleInstanceRefreshFault = class _IrreversibleInstanceRefreshFault extends AutoScalingServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "IrreversibleInstanceRefreshFault",
      $fault: "client",
      ...opts
    });
    this.name = "IrreversibleInstanceRefreshFault";
    this.$fault = "client";
    Object.setPrototypeOf(this, _IrreversibleInstanceRefreshFault.prototype);
  }
};
__name(_IrreversibleInstanceRefreshFault, "IrreversibleInstanceRefreshFault");
var IrreversibleInstanceRefreshFault = _IrreversibleInstanceRefreshFault;
var _InstanceRefreshInProgressFault = class _InstanceRefreshInProgressFault extends AutoScalingServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InstanceRefreshInProgressFault",
      $fault: "client",
      ...opts
    });
    this.name = "InstanceRefreshInProgressFault";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InstanceRefreshInProgressFault.prototype);
  }
};
__name(_InstanceRefreshInProgressFault, "InstanceRefreshInProgressFault");
var InstanceRefreshInProgressFault = _InstanceRefreshInProgressFault;
var RefreshStrategy = {
  Rolling: "Rolling"
};

// src/protocols/Aws_query.ts
var se_AttachInstancesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AttachInstancesQuery(input, context),
    [_A]: _AI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_AttachInstancesCommand");
var se_AttachLoadBalancersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AttachLoadBalancersType(input, context),
    [_A]: _ALB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_AttachLoadBalancersCommand");
var se_AttachLoadBalancerTargetGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AttachLoadBalancerTargetGroupsType(input, context),
    [_A]: _ALBTG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_AttachLoadBalancerTargetGroupsCommand");
var se_AttachTrafficSourcesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AttachTrafficSourcesType(input, context),
    [_A]: _ATS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_AttachTrafficSourcesCommand");
var se_BatchDeleteScheduledActionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_BatchDeleteScheduledActionType(input, context),
    [_A]: _BDSA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_BatchDeleteScheduledActionCommand");
var se_BatchPutScheduledUpdateGroupActionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_BatchPutScheduledUpdateGroupActionType(input, context),
    [_A]: _BPSUGA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_BatchPutScheduledUpdateGroupActionCommand");
var se_CancelInstanceRefreshCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CancelInstanceRefreshType(input, context),
    [_A]: _CIR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CancelInstanceRefreshCommand");
var se_CompleteLifecycleActionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CompleteLifecycleActionType(input, context),
    [_A]: _CLA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CompleteLifecycleActionCommand");
var se_CreateAutoScalingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateAutoScalingGroupType(input, context),
    [_A]: _CASG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateAutoScalingGroupCommand");
var se_CreateLaunchConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateLaunchConfigurationType(input, context),
    [_A]: _CLC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateLaunchConfigurationCommand");
var se_CreateOrUpdateTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateOrUpdateTagsType(input, context),
    [_A]: _COUT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateOrUpdateTagsCommand");
var se_DeleteAutoScalingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteAutoScalingGroupType(input, context),
    [_A]: _DASG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteAutoScalingGroupCommand");
var se_DeleteLaunchConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_LaunchConfigurationNameType(input, context),
    [_A]: _DLC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteLaunchConfigurationCommand");
var se_DeleteLifecycleHookCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteLifecycleHookType(input, context),
    [_A]: _DLH,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteLifecycleHookCommand");
var se_DeleteNotificationConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteNotificationConfigurationType(input, context),
    [_A]: _DNC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteNotificationConfigurationCommand");
var se_DeletePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeletePolicyType(input, context),
    [_A]: _DP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeletePolicyCommand");
var se_DeleteScheduledActionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteScheduledActionType(input, context),
    [_A]: _DSA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteScheduledActionCommand");
var se_DeleteTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTagsType(input, context),
    [_A]: _DT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteTagsCommand");
var se_DeleteWarmPoolCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteWarmPoolType(input, context),
    [_A]: _DWP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteWarmPoolCommand");
var se_DescribeAccountLimitsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  const body = buildFormUrlencodedString({
    [_A]: _DAL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeAccountLimitsCommand");
var se_DescribeAdjustmentTypesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  const body = buildFormUrlencodedString({
    [_A]: _DAT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeAdjustmentTypesCommand");
var se_DescribeAutoScalingGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AutoScalingGroupNamesType(input, context),
    [_A]: _DASGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeAutoScalingGroupsCommand");
var se_DescribeAutoScalingInstancesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeAutoScalingInstancesType(input, context),
    [_A]: _DASI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeAutoScalingInstancesCommand");
var se_DescribeAutoScalingNotificationTypesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  const body = buildFormUrlencodedString({
    [_A]: _DASNT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeAutoScalingNotificationTypesCommand");
var se_DescribeInstanceRefreshesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceRefreshesType(input, context),
    [_A]: _DIR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeInstanceRefreshesCommand");
var se_DescribeLaunchConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_LaunchConfigurationNamesType(input, context),
    [_A]: _DLCe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeLaunchConfigurationsCommand");
var se_DescribeLifecycleHooksCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeLifecycleHooksType(input, context),
    [_A]: _DLHe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeLifecycleHooksCommand");
var se_DescribeLifecycleHookTypesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  const body = buildFormUrlencodedString({
    [_A]: _DLHT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeLifecycleHookTypesCommand");
var se_DescribeLoadBalancersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeLoadBalancersRequest(input, context),
    [_A]: _DLB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeLoadBalancersCommand");
var se_DescribeLoadBalancerTargetGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeLoadBalancerTargetGroupsRequest(input, context),
    [_A]: _DLBTG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeLoadBalancerTargetGroupsCommand");
var se_DescribeMetricCollectionTypesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  const body = buildFormUrlencodedString({
    [_A]: _DMCT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeMetricCollectionTypesCommand");
var se_DescribeNotificationConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeNotificationConfigurationsType(input, context),
    [_A]: _DNCe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeNotificationConfigurationsCommand");
var se_DescribePoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribePoliciesType(input, context),
    [_A]: _DPe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribePoliciesCommand");
var se_DescribeScalingActivitiesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeScalingActivitiesType(input, context),
    [_A]: _DSAe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeScalingActivitiesCommand");
var se_DescribeScalingProcessTypesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  const body = buildFormUrlencodedString({
    [_A]: _DSPT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeScalingProcessTypesCommand");
var se_DescribeScheduledActionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeScheduledActionsType(input, context),
    [_A]: _DSAes,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeScheduledActionsCommand");
var se_DescribeTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTagsType(input, context),
    [_A]: _DTe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeTagsCommand");
var se_DescribeTerminationPolicyTypesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  const body = buildFormUrlencodedString({
    [_A]: _DTPT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeTerminationPolicyTypesCommand");
var se_DescribeTrafficSourcesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTrafficSourcesRequest(input, context),
    [_A]: _DTS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeTrafficSourcesCommand");
var se_DescribeWarmPoolCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeWarmPoolType(input, context),
    [_A]: _DWPe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeWarmPoolCommand");
var se_DetachInstancesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DetachInstancesQuery(input, context),
    [_A]: _DI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DetachInstancesCommand");
var se_DetachLoadBalancersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DetachLoadBalancersType(input, context),
    [_A]: _DLBe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DetachLoadBalancersCommand");
var se_DetachLoadBalancerTargetGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DetachLoadBalancerTargetGroupsType(input, context),
    [_A]: _DLBTGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DetachLoadBalancerTargetGroupsCommand");
var se_DetachTrafficSourcesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DetachTrafficSourcesType(input, context),
    [_A]: _DTSe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DetachTrafficSourcesCommand");
var se_DisableMetricsCollectionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableMetricsCollectionQuery(input, context),
    [_A]: _DMC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DisableMetricsCollectionCommand");
var se_EnableMetricsCollectionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableMetricsCollectionQuery(input, context),
    [_A]: _EMC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_EnableMetricsCollectionCommand");
var se_EnterStandbyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnterStandbyQuery(input, context),
    [_A]: _ES,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_EnterStandbyCommand");
var se_ExecutePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ExecutePolicyType(input, context),
    [_A]: _EP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ExecutePolicyCommand");
var se_ExitStandbyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ExitStandbyQuery(input, context),
    [_A]: _ESx,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ExitStandbyCommand");
var se_GetPredictiveScalingForecastCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetPredictiveScalingForecastType(input, context),
    [_A]: _GPSF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_GetPredictiveScalingForecastCommand");
var se_PutLifecycleHookCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PutLifecycleHookType(input, context),
    [_A]: _PLH,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_PutLifecycleHookCommand");
var se_PutNotificationConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PutNotificationConfigurationType(input, context),
    [_A]: _PNC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_PutNotificationConfigurationCommand");
var se_PutScalingPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PutScalingPolicyType(input, context),
    [_A]: _PSP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_PutScalingPolicyCommand");
var se_PutScheduledUpdateGroupActionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PutScheduledUpdateGroupActionType(input, context),
    [_A]: _PSUGA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_PutScheduledUpdateGroupActionCommand");
var se_PutWarmPoolCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PutWarmPoolType(input, context),
    [_A]: _PWP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_PutWarmPoolCommand");
var se_RecordLifecycleActionHeartbeatCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RecordLifecycleActionHeartbeatType(input, context),
    [_A]: _RLAH,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RecordLifecycleActionHeartbeatCommand");
var se_ResumeProcessesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ScalingProcessQuery(input, context),
    [_A]: _RP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ResumeProcessesCommand");
var se_RollbackInstanceRefreshCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RollbackInstanceRefreshType(input, context),
    [_A]: _RIR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RollbackInstanceRefreshCommand");
var se_SetDesiredCapacityCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SetDesiredCapacityType(input, context),
    [_A]: _SDC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_SetDesiredCapacityCommand");
var se_SetInstanceHealthCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SetInstanceHealthQuery(input, context),
    [_A]: _SIH,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_SetInstanceHealthCommand");
var se_SetInstanceProtectionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SetInstanceProtectionQuery(input, context),
    [_A]: _SIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_SetInstanceProtectionCommand");
var se_StartInstanceRefreshCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_StartInstanceRefreshType(input, context),
    [_A]: _SIR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_StartInstanceRefreshCommand");
var se_SuspendProcessesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ScalingProcessQuery(input, context),
    [_A]: _SP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_SuspendProcessesCommand");
var se_TerminateInstanceInAutoScalingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_TerminateInstanceInAutoScalingGroupType(input, context),
    [_A]: _TIIASG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_TerminateInstanceInAutoScalingGroupCommand");
var se_UpdateAutoScalingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateAutoScalingGroupType(input, context),
    [_A]: _UASG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_UpdateAutoScalingGroupCommand");
var de_AttachInstancesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_AttachInstancesCommand");
var de_AttachLoadBalancersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_AttachLoadBalancersResultType(data.AttachLoadBalancersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_AttachLoadBalancersCommand");
var de_AttachLoadBalancerTargetGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_AttachLoadBalancerTargetGroupsResultType(data.AttachLoadBalancerTargetGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_AttachLoadBalancerTargetGroupsCommand");
var de_AttachTrafficSourcesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_AttachTrafficSourcesResultType(data.AttachTrafficSourcesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_AttachTrafficSourcesCommand");
var de_BatchDeleteScheduledActionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_BatchDeleteScheduledActionAnswer(data.BatchDeleteScheduledActionResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_BatchDeleteScheduledActionCommand");
var de_BatchPutScheduledUpdateGroupActionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_BatchPutScheduledUpdateGroupActionAnswer(data.BatchPutScheduledUpdateGroupActionResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_BatchPutScheduledUpdateGroupActionCommand");
var de_CancelInstanceRefreshCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CancelInstanceRefreshAnswer(data.CancelInstanceRefreshResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CancelInstanceRefreshCommand");
var de_CompleteLifecycleActionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CompleteLifecycleActionAnswer(data.CompleteLifecycleActionResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CompleteLifecycleActionCommand");
var de_CreateAutoScalingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_CreateAutoScalingGroupCommand");
var de_CreateLaunchConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_CreateLaunchConfigurationCommand");
var de_CreateOrUpdateTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_CreateOrUpdateTagsCommand");
var de_DeleteAutoScalingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_DeleteAutoScalingGroupCommand");
var de_DeleteLaunchConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_DeleteLaunchConfigurationCommand");
var de_DeleteLifecycleHookCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteLifecycleHookAnswer(data.DeleteLifecycleHookResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteLifecycleHookCommand");
var de_DeleteNotificationConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_DeleteNotificationConfigurationCommand");
var de_DeletePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_DeletePolicyCommand");
var de_DeleteScheduledActionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_DeleteScheduledActionCommand");
var de_DeleteTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_DeleteTagsCommand");
var de_DeleteWarmPoolCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteWarmPoolAnswer(data.DeleteWarmPoolResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteWarmPoolCommand");
var de_DescribeAccountLimitsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeAccountLimitsAnswer(data.DescribeAccountLimitsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeAccountLimitsCommand");
var de_DescribeAdjustmentTypesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeAdjustmentTypesAnswer(data.DescribeAdjustmentTypesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeAdjustmentTypesCommand");
var de_DescribeAutoScalingGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_AutoScalingGroupsType(data.DescribeAutoScalingGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeAutoScalingGroupsCommand");
var de_DescribeAutoScalingInstancesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_AutoScalingInstancesType(data.DescribeAutoScalingInstancesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeAutoScalingInstancesCommand");
var de_DescribeAutoScalingNotificationTypesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeAutoScalingNotificationTypesAnswer(data.DescribeAutoScalingNotificationTypesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeAutoScalingNotificationTypesCommand");
var de_DescribeInstanceRefreshesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeInstanceRefreshesAnswer(data.DescribeInstanceRefreshesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeInstanceRefreshesCommand");
var de_DescribeLaunchConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_LaunchConfigurationsType(data.DescribeLaunchConfigurationsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeLaunchConfigurationsCommand");
var de_DescribeLifecycleHooksCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeLifecycleHooksAnswer(data.DescribeLifecycleHooksResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeLifecycleHooksCommand");
var de_DescribeLifecycleHookTypesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeLifecycleHookTypesAnswer(data.DescribeLifecycleHookTypesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeLifecycleHookTypesCommand");
var de_DescribeLoadBalancersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeLoadBalancersResponse(data.DescribeLoadBalancersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeLoadBalancersCommand");
var de_DescribeLoadBalancerTargetGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeLoadBalancerTargetGroupsResponse(data.DescribeLoadBalancerTargetGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeLoadBalancerTargetGroupsCommand");
var de_DescribeMetricCollectionTypesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeMetricCollectionTypesAnswer(data.DescribeMetricCollectionTypesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeMetricCollectionTypesCommand");
var de_DescribeNotificationConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeNotificationConfigurationsAnswer(data.DescribeNotificationConfigurationsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeNotificationConfigurationsCommand");
var de_DescribePoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_PoliciesType(data.DescribePoliciesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribePoliciesCommand");
var de_DescribeScalingActivitiesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ActivitiesType(data.DescribeScalingActivitiesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeScalingActivitiesCommand");
var de_DescribeScalingProcessTypesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ProcessesType(data.DescribeScalingProcessTypesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeScalingProcessTypesCommand");
var de_DescribeScheduledActionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ScheduledActionsType(data.DescribeScheduledActionsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeScheduledActionsCommand");
var de_DescribeTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_TagsType(data.DescribeTagsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeTagsCommand");
var de_DescribeTerminationPolicyTypesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeTerminationPolicyTypesAnswer(data.DescribeTerminationPolicyTypesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeTerminationPolicyTypesCommand");
var de_DescribeTrafficSourcesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeTrafficSourcesResponse(data.DescribeTrafficSourcesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeTrafficSourcesCommand");
var de_DescribeWarmPoolCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeWarmPoolAnswer(data.DescribeWarmPoolResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeWarmPoolCommand");
var de_DetachInstancesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DetachInstancesAnswer(data.DetachInstancesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DetachInstancesCommand");
var de_DetachLoadBalancersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DetachLoadBalancersResultType(data.DetachLoadBalancersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DetachLoadBalancersCommand");
var de_DetachLoadBalancerTargetGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DetachLoadBalancerTargetGroupsResultType(data.DetachLoadBalancerTargetGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DetachLoadBalancerTargetGroupsCommand");
var de_DetachTrafficSourcesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DetachTrafficSourcesResultType(data.DetachTrafficSourcesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DetachTrafficSourcesCommand");
var de_DisableMetricsCollectionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_DisableMetricsCollectionCommand");
var de_EnableMetricsCollectionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_EnableMetricsCollectionCommand");
var de_EnterStandbyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_EnterStandbyAnswer(data.EnterStandbyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_EnterStandbyCommand");
var de_ExecutePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_ExecutePolicyCommand");
var de_ExitStandbyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ExitStandbyAnswer(data.ExitStandbyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ExitStandbyCommand");
var de_GetPredictiveScalingForecastCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_GetPredictiveScalingForecastAnswer(data.GetPredictiveScalingForecastResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_GetPredictiveScalingForecastCommand");
var de_PutLifecycleHookCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_PutLifecycleHookAnswer(data.PutLifecycleHookResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_PutLifecycleHookCommand");
var de_PutNotificationConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_PutNotificationConfigurationCommand");
var de_PutScalingPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_PolicyARNType(data.PutScalingPolicyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_PutScalingPolicyCommand");
var de_PutScheduledUpdateGroupActionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_PutScheduledUpdateGroupActionCommand");
var de_PutWarmPoolCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_PutWarmPoolAnswer(data.PutWarmPoolResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_PutWarmPoolCommand");
var de_RecordLifecycleActionHeartbeatCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_RecordLifecycleActionHeartbeatAnswer(data.RecordLifecycleActionHeartbeatResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_RecordLifecycleActionHeartbeatCommand");
var de_ResumeProcessesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_ResumeProcessesCommand");
var de_RollbackInstanceRefreshCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_RollbackInstanceRefreshAnswer(data.RollbackInstanceRefreshResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_RollbackInstanceRefreshCommand");
var de_SetDesiredCapacityCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_SetDesiredCapacityCommand");
var de_SetInstanceHealthCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_SetInstanceHealthCommand");
var de_SetInstanceProtectionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_SetInstanceProtectionAnswer(data.SetInstanceProtectionResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_SetInstanceProtectionCommand");
var de_StartInstanceRefreshCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_StartInstanceRefreshAnswer(data.StartInstanceRefreshResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_StartInstanceRefreshCommand");
var de_SuspendProcessesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_SuspendProcessesCommand");
var de_TerminateInstanceInAutoScalingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ActivityType(data.TerminateInstanceInAutoScalingGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_TerminateInstanceInAutoScalingGroupCommand");
var de_UpdateAutoScalingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_UpdateAutoScalingGroupCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseXmlErrorBody)(output.body, context)
  };
  const errorCode = loadQueryErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceContention":
    case "com.amazonaws.autoscaling#ResourceContentionFault":
      throw await de_ResourceContentionFaultRes(parsedOutput, context);
    case "ServiceLinkedRoleFailure":
    case "com.amazonaws.autoscaling#ServiceLinkedRoleFailure":
      throw await de_ServiceLinkedRoleFailureRes(parsedOutput, context);
    case "AlreadyExists":
    case "com.amazonaws.autoscaling#AlreadyExistsFault":
      throw await de_AlreadyExistsFaultRes(parsedOutput, context);
    case "LimitExceeded":
    case "com.amazonaws.autoscaling#LimitExceededFault":
      throw await de_LimitExceededFaultRes(parsedOutput, context);
    case "ActiveInstanceRefreshNotFound":
    case "com.amazonaws.autoscaling#ActiveInstanceRefreshNotFoundFault":
      throw await de_ActiveInstanceRefreshNotFoundFaultRes(parsedOutput, context);
    case "ResourceInUse":
    case "com.amazonaws.autoscaling#ResourceInUseFault":
      throw await de_ResourceInUseFaultRes(parsedOutput, context);
    case "ScalingActivityInProgress":
    case "com.amazonaws.autoscaling#ScalingActivityInProgressFault":
      throw await de_ScalingActivityInProgressFaultRes(parsedOutput, context);
    case "InvalidNextToken":
    case "com.amazonaws.autoscaling#InvalidNextToken":
      throw await de_InvalidNextTokenRes(parsedOutput, context);
    case "IrreversibleInstanceRefresh":
    case "com.amazonaws.autoscaling#IrreversibleInstanceRefreshFault":
      throw await de_IrreversibleInstanceRefreshFaultRes(parsedOutput, context);
    case "InstanceRefreshInProgress":
    case "com.amazonaws.autoscaling#InstanceRefreshInProgressFault":
      throw await de_InstanceRefreshInProgressFaultRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
}, "de_CommandError");
var de_ActiveInstanceRefreshNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ActiveInstanceRefreshNotFoundFault(body.Error, context);
  const exception = new ActiveInstanceRefreshNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ActiveInstanceRefreshNotFoundFaultRes");
var de_AlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_AlreadyExistsFault(body.Error, context);
  const exception = new AlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_AlreadyExistsFaultRes");
var de_InstanceRefreshInProgressFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InstanceRefreshInProgressFault(body.Error, context);
  const exception = new InstanceRefreshInProgressFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InstanceRefreshInProgressFaultRes");
var de_InvalidNextTokenRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidNextToken(body.Error, context);
  const exception = new InvalidNextToken({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidNextTokenRes");
var de_IrreversibleInstanceRefreshFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_IrreversibleInstanceRefreshFault(body.Error, context);
  const exception = new IrreversibleInstanceRefreshFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_IrreversibleInstanceRefreshFaultRes");
var de_LimitExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_LimitExceededFault(body.Error, context);
  const exception = new LimitExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_LimitExceededFaultRes");
var de_ResourceContentionFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ResourceContentionFault(body.Error, context);
  const exception = new ResourceContentionFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ResourceContentionFaultRes");
var de_ResourceInUseFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ResourceInUseFault(body.Error, context);
  const exception = new ResourceInUseFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ResourceInUseFaultRes");
var de_ScalingActivityInProgressFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ScalingActivityInProgressFault(body.Error, context);
  const exception = new ScalingActivityInProgressFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ScalingActivityInProgressFaultRes");
var de_ServiceLinkedRoleFailureRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ServiceLinkedRoleFailure(body.Error, context);
  const exception = new ServiceLinkedRoleFailure({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ServiceLinkedRoleFailureRes");
var se_AcceleratorCountRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_AcceleratorCountRequest");
var se_AcceleratorManufacturers = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_AcceleratorManufacturers");
var se_AcceleratorNames = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_AcceleratorNames");
var se_AcceleratorTotalMemoryMiBRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_AcceleratorTotalMemoryMiBRequest");
var se_AcceleratorTypes = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_AcceleratorTypes");
var se_ActivityIds = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_ActivityIds");
var se_AlarmList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_AlarmList");
var se_AlarmSpecification = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_Al] != null) {
    const memberEntries = se_AlarmList(input[_Al], context);
    if (((_a = input[_Al]) == null ? void 0 : _a.length) === 0) {
      entries.Alarms = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Alarms.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_AlarmSpecification");
var se_AllowedInstanceTypes = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_AllowedInstanceTypes");
var se_AttachInstancesQuery = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_II] != null) {
    const memberEntries = se_InstanceIds(input[_II], context);
    if (((_a = input[_II]) == null ? void 0 : _a.length) === 0) {
      entries.InstanceIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  return entries;
}, "se_AttachInstancesQuery");
var se_AttachLoadBalancersType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_LBN] != null) {
    const memberEntries = se_LoadBalancerNames(input[_LBN], context);
    if (((_a = input[_LBN]) == null ? void 0 : _a.length) === 0) {
      entries.LoadBalancerNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadBalancerNames.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_AttachLoadBalancersType");
var se_AttachLoadBalancerTargetGroupsType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_TGARN] != null) {
    const memberEntries = se_TargetGroupARNs(input[_TGARN], context);
    if (((_a = input[_TGARN]) == null ? void 0 : _a.length) === 0) {
      entries.TargetGroupARNs = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetGroupARNs.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_AttachLoadBalancerTargetGroupsType");
var se_AttachTrafficSourcesType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TrafficSources(input[_TS], context);
    if (((_a = input[_TS]) == null ? void 0 : _a.length) === 0) {
      entries.TrafficSources = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficSources.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_AttachTrafficSourcesType");
var se_AutoScalingGroupNames = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_AutoScalingGroupNames");
var se_AutoScalingGroupNamesType = /* @__PURE__ */ __name((input, context) => {
  var _a, _b;
  const entries = {};
  if (input[_ASGNu] != null) {
    const memberEntries = se_AutoScalingGroupNames(input[_ASGNu], context);
    if (((_a = input[_ASGNu]) == null ? void 0 : _a.length) === 0) {
      entries.AutoScalingGroupNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AutoScalingGroupNames.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_F] != null) {
    const memberEntries = se_Filters(input[_F], context);
    if (((_b = input[_F]) == null ? void 0 : _b.length) === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_AutoScalingGroupNamesType");
var se_AutoScalingNotificationTypes = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_AutoScalingNotificationTypes");
var se_AvailabilityZones = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_AvailabilityZones");
var se_BaselineEbsBandwidthMbpsRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_BaselineEbsBandwidthMbpsRequest");
var se_BatchDeleteScheduledActionType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_SAN] != null) {
    const memberEntries = se_ScheduledActionNames(input[_SAN], context);
    if (((_a = input[_SAN]) == null ? void 0 : _a.length) === 0) {
      entries.ScheduledActionNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ScheduledActionNames.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_BatchDeleteScheduledActionType");
var se_BatchPutScheduledUpdateGroupActionType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_SUGA] != null) {
    const memberEntries = se_ScheduledUpdateGroupActionRequests(input[_SUGA], context);
    if (((_a = input[_SUGA]) == null ? void 0 : _a.length) === 0) {
      entries.ScheduledUpdateGroupActions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ScheduledUpdateGroupActions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_BatchPutScheduledUpdateGroupActionType");
var se_BlockDeviceMapping = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_VN] != null) {
    entries[_VN] = input[_VN];
  }
  if (input[_DN] != null) {
    entries[_DN] = input[_DN];
  }
  if (input[_E] != null) {
    const memberEntries = se_Ebs(input[_E], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ND] != null) {
    entries[_ND] = input[_ND];
  }
  return entries;
}, "se_BlockDeviceMapping");
var se_BlockDeviceMappings = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_BlockDeviceMapping(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_BlockDeviceMappings");
var se_CancelInstanceRefreshType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  return entries;
}, "se_CancelInstanceRefreshType");
var se_CheckpointPercentages = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_CheckpointPercentages");
var se_ClassicLinkVPCSecurityGroups = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_ClassicLinkVPCSecurityGroups");
var se_CompleteLifecycleActionType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LHN] != null) {
    entries[_LHN] = input[_LHN];
  }
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_LAT] != null) {
    entries[_LAT] = input[_LAT];
  }
  if (input[_LAR] != null) {
    entries[_LAR] = input[_LAR];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  return entries;
}, "se_CompleteLifecycleActionType");
var se_CpuManufacturers = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_CpuManufacturers");
var se_CreateAutoScalingGroupType = /* @__PURE__ */ __name((input, context) => {
  var _a, _b, _c, _d, _e, _f, _g;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_LCN] != null) {
    entries[_LCN] = input[_LCN];
  }
  if (input[_LT] != null) {
    const memberEntries = se_LaunchTemplateSpecification(input[_LT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplate.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MIP] != null) {
    const memberEntries = se_MixedInstancesPolicy(input[_MIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MixedInstancesPolicy.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_MS] != null) {
    entries[_MS] = input[_MS];
  }
  if (input[_MSa] != null) {
    entries[_MSa] = input[_MSa];
  }
  if (input[_DC] != null) {
    entries[_DC] = input[_DC];
  }
  if (input[_DCe] != null) {
    entries[_DCe] = input[_DCe];
  }
  if (input[_AZ] != null) {
    const memberEntries = se_AvailabilityZones(input[_AZ], context);
    if (((_a = input[_AZ]) == null ? void 0 : _a.length) === 0) {
      entries.AvailabilityZones = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AvailabilityZones.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LBN] != null) {
    const memberEntries = se_LoadBalancerNames(input[_LBN], context);
    if (((_b = input[_LBN]) == null ? void 0 : _b.length) === 0) {
      entries.LoadBalancerNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadBalancerNames.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TGARN] != null) {
    const memberEntries = se_TargetGroupARNs(input[_TGARN], context);
    if (((_c = input[_TGARN]) == null ? void 0 : _c.length) === 0) {
      entries.TargetGroupARNs = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetGroupARNs.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_HCT] != null) {
    entries[_HCT] = input[_HCT];
  }
  if (input[_HCGP] != null) {
    entries[_HCGP] = input[_HCGP];
  }
  if (input[_PG] != null) {
    entries[_PG] = input[_PG];
  }
  if (input[_VPCZI] != null) {
    entries[_VPCZI] = input[_VPCZI];
  }
  if (input[_TP] != null) {
    const memberEntries = se_TerminationPolicies(input[_TP], context);
    if (((_d = input[_TP]) == null ? void 0 : _d.length) === 0) {
      entries.TerminationPolicies = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TerminationPolicies.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NIPFSI] != null) {
    entries[_NIPFSI] = input[_NIPFSI];
  }
  if (input[_CR] != null) {
    entries[_CR] = input[_CR];
  }
  if (input[_LHSL] != null) {
    const memberEntries = se_LifecycleHookSpecifications(input[_LHSL], context);
    if (((_e = input[_LHSL]) == null ? void 0 : _e.length) === 0) {
      entries.LifecycleHookSpecificationList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LifecycleHookSpecificationList.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_T] != null) {
    const memberEntries = se_Tags(input[_T], context);
    if (((_f = input[_T]) == null ? void 0 : _f.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SLRARN] != null) {
    entries[_SLRARN] = input[_SLRARN];
  }
  if (input[_MIL] != null) {
    entries[_MIL] = input[_MIL];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_DCT] != null) {
    entries[_DCT] = input[_DCT];
  }
  if (input[_DIW] != null) {
    entries[_DIW] = input[_DIW];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TrafficSources(input[_TS], context);
    if (((_g = input[_TS]) == null ? void 0 : _g.length) === 0) {
      entries.TrafficSources = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficSources.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IMP] != null) {
    const memberEntries = se_InstanceMaintenancePolicy(input[_IMP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceMaintenancePolicy.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateAutoScalingGroupType");
var se_CreateLaunchConfigurationType = /* @__PURE__ */ __name((input, context) => {
  var _a, _b, _c;
  const entries = {};
  if (input[_LCN] != null) {
    entries[_LCN] = input[_LCN];
  }
  if (input[_IIm] != null) {
    entries[_IIm] = input[_IIm];
  }
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_SG] != null) {
    const memberEntries = se_SecurityGroups(input[_SG], context);
    if (((_a = input[_SG]) == null ? void 0 : _a.length) === 0) {
      entries.SecurityGroups = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroups.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CLVPCI] != null) {
    entries[_CLVPCI] = input[_CLVPCI];
  }
  if (input[_CLVPCSG] != null) {
    const memberEntries = se_ClassicLinkVPCSecurityGroups(input[_CLVPCSG], context);
    if (((_b = input[_CLVPCSG]) == null ? void 0 : _b.length) === 0) {
      entries.ClassicLinkVPCSecurityGroups = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClassicLinkVPCSecurityGroups.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_UD] != null) {
    entries[_UD] = input[_UD];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_KI] != null) {
    entries[_KI] = input[_KI];
  }
  if (input[_RI] != null) {
    entries[_RI] = input[_RI];
  }
  if (input[_BDM] != null) {
    const memberEntries = se_BlockDeviceMappings(input[_BDM], context);
    if (((_c = input[_BDM]) == null ? void 0 : _c.length) === 0) {
      entries.BlockDeviceMappings = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMappings.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IM] != null) {
    const memberEntries = se_InstanceMonitoring(input[_IM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceMonitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SPp] != null) {
    entries[_SPp] = input[_SPp];
  }
  if (input[_IIP] != null) {
    entries[_IIP] = input[_IIP];
  }
  if (input[_EO] != null) {
    entries[_EO] = input[_EO];
  }
  if (input[_APIA] != null) {
    entries[_APIA] = input[_APIA];
  }
  if (input[_PT] != null) {
    entries[_PT] = input[_PT];
  }
  if (input[_MO] != null) {
    const memberEntries = se_InstanceMetadataOptions(input[_MO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MetadataOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateLaunchConfigurationType");
var se_CreateOrUpdateTagsType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_T] != null) {
    const memberEntries = se_Tags(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateOrUpdateTagsType");
var se_CustomizedMetricSpecification = /* @__PURE__ */ __name((input, context) => {
  var _a, _b;
  const entries = {};
  if (input[_MN] != null) {
    entries[_MN] = input[_MN];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_D] != null) {
    const memberEntries = se_MetricDimensions(input[_D], context);
    if (((_a = input[_D]) == null ? void 0 : _a.length) === 0) {
      entries.Dimensions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Dimensions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_U] != null) {
    entries[_U] = input[_U];
  }
  if (input[_Me] != null) {
    const memberEntries = se_TargetTrackingMetricDataQueries(input[_Me], context);
    if (((_b = input[_Me]) == null ? void 0 : _b.length) === 0) {
      entries.Metrics = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Metrics.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CustomizedMetricSpecification");
var se_DeleteAutoScalingGroupType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_FD] != null) {
    entries[_FD] = input[_FD];
  }
  return entries;
}, "se_DeleteAutoScalingGroupType");
var se_DeleteLifecycleHookType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LHN] != null) {
    entries[_LHN] = input[_LHN];
  }
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  return entries;
}, "se_DeleteLifecycleHookType");
var se_DeleteNotificationConfigurationType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_TARN] != null) {
    entries[_TARN] = input[_TARN];
  }
  return entries;
}, "se_DeleteNotificationConfigurationType");
var se_DeletePolicyType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  return entries;
}, "se_DeletePolicyType");
var se_DeleteScheduledActionType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_SANc] != null) {
    entries[_SANc] = input[_SANc];
  }
  return entries;
}, "se_DeleteScheduledActionType");
var se_DeleteTagsType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_T] != null) {
    const memberEntries = se_Tags(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_DeleteTagsType");
var se_DeleteWarmPoolType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_FD] != null) {
    entries[_FD] = input[_FD];
  }
  return entries;
}, "se_DeleteWarmPoolType");
var se_DescribeAutoScalingInstancesType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_II] != null) {
    const memberEntries = se_InstanceIds(input[_II], context);
    if (((_a = input[_II]) == null ? void 0 : _a.length) === 0) {
      entries.InstanceIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
}, "se_DescribeAutoScalingInstancesType");
var se_DescribeInstanceRefreshesType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_IRI] != null) {
    const memberEntries = se_InstanceRefreshIds(input[_IRI], context);
    if (((_a = input[_IRI]) == null ? void 0 : _a.length) === 0) {
      entries.InstanceRefreshIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRefreshIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
}, "se_DescribeInstanceRefreshesType");
var se_DescribeLifecycleHooksType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_LHNi] != null) {
    const memberEntries = se_LifecycleHookNames(input[_LHNi], context);
    if (((_a = input[_LHNi]) == null ? void 0 : _a.length) === 0) {
      entries.LifecycleHookNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LifecycleHookNames.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_DescribeLifecycleHooksType");
var se_DescribeLoadBalancersRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
}, "se_DescribeLoadBalancersRequest");
var se_DescribeLoadBalancerTargetGroupsRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
}, "se_DescribeLoadBalancerTargetGroupsRequest");
var se_DescribeNotificationConfigurationsType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGNu] != null) {
    const memberEntries = se_AutoScalingGroupNames(input[_ASGNu], context);
    if (((_a = input[_ASGNu]) == null ? void 0 : _a.length) === 0) {
      entries.AutoScalingGroupNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AutoScalingGroupNames.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
}, "se_DescribeNotificationConfigurationsType");
var se_DescribePoliciesType = /* @__PURE__ */ __name((input, context) => {
  var _a, _b;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_PNo] != null) {
    const memberEntries = se_PolicyNames(input[_PNo], context);
    if (((_a = input[_PNo]) == null ? void 0 : _a.length) === 0) {
      entries.PolicyNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PolicyNames.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PTo] != null) {
    const memberEntries = se_PolicyTypes(input[_PTo], context);
    if (((_b = input[_PTo]) == null ? void 0 : _b.length) === 0) {
      entries.PolicyTypes = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PolicyTypes.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
}, "se_DescribePoliciesType");
var se_DescribeScalingActivitiesType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_AIc] != null) {
    const memberEntries = se_ActivityIds(input[_AIc], context);
    if (((_a = input[_AIc]) == null ? void 0 : _a.length) === 0) {
      entries.ActivityIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ActivityIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_IDG] != null) {
    entries[_IDG] = input[_IDG];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
}, "se_DescribeScalingActivitiesType");
var se_DescribeScheduledActionsType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_SAN] != null) {
    const memberEntries = se_ScheduledActionNames(input[_SAN], context);
    if (((_a = input[_SAN]) == null ? void 0 : _a.length) === 0) {
      entries.ScheduledActionNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ScheduledActionNames.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ST] != null) {
    entries[_ST] = (0, import_smithy_client.serializeDateTime)(input[_ST]);
  }
  if (input[_ET] != null) {
    entries[_ET] = (0, import_smithy_client.serializeDateTime)(input[_ET]);
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
}, "se_DescribeScheduledActionsType");
var se_DescribeTagsType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_F] != null) {
    const memberEntries = se_Filters(input[_F], context);
    if (((_a = input[_F]) == null ? void 0 : _a.length) === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
}, "se_DescribeTagsType");
var se_DescribeTrafficSourcesRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_TST] != null) {
    entries[_TST] = input[_TST];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
}, "se_DescribeTrafficSourcesRequest");
var se_DescribeWarmPoolType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
}, "se_DescribeWarmPoolType");
var se_DesiredConfiguration = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LT] != null) {
    const memberEntries = se_LaunchTemplateSpecification(input[_LT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplate.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MIP] != null) {
    const memberEntries = se_MixedInstancesPolicy(input[_MIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MixedInstancesPolicy.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_DesiredConfiguration");
var se_DetachInstancesQuery = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_II] != null) {
    const memberEntries = se_InstanceIds(input[_II], context);
    if (((_a = input[_II]) == null ? void 0 : _a.length) === 0) {
      entries.InstanceIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_SDDC] != null) {
    entries[_SDDC] = input[_SDDC];
  }
  return entries;
}, "se_DetachInstancesQuery");
var se_DetachLoadBalancersType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_LBN] != null) {
    const memberEntries = se_LoadBalancerNames(input[_LBN], context);
    if (((_a = input[_LBN]) == null ? void 0 : _a.length) === 0) {
      entries.LoadBalancerNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadBalancerNames.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_DetachLoadBalancersType");
var se_DetachLoadBalancerTargetGroupsType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_TGARN] != null) {
    const memberEntries = se_TargetGroupARNs(input[_TGARN], context);
    if (((_a = input[_TGARN]) == null ? void 0 : _a.length) === 0) {
      entries.TargetGroupARNs = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetGroupARNs.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_DetachLoadBalancerTargetGroupsType");
var se_DetachTrafficSourcesType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TrafficSources(input[_TS], context);
    if (((_a = input[_TS]) == null ? void 0 : _a.length) === 0) {
      entries.TrafficSources = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficSources.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_DetachTrafficSourcesType");
var se_DisableMetricsCollectionQuery = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_Me] != null) {
    const memberEntries = se_Metrics(input[_Me], context);
    if (((_a = input[_Me]) == null ? void 0 : _a.length) === 0) {
      entries.Metrics = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Metrics.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_DisableMetricsCollectionQuery");
var se_Ebs = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SI] != null) {
    entries[_SI] = input[_SI];
  }
  if (input[_VS] != null) {
    entries[_VS] = input[_VS];
  }
  if (input[_VT] != null) {
    entries[_VT] = input[_VT];
  }
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  if (input[_I] != null) {
    entries[_I] = input[_I];
  }
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  if (input[_Th] != null) {
    entries[_Th] = input[_Th];
  }
  return entries;
}, "se_Ebs");
var se_EnableMetricsCollectionQuery = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_Me] != null) {
    const memberEntries = se_Metrics(input[_Me], context);
    if (((_a = input[_Me]) == null ? void 0 : _a.length) === 0) {
      entries.Metrics = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Metrics.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_G] != null) {
    entries[_G] = input[_G];
  }
  return entries;
}, "se_EnableMetricsCollectionQuery");
var se_EnterStandbyQuery = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_II] != null) {
    const memberEntries = se_InstanceIds(input[_II], context);
    if (((_a = input[_II]) == null ? void 0 : _a.length) === 0) {
      entries.InstanceIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_SDDC] != null) {
    entries[_SDDC] = input[_SDDC];
  }
  return entries;
}, "se_EnterStandbyQuery");
var se_ExcludedInstanceTypes = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_ExcludedInstanceTypes");
var se_ExecutePolicyType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  if (input[_HC] != null) {
    entries[_HC] = input[_HC];
  }
  if (input[_MV] != null) {
    entries[_MV] = (0, import_smithy_client.serializeFloat)(input[_MV]);
  }
  if (input[_BT] != null) {
    entries[_BT] = (0, import_smithy_client.serializeFloat)(input[_BT]);
  }
  return entries;
}, "se_ExecutePolicyType");
var se_ExitStandbyQuery = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_II] != null) {
    const memberEntries = se_InstanceIds(input[_II], context);
    if (((_a = input[_II]) == null ? void 0 : _a.length) === 0) {
      entries.InstanceIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  return entries;
}, "se_ExitStandbyQuery");
var se_Filter = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_Na] != null) {
    entries[_Na] = input[_Na];
  }
  if (input[_Va] != null) {
    const memberEntries = se_Values(input[_Va], context);
    if (((_a = input[_Va]) == null ? void 0 : _a.length) === 0) {
      entries.Values = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Values.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_Filter");
var se_Filters = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Filter(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_Filters");
var se_GetPredictiveScalingForecastType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  if (input[_ST] != null) {
    entries[_ST] = (0, import_smithy_client.serializeDateTime)(input[_ST]);
  }
  if (input[_ET] != null) {
    entries[_ET] = (0, import_smithy_client.serializeDateTime)(input[_ET]);
  }
  return entries;
}, "se_GetPredictiveScalingForecastType");
var se_InstanceGenerations = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_InstanceGenerations");
var se_InstanceIds = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_InstanceIds");
var se_InstanceMaintenancePolicy = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_MHP] != null) {
    entries[_MHP] = input[_MHP];
  }
  if (input[_MHPa] != null) {
    entries[_MHPa] = input[_MHPa];
  }
  return entries;
}, "se_InstanceMaintenancePolicy");
var se_InstanceMetadataOptions = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_HT] != null) {
    entries[_HT] = input[_HT];
  }
  if (input[_HPRHL] != null) {
    entries[_HPRHL] = input[_HPRHL];
  }
  if (input[_HE] != null) {
    entries[_HE] = input[_HE];
  }
  return entries;
}, "se_InstanceMetadataOptions");
var se_InstanceMonitoring = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_Ena] != null) {
    entries[_Ena] = input[_Ena];
  }
  return entries;
}, "se_InstanceMonitoring");
var se_InstanceRefreshIds = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_InstanceRefreshIds");
var se_InstanceRequirements = /* @__PURE__ */ __name((input, context) => {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const entries = {};
  if (input[_VCC] != null) {
    const memberEntries = se_VCpuCountRequest(input[_VCC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VCpuCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MMB] != null) {
    const memberEntries = se_MemoryMiBRequest(input[_MMB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MemoryMiB.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CM] != null) {
    const memberEntries = se_CpuManufacturers(input[_CM], context);
    if (((_a = input[_CM]) == null ? void 0 : _a.length) === 0) {
      entries.CpuManufacturers = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CpuManufacturers.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MGBPVC] != null) {
    const memberEntries = se_MemoryGiBPerVCpuRequest(input[_MGBPVC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MemoryGiBPerVCpu.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EIT] != null) {
    const memberEntries = se_ExcludedInstanceTypes(input[_EIT], context);
    if (((_b = input[_EIT]) == null ? void 0 : _b.length) === 0) {
      entries.ExcludedInstanceTypes = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExcludedInstanceTypes.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IG] != null) {
    const memberEntries = se_InstanceGenerations(input[_IG], context);
    if (((_c = input[_IG]) == null ? void 0 : _c.length) === 0) {
      entries.InstanceGenerations = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceGenerations.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SMPPOLP] != null) {
    entries[_SMPPOLP] = input[_SMPPOLP];
  }
  if (input[_MSPAPOOODP] != null) {
    entries[_MSPAPOOODP] = input[_MSPAPOOODP];
  }
  if (input[_ODMPPOLP] != null) {
    entries[_ODMPPOLP] = input[_ODMPPOLP];
  }
  if (input[_BM] != null) {
    entries[_BM] = input[_BM];
  }
  if (input[_BP] != null) {
    entries[_BP] = input[_BP];
  }
  if (input[_RHS] != null) {
    entries[_RHS] = input[_RHS];
  }
  if (input[_NIC] != null) {
    const memberEntries = se_NetworkInterfaceCountRequest(input[_NIC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LS] != null) {
    entries[_LS] = input[_LS];
  }
  if (input[_LST] != null) {
    const memberEntries = se_LocalStorageTypes(input[_LST], context);
    if (((_d = input[_LST]) == null ? void 0 : _d.length) === 0) {
      entries.LocalStorageTypes = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalStorageTypes.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TLSGB] != null) {
    const memberEntries = se_TotalLocalStorageGBRequest(input[_TLSGB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TotalLocalStorageGB.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_BEBM] != null) {
    const memberEntries = se_BaselineEbsBandwidthMbpsRequest(input[_BEBM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BaselineEbsBandwidthMbps.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AT] != null) {
    const memberEntries = se_AcceleratorTypes(input[_AT], context);
    if (((_e = input[_AT]) == null ? void 0 : _e.length) === 0) {
      entries.AcceleratorTypes = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorTypes.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AC] != null) {
    const memberEntries = se_AcceleratorCountRequest(input[_AC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AM] != null) {
    const memberEntries = se_AcceleratorManufacturers(input[_AM], context);
    if (((_f = input[_AM]) == null ? void 0 : _f.length) === 0) {
      entries.AcceleratorManufacturers = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorManufacturers.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AN] != null) {
    const memberEntries = se_AcceleratorNames(input[_AN], context);
    if (((_g = input[_AN]) == null ? void 0 : _g.length) === 0) {
      entries.AcceleratorNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorNames.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ATMMB] != null) {
    const memberEntries = se_AcceleratorTotalMemoryMiBRequest(input[_ATMMB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorTotalMemoryMiB.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NBG] != null) {
    const memberEntries = se_NetworkBandwidthGbpsRequest(input[_NBG], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkBandwidthGbps.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AIT] != null) {
    const memberEntries = se_AllowedInstanceTypes(input[_AIT], context);
    if (((_h = input[_AIT]) == null ? void 0 : _h.length) === 0) {
      entries.AllowedInstanceTypes = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllowedInstanceTypes.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_InstanceRequirements");
var se_InstanceReusePolicy = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ROSI] != null) {
    entries[_ROSI] = input[_ROSI];
  }
  return entries;
}, "se_InstanceReusePolicy");
var se_InstancesDistribution = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ODAS] != null) {
    entries[_ODAS] = input[_ODAS];
  }
  if (input[_ODBC] != null) {
    entries[_ODBC] = input[_ODBC];
  }
  if (input[_ODPABC] != null) {
    entries[_ODPABC] = input[_ODPABC];
  }
  if (input[_SAS] != null) {
    entries[_SAS] = input[_SAS];
  }
  if (input[_SIPp] != null) {
    entries[_SIPp] = input[_SIPp];
  }
  if (input[_SMP] != null) {
    entries[_SMP] = input[_SMP];
  }
  return entries;
}, "se_InstancesDistribution");
var se_LaunchConfigurationNames = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_LaunchConfigurationNames");
var se_LaunchConfigurationNamesType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_LCNa] != null) {
    const memberEntries = se_LaunchConfigurationNames(input[_LCNa], context);
    if (((_a = input[_LCNa]) == null ? void 0 : _a.length) === 0) {
      entries.LaunchConfigurationNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchConfigurationNames.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
}, "se_LaunchConfigurationNamesType");
var se_LaunchConfigurationNameType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LCN] != null) {
    entries[_LCN] = input[_LCN];
  }
  return entries;
}, "se_LaunchConfigurationNameType");
var se_LaunchTemplate = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_LTS] != null) {
    const memberEntries = se_LaunchTemplateSpecification(input[_LTS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_O] != null) {
    const memberEntries = se_Overrides(input[_O], context);
    if (((_a = input[_O]) == null ? void 0 : _a.length) === 0) {
      entries.Overrides = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Overrides.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_LaunchTemplate");
var se_LaunchTemplateOverrides = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_WC] != null) {
    entries[_WC] = input[_WC];
  }
  if (input[_LTS] != null) {
    const memberEntries = se_LaunchTemplateSpecification(input[_LTS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IR] != null) {
    const memberEntries = se_InstanceRequirements(input[_IR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_LaunchTemplateOverrides");
var se_LaunchTemplateSpecification = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_V] != null) {
    entries[_V] = input[_V];
  }
  return entries;
}, "se_LaunchTemplateSpecification");
var se_LifecycleHookNames = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_LifecycleHookNames");
var se_LifecycleHookSpecification = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LHN] != null) {
    entries[_LHN] = input[_LHN];
  }
  if (input[_LTi] != null) {
    entries[_LTi] = input[_LTi];
  }
  if (input[_NM] != null) {
    entries[_NM] = input[_NM];
  }
  if (input[_HTe] != null) {
    entries[_HTe] = input[_HTe];
  }
  if (input[_DR] != null) {
    entries[_DR] = input[_DR];
  }
  if (input[_NTARN] != null) {
    entries[_NTARN] = input[_NTARN];
  }
  if (input[_RARN] != null) {
    entries[_RARN] = input[_RARN];
  }
  return entries;
}, "se_LifecycleHookSpecification");
var se_LifecycleHookSpecifications = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LifecycleHookSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_LifecycleHookSpecifications");
var se_LoadBalancerNames = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_LoadBalancerNames");
var se_LocalStorageTypes = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_LocalStorageTypes");
var se_MemoryGiBPerVCpuRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = (0, import_smithy_client.serializeFloat)(input[_M]);
  }
  if (input[_Ma] != null) {
    entries[_Ma] = (0, import_smithy_client.serializeFloat)(input[_Ma]);
  }
  return entries;
}, "se_MemoryGiBPerVCpuRequest");
var se_MemoryMiBRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_MemoryMiBRequest");
var se_Metric = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_MN] != null) {
    entries[_MN] = input[_MN];
  }
  if (input[_D] != null) {
    const memberEntries = se_MetricDimensions(input[_D], context);
    if (((_a = input[_D]) == null ? void 0 : _a.length) === 0) {
      entries.Dimensions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Dimensions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_Metric");
var se_MetricDataQueries = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_MetricDataQuery(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_MetricDataQueries");
var se_MetricDataQuery = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_Id] != null) {
    entries[_Id] = input[_Id];
  }
  if (input[_Ex] != null) {
    entries[_Ex] = input[_Ex];
  }
  if (input[_MSe] != null) {
    const memberEntries = se_MetricStat(input[_MSe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MetricStat.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_L] != null) {
    entries[_L] = input[_L];
  }
  if (input[_RD] != null) {
    entries[_RD] = input[_RD];
  }
  return entries;
}, "se_MetricDataQuery");
var se_MetricDimension = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_Na] != null) {
    entries[_Na] = input[_Na];
  }
  if (input[_Val] != null) {
    entries[_Val] = input[_Val];
  }
  return entries;
}, "se_MetricDimension");
var se_MetricDimensions = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_MetricDimension(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_MetricDimensions");
var se_Metrics = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_Metrics");
var se_MetricStat = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_Met] != null) {
    const memberEntries = se_Metric(input[_Met], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Metric.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_St] != null) {
    entries[_St] = input[_St];
  }
  if (input[_U] != null) {
    entries[_U] = input[_U];
  }
  return entries;
}, "se_MetricStat");
var se_MixedInstancesPolicy = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LT] != null) {
    const memberEntries = se_LaunchTemplate(input[_LT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplate.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ID] != null) {
    const memberEntries = se_InstancesDistribution(input[_ID], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstancesDistribution.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_MixedInstancesPolicy");
var se_NetworkBandwidthGbpsRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = (0, import_smithy_client.serializeFloat)(input[_M]);
  }
  if (input[_Ma] != null) {
    entries[_Ma] = (0, import_smithy_client.serializeFloat)(input[_Ma]);
  }
  return entries;
}, "se_NetworkBandwidthGbpsRequest");
var se_NetworkInterfaceCountRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_NetworkInterfaceCountRequest");
var se_Overrides = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateOverrides(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_Overrides");
var se_PolicyNames = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_PolicyNames");
var se_PolicyTypes = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_PolicyTypes");
var se_PredefinedMetricSpecification = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_PMT] != null) {
    entries[_PMT] = input[_PMT];
  }
  if (input[_RL] != null) {
    entries[_RL] = input[_RL];
  }
  return entries;
}, "se_PredefinedMetricSpecification");
var se_PredictiveScalingConfiguration = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_MSet] != null) {
    const memberEntries = se_PredictiveScalingMetricSpecifications(input[_MSet], context);
    if (((_a = input[_MSet]) == null ? void 0 : _a.length) === 0) {
      entries.MetricSpecifications = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MetricSpecifications.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Mo] != null) {
    entries[_Mo] = input[_Mo];
  }
  if (input[_SBT] != null) {
    entries[_SBT] = input[_SBT];
  }
  if (input[_MCBB] != null) {
    entries[_MCBB] = input[_MCBB];
  }
  if (input[_MCB] != null) {
    entries[_MCB] = input[_MCB];
  }
  return entries;
}, "se_PredictiveScalingConfiguration");
var se_PredictiveScalingCustomizedCapacityMetric = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_MDQ] != null) {
    const memberEntries = se_MetricDataQueries(input[_MDQ], context);
    if (((_a = input[_MDQ]) == null ? void 0 : _a.length) === 0) {
      entries.MetricDataQueries = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MetricDataQueries.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_PredictiveScalingCustomizedCapacityMetric");
var se_PredictiveScalingCustomizedLoadMetric = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_MDQ] != null) {
    const memberEntries = se_MetricDataQueries(input[_MDQ], context);
    if (((_a = input[_MDQ]) == null ? void 0 : _a.length) === 0) {
      entries.MetricDataQueries = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MetricDataQueries.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_PredictiveScalingCustomizedLoadMetric");
var se_PredictiveScalingCustomizedScalingMetric = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_MDQ] != null) {
    const memberEntries = se_MetricDataQueries(input[_MDQ], context);
    if (((_a = input[_MDQ]) == null ? void 0 : _a.length) === 0) {
      entries.MetricDataQueries = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MetricDataQueries.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_PredictiveScalingCustomizedScalingMetric");
var se_PredictiveScalingMetricSpecification = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_TV] != null) {
    entries[_TV] = (0, import_smithy_client.serializeFloat)(input[_TV]);
  }
  if (input[_PMPS] != null) {
    const memberEntries = se_PredictiveScalingPredefinedMetricPair(input[_PMPS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PredefinedMetricPairSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PSMS] != null) {
    const memberEntries = se_PredictiveScalingPredefinedScalingMetric(input[_PSMS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PredefinedScalingMetricSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PLMS] != null) {
    const memberEntries = se_PredictiveScalingPredefinedLoadMetric(input[_PLMS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PredefinedLoadMetricSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CSMS] != null) {
    const memberEntries = se_PredictiveScalingCustomizedScalingMetric(input[_CSMS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CustomizedScalingMetricSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CLMS] != null) {
    const memberEntries = se_PredictiveScalingCustomizedLoadMetric(input[_CLMS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CustomizedLoadMetricSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CCMS] != null) {
    const memberEntries = se_PredictiveScalingCustomizedCapacityMetric(input[_CCMS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CustomizedCapacityMetricSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_PredictiveScalingMetricSpecification");
var se_PredictiveScalingMetricSpecifications = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PredictiveScalingMetricSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_PredictiveScalingMetricSpecifications");
var se_PredictiveScalingPredefinedLoadMetric = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_PMT] != null) {
    entries[_PMT] = input[_PMT];
  }
  if (input[_RL] != null) {
    entries[_RL] = input[_RL];
  }
  return entries;
}, "se_PredictiveScalingPredefinedLoadMetric");
var se_PredictiveScalingPredefinedMetricPair = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_PMT] != null) {
    entries[_PMT] = input[_PMT];
  }
  if (input[_RL] != null) {
    entries[_RL] = input[_RL];
  }
  return entries;
}, "se_PredictiveScalingPredefinedMetricPair");
var se_PredictiveScalingPredefinedScalingMetric = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_PMT] != null) {
    entries[_PMT] = input[_PMT];
  }
  if (input[_RL] != null) {
    entries[_RL] = input[_RL];
  }
  return entries;
}, "se_PredictiveScalingPredefinedScalingMetric");
var se_ProcessNames = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_ProcessNames");
var se_PutLifecycleHookType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LHN] != null) {
    entries[_LHN] = input[_LHN];
  }
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_LTi] != null) {
    entries[_LTi] = input[_LTi];
  }
  if (input[_RARN] != null) {
    entries[_RARN] = input[_RARN];
  }
  if (input[_NTARN] != null) {
    entries[_NTARN] = input[_NTARN];
  }
  if (input[_NM] != null) {
    entries[_NM] = input[_NM];
  }
  if (input[_HTe] != null) {
    entries[_HTe] = input[_HTe];
  }
  if (input[_DR] != null) {
    entries[_DR] = input[_DR];
  }
  return entries;
}, "se_PutLifecycleHookType");
var se_PutNotificationConfigurationType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_TARN] != null) {
    entries[_TARN] = input[_TARN];
  }
  if (input[_NTo] != null) {
    const memberEntries = se_AutoScalingNotificationTypes(input[_NTo], context);
    if (((_a = input[_NTo]) == null ? void 0 : _a.length) === 0) {
      entries.NotificationTypes = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NotificationTypes.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_PutNotificationConfigurationType");
var se_PutScalingPolicyType = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  if (input[_PTol] != null) {
    entries[_PTol] = input[_PTol];
  }
  if (input[_ATd] != null) {
    entries[_ATd] = input[_ATd];
  }
  if (input[_MAS] != null) {
    entries[_MAS] = input[_MAS];
  }
  if (input[_MAM] != null) {
    entries[_MAM] = input[_MAM];
  }
  if (input[_SA] != null) {
    entries[_SA] = input[_SA];
  }
  if (input[_Co] != null) {
    entries[_Co] = input[_Co];
  }
  if (input[_MAT] != null) {
    entries[_MAT] = input[_MAT];
  }
  if (input[_SAt] != null) {
    const memberEntries = se_StepAdjustments(input[_SAt], context);
    if (((_a = input[_SAt]) == null ? void 0 : _a.length) === 0) {
      entries.StepAdjustments = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `StepAdjustments.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EIW] != null) {
    entries[_EIW] = input[_EIW];
  }
  if (input[_TTC] != null) {
    const memberEntries = se_TargetTrackingConfiguration(input[_TTC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetTrackingConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ena] != null) {
    entries[_Ena] = input[_Ena];
  }
  if (input[_PSC] != null) {
    const memberEntries = se_PredictiveScalingConfiguration(input[_PSC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PredictiveScalingConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_PutScalingPolicyType");
var se_PutScheduledUpdateGroupActionType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_SANc] != null) {
    entries[_SANc] = input[_SANc];
  }
  if (input[_Ti] != null) {
    entries[_Ti] = (0, import_smithy_client.serializeDateTime)(input[_Ti]);
  }
  if (input[_ST] != null) {
    entries[_ST] = (0, import_smithy_client.serializeDateTime)(input[_ST]);
  }
  if (input[_ET] != null) {
    entries[_ET] = (0, import_smithy_client.serializeDateTime)(input[_ET]);
  }
  if (input[_R] != null) {
    entries[_R] = input[_R];
  }
  if (input[_MS] != null) {
    entries[_MS] = input[_MS];
  }
  if (input[_MSa] != null) {
    entries[_MSa] = input[_MSa];
  }
  if (input[_DC] != null) {
    entries[_DC] = input[_DC];
  }
  if (input[_TZ] != null) {
    entries[_TZ] = input[_TZ];
  }
  return entries;
}, "se_PutScheduledUpdateGroupActionType");
var se_PutWarmPoolType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_MGPC] != null) {
    entries[_MGPC] = input[_MGPC];
  }
  if (input[_MS] != null) {
    entries[_MS] = input[_MS];
  }
  if (input[_PS] != null) {
    entries[_PS] = input[_PS];
  }
  if (input[_IRP] != null) {
    const memberEntries = se_InstanceReusePolicy(input[_IRP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceReusePolicy.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_PutWarmPoolType");
var se_RecordLifecycleActionHeartbeatType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LHN] != null) {
    entries[_LHN] = input[_LHN];
  }
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_LAT] != null) {
    entries[_LAT] = input[_LAT];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  return entries;
}, "se_RecordLifecycleActionHeartbeatType");
var se_RefreshPreferences = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_MHP] != null) {
    entries[_MHP] = input[_MHP];
  }
  if (input[_IW] != null) {
    entries[_IW] = input[_IW];
  }
  if (input[_CP] != null) {
    const memberEntries = se_CheckpointPercentages(input[_CP], context);
    if (((_a = input[_CP]) == null ? void 0 : _a.length) === 0) {
      entries.CheckpointPercentages = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CheckpointPercentages.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CD] != null) {
    entries[_CD] = input[_CD];
  }
  if (input[_SM] != null) {
    entries[_SM] = input[_SM];
  }
  if (input[_AR] != null) {
    entries[_AR] = input[_AR];
  }
  if (input[_SIPI] != null) {
    entries[_SIPI] = input[_SIPI];
  }
  if (input[_SIt] != null) {
    entries[_SIt] = input[_SIt];
  }
  if (input[_AS] != null) {
    const memberEntries = se_AlarmSpecification(input[_AS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AlarmSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MHPa] != null) {
    entries[_MHPa] = input[_MHPa];
  }
  return entries;
}, "se_RefreshPreferences");
var se_RollbackInstanceRefreshType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  return entries;
}, "se_RollbackInstanceRefreshType");
var se_ScalingProcessQuery = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_SPc] != null) {
    const memberEntries = se_ProcessNames(input[_SPc], context);
    if (((_a = input[_SPc]) == null ? void 0 : _a.length) === 0) {
      entries.ScalingProcesses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ScalingProcesses.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ScalingProcessQuery");
var se_ScheduledActionNames = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_ScheduledActionNames");
var se_ScheduledUpdateGroupActionRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SANc] != null) {
    entries[_SANc] = input[_SANc];
  }
  if (input[_ST] != null) {
    entries[_ST] = (0, import_smithy_client.serializeDateTime)(input[_ST]);
  }
  if (input[_ET] != null) {
    entries[_ET] = (0, import_smithy_client.serializeDateTime)(input[_ET]);
  }
  if (input[_R] != null) {
    entries[_R] = input[_R];
  }
  if (input[_MS] != null) {
    entries[_MS] = input[_MS];
  }
  if (input[_MSa] != null) {
    entries[_MSa] = input[_MSa];
  }
  if (input[_DC] != null) {
    entries[_DC] = input[_DC];
  }
  if (input[_TZ] != null) {
    entries[_TZ] = input[_TZ];
  }
  return entries;
}, "se_ScheduledUpdateGroupActionRequest");
var se_ScheduledUpdateGroupActionRequests = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ScheduledUpdateGroupActionRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_ScheduledUpdateGroupActionRequests");
var se_SecurityGroups = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_SecurityGroups");
var se_SetDesiredCapacityType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_DC] != null) {
    entries[_DC] = input[_DC];
  }
  if (input[_HC] != null) {
    entries[_HC] = input[_HC];
  }
  return entries;
}, "se_SetDesiredCapacityType");
var se_SetInstanceHealthQuery = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_HS] != null) {
    entries[_HS] = input[_HS];
  }
  if (input[_SRGP] != null) {
    entries[_SRGP] = input[_SRGP];
  }
  return entries;
}, "se_SetInstanceHealthQuery");
var se_SetInstanceProtectionQuery = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_II] != null) {
    const memberEntries = se_InstanceIds(input[_II], context);
    if (((_a = input[_II]) == null ? void 0 : _a.length) === 0) {
      entries.InstanceIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_PFSI] != null) {
    entries[_PFSI] = input[_PFSI];
  }
  return entries;
}, "se_SetInstanceProtectionQuery");
var se_StartInstanceRefreshType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_Str] != null) {
    entries[_Str] = input[_Str];
  }
  if (input[_DCes] != null) {
    const memberEntries = se_DesiredConfiguration(input[_DCes], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DesiredConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_P] != null) {
    const memberEntries = se_RefreshPreferences(input[_P], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Preferences.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_StartInstanceRefreshType");
var se_StepAdjustment = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_MILB] != null) {
    entries[_MILB] = (0, import_smithy_client.serializeFloat)(input[_MILB]);
  }
  if (input[_MIUB] != null) {
    entries[_MIUB] = (0, import_smithy_client.serializeFloat)(input[_MIUB]);
  }
  if (input[_SA] != null) {
    entries[_SA] = input[_SA];
  }
  return entries;
}, "se_StepAdjustment");
var se_StepAdjustments = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_StepAdjustment(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_StepAdjustments");
var se_Tag = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RIe] != null) {
    entries[_RIe] = input[_RIe];
  }
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_K] != null) {
    entries[_K] = input[_K];
  }
  if (input[_Val] != null) {
    entries[_Val] = input[_Val];
  }
  if (input[_PAL] != null) {
    entries[_PAL] = input[_PAL];
  }
  return entries;
}, "se_Tag");
var se_Tags = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Tag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_Tags");
var se_TargetGroupARNs = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_TargetGroupARNs");
var se_TargetTrackingConfiguration = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_PMS] != null) {
    const memberEntries = se_PredefinedMetricSpecification(input[_PMS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PredefinedMetricSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CMS] != null) {
    const memberEntries = se_CustomizedMetricSpecification(input[_CMS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CustomizedMetricSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TV] != null) {
    entries[_TV] = (0, import_smithy_client.serializeFloat)(input[_TV]);
  }
  if (input[_DSI] != null) {
    entries[_DSI] = input[_DSI];
  }
  return entries;
}, "se_TargetTrackingConfiguration");
var se_TargetTrackingMetricDataQueries = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_TargetTrackingMetricDataQuery(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_TargetTrackingMetricDataQueries");
var se_TargetTrackingMetricDataQuery = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_Id] != null) {
    entries[_Id] = input[_Id];
  }
  if (input[_Ex] != null) {
    entries[_Ex] = input[_Ex];
  }
  if (input[_MSe] != null) {
    const memberEntries = se_TargetTrackingMetricStat(input[_MSe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MetricStat.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_L] != null) {
    entries[_L] = input[_L];
  }
  if (input[_RD] != null) {
    entries[_RD] = input[_RD];
  }
  return entries;
}, "se_TargetTrackingMetricDataQuery");
var se_TargetTrackingMetricStat = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_Met] != null) {
    const memberEntries = se_Metric(input[_Met], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Metric.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_St] != null) {
    entries[_St] = input[_St];
  }
  if (input[_U] != null) {
    entries[_U] = input[_U];
  }
  return entries;
}, "se_TargetTrackingMetricStat");
var se_TerminateInstanceInAutoScalingGroupType = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_SDDC] != null) {
    entries[_SDDC] = input[_SDDC];
  }
  return entries;
}, "se_TerminateInstanceInAutoScalingGroupType");
var se_TerminationPolicies = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_TerminationPolicies");
var se_TotalLocalStorageGBRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = (0, import_smithy_client.serializeFloat)(input[_M]);
  }
  if (input[_Ma] != null) {
    entries[_Ma] = (0, import_smithy_client.serializeFloat)(input[_Ma]);
  }
  return entries;
}, "se_TotalLocalStorageGBRequest");
var se_TrafficSourceIdentifier = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_Ide] != null) {
    entries[_Ide] = input[_Ide];
  }
  if (input[_Ty] != null) {
    entries[_Ty] = input[_Ty];
  }
  return entries;
}, "se_TrafficSourceIdentifier");
var se_TrafficSources = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_TrafficSourceIdentifier(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_TrafficSources");
var se_UpdateAutoScalingGroupType = /* @__PURE__ */ __name((input, context) => {
  var _a, _b;
  const entries = {};
  if (input[_ASGN] != null) {
    entries[_ASGN] = input[_ASGN];
  }
  if (input[_LCN] != null) {
    entries[_LCN] = input[_LCN];
  }
  if (input[_LT] != null) {
    const memberEntries = se_LaunchTemplateSpecification(input[_LT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplate.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MIP] != null) {
    const memberEntries = se_MixedInstancesPolicy(input[_MIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MixedInstancesPolicy.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MS] != null) {
    entries[_MS] = input[_MS];
  }
  if (input[_MSa] != null) {
    entries[_MSa] = input[_MSa];
  }
  if (input[_DC] != null) {
    entries[_DC] = input[_DC];
  }
  if (input[_DCe] != null) {
    entries[_DCe] = input[_DCe];
  }
  if (input[_AZ] != null) {
    const memberEntries = se_AvailabilityZones(input[_AZ], context);
    if (((_a = input[_AZ]) == null ? void 0 : _a.length) === 0) {
      entries.AvailabilityZones = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AvailabilityZones.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_HCT] != null) {
    entries[_HCT] = input[_HCT];
  }
  if (input[_HCGP] != null) {
    entries[_HCGP] = input[_HCGP];
  }
  if (input[_PG] != null) {
    entries[_PG] = input[_PG];
  }
  if (input[_VPCZI] != null) {
    entries[_VPCZI] = input[_VPCZI];
  }
  if (input[_TP] != null) {
    const memberEntries = se_TerminationPolicies(input[_TP], context);
    if (((_b = input[_TP]) == null ? void 0 : _b.length) === 0) {
      entries.TerminationPolicies = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TerminationPolicies.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NIPFSI] != null) {
    entries[_NIPFSI] = input[_NIPFSI];
  }
  if (input[_SLRARN] != null) {
    entries[_SLRARN] = input[_SLRARN];
  }
  if (input[_MIL] != null) {
    entries[_MIL] = input[_MIL];
  }
  if (input[_CR] != null) {
    entries[_CR] = input[_CR];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_DCT] != null) {
    entries[_DCT] = input[_DCT];
  }
  if (input[_DIW] != null) {
    entries[_DIW] = input[_DIW];
  }
  if (input[_IMP] != null) {
    const memberEntries = se_InstanceMaintenancePolicy(input[_IMP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceMaintenancePolicy.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_UpdateAutoScalingGroupType");
var se_Values = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_Values");
var se_VCpuCountRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_VCpuCountRequest");
var de_AcceleratorCountRequest = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.strictParseInt32)(output[_M]);
  }
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.strictParseInt32)(output[_Ma]);
  }
  return contents;
}, "de_AcceleratorCountRequest");
var de_AcceleratorManufacturers = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_AcceleratorManufacturers");
var de_AcceleratorNames = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_AcceleratorNames");
var de_AcceleratorTotalMemoryMiBRequest = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.strictParseInt32)(output[_M]);
  }
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.strictParseInt32)(output[_Ma]);
  }
  return contents;
}, "de_AcceleratorTotalMemoryMiBRequest");
var de_AcceleratorTypes = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_AcceleratorTypes");
var de_ActiveInstanceRefreshNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_ActiveInstanceRefreshNotFoundFault");
var de_Activities = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Activity(entry, context);
  });
}, "de_Activities");
var de_ActivitiesType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Activities === "") {
    contents[_Ac] = [];
  } else if (output[_Ac] != null && output[_Ac][_me] != null) {
    contents[_Ac] = de_Activities((0, import_smithy_client.getArrayIfSingleItem)(output[_Ac][_me]), context);
  }
  if (output[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(output[_NT]);
  }
  return contents;
}, "de_ActivitiesType");
var de_Activity = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_AIct] != null) {
    contents[_AIct] = (0, import_smithy_client.expectString)(output[_AIct]);
  }
  if (output[_ASGN] != null) {
    contents[_ASGN] = (0, import_smithy_client.expectString)(output[_ASGN]);
  }
  if (output[_De] != null) {
    contents[_De] = (0, import_smithy_client.expectString)(output[_De]);
  }
  if (output[_Ca] != null) {
    contents[_Ca] = (0, import_smithy_client.expectString)(output[_Ca]);
  }
  if (output[_ST] != null) {
    contents[_ST] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_ST]));
  }
  if (output[_ET] != null) {
    contents[_ET] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_ET]));
  }
  if (output[_SC] != null) {
    contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
  }
  if (output[_SMt] != null) {
    contents[_SMt] = (0, import_smithy_client.expectString)(output[_SMt]);
  }
  if (output[_Pr] != null) {
    contents[_Pr] = (0, import_smithy_client.strictParseInt32)(output[_Pr]);
  }
  if (output[_Det] != null) {
    contents[_Det] = (0, import_smithy_client.expectString)(output[_Det]);
  }
  if (output[_ASGS] != null) {
    contents[_ASGS] = (0, import_smithy_client.expectString)(output[_ASGS]);
  }
  if (output[_ASGARN] != null) {
    contents[_ASGARN] = (0, import_smithy_client.expectString)(output[_ASGARN]);
  }
  return contents;
}, "de_Activity");
var de_ActivityType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Act] != null) {
    contents[_Act] = de_Activity(output[_Act], context);
  }
  return contents;
}, "de_ActivityType");
var de_AdjustmentType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ATd] != null) {
    contents[_ATd] = (0, import_smithy_client.expectString)(output[_ATd]);
  }
  return contents;
}, "de_AdjustmentType");
var de_AdjustmentTypes = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_AdjustmentType(entry, context);
  });
}, "de_AdjustmentTypes");
var de_Alarm = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ANl] != null) {
    contents[_ANl] = (0, import_smithy_client.expectString)(output[_ANl]);
  }
  if (output[_AARN] != null) {
    contents[_AARN] = (0, import_smithy_client.expectString)(output[_AARN]);
  }
  return contents;
}, "de_Alarm");
var de_AlarmList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_AlarmList");
var de_Alarms = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Alarm(entry, context);
  });
}, "de_Alarms");
var de_AlarmSpecification = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Alarms === "") {
    contents[_Al] = [];
  } else if (output[_Al] != null && output[_Al][_me] != null) {
    contents[_Al] = de_AlarmList((0, import_smithy_client.getArrayIfSingleItem)(output[_Al][_me]), context);
  }
  return contents;
}, "de_AlarmSpecification");
var de_AllowedInstanceTypes = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_AllowedInstanceTypes");
var de_AlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_AlreadyExistsFault");
var de_AttachLoadBalancersResultType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_AttachLoadBalancersResultType");
var de_AttachLoadBalancerTargetGroupsResultType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_AttachLoadBalancerTargetGroupsResultType");
var de_AttachTrafficSourcesResultType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_AttachTrafficSourcesResultType");
var de_AutoScalingGroup = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ASGN] != null) {
    contents[_ASGN] = (0, import_smithy_client.expectString)(output[_ASGN]);
  }
  if (output[_ASGARN] != null) {
    contents[_ASGARN] = (0, import_smithy_client.expectString)(output[_ASGARN]);
  }
  if (output[_LCN] != null) {
    contents[_LCN] = (0, import_smithy_client.expectString)(output[_LCN]);
  }
  if (output[_LT] != null) {
    contents[_LT] = de_LaunchTemplateSpecification(output[_LT], context);
  }
  if (output[_MIP] != null) {
    contents[_MIP] = de_MixedInstancesPolicy(output[_MIP], context);
  }
  if (output[_MS] != null) {
    contents[_MS] = (0, import_smithy_client.strictParseInt32)(output[_MS]);
  }
  if (output[_MSa] != null) {
    contents[_MSa] = (0, import_smithy_client.strictParseInt32)(output[_MSa]);
  }
  if (output[_DC] != null) {
    contents[_DC] = (0, import_smithy_client.strictParseInt32)(output[_DC]);
  }
  if (output[_PC] != null) {
    contents[_PC] = (0, import_smithy_client.strictParseInt32)(output[_PC]);
  }
  if (output[_DCe] != null) {
    contents[_DCe] = (0, import_smithy_client.strictParseInt32)(output[_DCe]);
  }
  if (output.AvailabilityZones === "") {
    contents[_AZ] = [];
  } else if (output[_AZ] != null && output[_AZ][_me] != null) {
    contents[_AZ] = de_AvailabilityZones((0, import_smithy_client.getArrayIfSingleItem)(output[_AZ][_me]), context);
  }
  if (output.LoadBalancerNames === "") {
    contents[_LBN] = [];
  } else if (output[_LBN] != null && output[_LBN][_me] != null) {
    contents[_LBN] = de_LoadBalancerNames((0, import_smithy_client.getArrayIfSingleItem)(output[_LBN][_me]), context);
  }
  if (output.TargetGroupARNs === "") {
    contents[_TGARN] = [];
  } else if (output[_TGARN] != null && output[_TGARN][_me] != null) {
    contents[_TGARN] = de_TargetGroupARNs((0, import_smithy_client.getArrayIfSingleItem)(output[_TGARN][_me]), context);
  }
  if (output[_HCT] != null) {
    contents[_HCT] = (0, import_smithy_client.expectString)(output[_HCT]);
  }
  if (output[_HCGP] != null) {
    contents[_HCGP] = (0, import_smithy_client.strictParseInt32)(output[_HCGP]);
  }
  if (output.Instances === "") {
    contents[_In] = [];
  } else if (output[_In] != null && output[_In][_me] != null) {
    contents[_In] = de_Instances((0, import_smithy_client.getArrayIfSingleItem)(output[_In][_me]), context);
  }
  if (output[_CT] != null) {
    contents[_CT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CT]));
  }
  if (output.SuspendedProcesses === "") {
    contents[_SPu] = [];
  } else if (output[_SPu] != null && output[_SPu][_me] != null) {
    contents[_SPu] = de_SuspendedProcesses((0, import_smithy_client.getArrayIfSingleItem)(output[_SPu][_me]), context);
  }
  if (output[_PG] != null) {
    contents[_PG] = (0, import_smithy_client.expectString)(output[_PG]);
  }
  if (output[_VPCZI] != null) {
    contents[_VPCZI] = (0, import_smithy_client.expectString)(output[_VPCZI]);
  }
  if (output.EnabledMetrics === "") {
    contents[_EM] = [];
  } else if (output[_EM] != null && output[_EM][_me] != null) {
    contents[_EM] = de_EnabledMetrics((0, import_smithy_client.getArrayIfSingleItem)(output[_EM][_me]), context);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = (0, import_smithy_client.expectString)(output[_Sta]);
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_TagDescriptionList((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
  }
  if (output.TerminationPolicies === "") {
    contents[_TP] = [];
  } else if (output[_TP] != null && output[_TP][_me] != null) {
    contents[_TP] = de_TerminationPolicies((0, import_smithy_client.getArrayIfSingleItem)(output[_TP][_me]), context);
  }
  if (output[_NIPFSI] != null) {
    contents[_NIPFSI] = (0, import_smithy_client.parseBoolean)(output[_NIPFSI]);
  }
  if (output[_SLRARN] != null) {
    contents[_SLRARN] = (0, import_smithy_client.expectString)(output[_SLRARN]);
  }
  if (output[_MIL] != null) {
    contents[_MIL] = (0, import_smithy_client.strictParseInt32)(output[_MIL]);
  }
  if (output[_CR] != null) {
    contents[_CR] = (0, import_smithy_client.parseBoolean)(output[_CR]);
  }
  if (output[_WPC] != null) {
    contents[_WPC] = de_WarmPoolConfiguration(output[_WPC], context);
  }
  if (output[_WPS] != null) {
    contents[_WPS] = (0, import_smithy_client.strictParseInt32)(output[_WPS]);
  }
  if (output[_C] != null) {
    contents[_C] = (0, import_smithy_client.expectString)(output[_C]);
  }
  if (output[_DCT] != null) {
    contents[_DCT] = (0, import_smithy_client.expectString)(output[_DCT]);
  }
  if (output[_DIW] != null) {
    contents[_DIW] = (0, import_smithy_client.strictParseInt32)(output[_DIW]);
  }
  if (output.TrafficSources === "") {
    contents[_TS] = [];
  } else if (output[_TS] != null && output[_TS][_me] != null) {
    contents[_TS] = de_TrafficSources((0, import_smithy_client.getArrayIfSingleItem)(output[_TS][_me]), context);
  }
  if (output[_IMP] != null) {
    contents[_IMP] = de_InstanceMaintenancePolicy(output[_IMP], context);
  }
  return contents;
}, "de_AutoScalingGroup");
var de_AutoScalingGroups = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_AutoScalingGroup(entry, context);
  });
}, "de_AutoScalingGroups");
var de_AutoScalingGroupsType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.AutoScalingGroups === "") {
    contents[_ASG] = [];
  } else if (output[_ASG] != null && output[_ASG][_me] != null) {
    contents[_ASG] = de_AutoScalingGroups((0, import_smithy_client.getArrayIfSingleItem)(output[_ASG][_me]), context);
  }
  if (output[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(output[_NT]);
  }
  return contents;
}, "de_AutoScalingGroupsType");
var de_AutoScalingInstanceDetails = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IIn] != null) {
    contents[_IIn] = (0, import_smithy_client.expectString)(output[_IIn]);
  }
  if (output[_IT] != null) {
    contents[_IT] = (0, import_smithy_client.expectString)(output[_IT]);
  }
  if (output[_ASGN] != null) {
    contents[_ASGN] = (0, import_smithy_client.expectString)(output[_ASGN]);
  }
  if (output[_AZv] != null) {
    contents[_AZv] = (0, import_smithy_client.expectString)(output[_AZv]);
  }
  if (output[_LSi] != null) {
    contents[_LSi] = (0, import_smithy_client.expectString)(output[_LSi]);
  }
  if (output[_HS] != null) {
    contents[_HS] = (0, import_smithy_client.expectString)(output[_HS]);
  }
  if (output[_LCN] != null) {
    contents[_LCN] = (0, import_smithy_client.expectString)(output[_LCN]);
  }
  if (output[_LT] != null) {
    contents[_LT] = de_LaunchTemplateSpecification(output[_LT], context);
  }
  if (output[_PFSI] != null) {
    contents[_PFSI] = (0, import_smithy_client.parseBoolean)(output[_PFSI]);
  }
  if (output[_WC] != null) {
    contents[_WC] = (0, import_smithy_client.expectString)(output[_WC]);
  }
  return contents;
}, "de_AutoScalingInstanceDetails");
var de_AutoScalingInstances = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_AutoScalingInstanceDetails(entry, context);
  });
}, "de_AutoScalingInstances");
var de_AutoScalingInstancesType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.AutoScalingInstances === "") {
    contents[_ASI] = [];
  } else if (output[_ASI] != null && output[_ASI][_me] != null) {
    contents[_ASI] = de_AutoScalingInstances((0, import_smithy_client.getArrayIfSingleItem)(output[_ASI][_me]), context);
  }
  if (output[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(output[_NT]);
  }
  return contents;
}, "de_AutoScalingInstancesType");
var de_AutoScalingNotificationTypes = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_AutoScalingNotificationTypes");
var de_AvailabilityZones = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_AvailabilityZones");
var de_BaselineEbsBandwidthMbpsRequest = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.strictParseInt32)(output[_M]);
  }
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.strictParseInt32)(output[_Ma]);
  }
  return contents;
}, "de_BaselineEbsBandwidthMbpsRequest");
var de_BatchDeleteScheduledActionAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.FailedScheduledActions === "") {
    contents[_FSA] = [];
  } else if (output[_FSA] != null && output[_FSA][_me] != null) {
    contents[_FSA] = de_FailedScheduledUpdateGroupActionRequests((0, import_smithy_client.getArrayIfSingleItem)(output[_FSA][_me]), context);
  }
  return contents;
}, "de_BatchDeleteScheduledActionAnswer");
var de_BatchPutScheduledUpdateGroupActionAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.FailedScheduledUpdateGroupActions === "") {
    contents[_FSUGA] = [];
  } else if (output[_FSUGA] != null && output[_FSUGA][_me] != null) {
    contents[_FSUGA] = de_FailedScheduledUpdateGroupActionRequests(
      (0, import_smithy_client.getArrayIfSingleItem)(output[_FSUGA][_me]),
      context
    );
  }
  return contents;
}, "de_BatchPutScheduledUpdateGroupActionAnswer");
var de_BlockDeviceMapping = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_VN] != null) {
    contents[_VN] = (0, import_smithy_client.expectString)(output[_VN]);
  }
  if (output[_DN] != null) {
    contents[_DN] = (0, import_smithy_client.expectString)(output[_DN]);
  }
  if (output[_E] != null) {
    contents[_E] = de_Ebs(output[_E], context);
  }
  if (output[_ND] != null) {
    contents[_ND] = (0, import_smithy_client.parseBoolean)(output[_ND]);
  }
  return contents;
}, "de_BlockDeviceMapping");
var de_BlockDeviceMappings = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_BlockDeviceMapping(entry, context);
  });
}, "de_BlockDeviceMappings");
var de_CancelInstanceRefreshAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IRIn] != null) {
    contents[_IRIn] = (0, import_smithy_client.expectString)(output[_IRIn]);
  }
  return contents;
}, "de_CancelInstanceRefreshAnswer");
var de_CapacityForecast = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Timestamps === "") {
    contents[_Tim] = [];
  } else if (output[_Tim] != null && output[_Tim][_me] != null) {
    contents[_Tim] = de_PredictiveScalingForecastTimestamps((0, import_smithy_client.getArrayIfSingleItem)(output[_Tim][_me]), context);
  }
  if (output.Values === "") {
    contents[_Va] = [];
  } else if (output[_Va] != null && output[_Va][_me] != null) {
    contents[_Va] = de_PredictiveScalingForecastValues((0, import_smithy_client.getArrayIfSingleItem)(output[_Va][_me]), context);
  }
  return contents;
}, "de_CapacityForecast");
var de_CheckpointPercentages = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.strictParseInt32)(entry);
  });
}, "de_CheckpointPercentages");
var de_ClassicLinkVPCSecurityGroups = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_ClassicLinkVPCSecurityGroups");
var de_CompleteLifecycleActionAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_CompleteLifecycleActionAnswer");
var de_CpuManufacturers = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_CpuManufacturers");
var de_CustomizedMetricSpecification = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_MN] != null) {
    contents[_MN] = (0, import_smithy_client.expectString)(output[_MN]);
  }
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  if (output.Dimensions === "") {
    contents[_D] = [];
  } else if (output[_D] != null && output[_D][_me] != null) {
    contents[_D] = de_MetricDimensions((0, import_smithy_client.getArrayIfSingleItem)(output[_D][_me]), context);
  }
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  if (output[_U] != null) {
    contents[_U] = (0, import_smithy_client.expectString)(output[_U]);
  }
  if (output.Metrics === "") {
    contents[_Me] = [];
  } else if (output[_Me] != null && output[_Me][_me] != null) {
    contents[_Me] = de_TargetTrackingMetricDataQueries((0, import_smithy_client.getArrayIfSingleItem)(output[_Me][_me]), context);
  }
  return contents;
}, "de_CustomizedMetricSpecification");
var de_DeleteLifecycleHookAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_DeleteLifecycleHookAnswer");
var de_DeleteWarmPoolAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_DeleteWarmPoolAnswer");
var de_DescribeAccountLimitsAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_MNOASG] != null) {
    contents[_MNOASG] = (0, import_smithy_client.strictParseInt32)(output[_MNOASG]);
  }
  if (output[_MNOLC] != null) {
    contents[_MNOLC] = (0, import_smithy_client.strictParseInt32)(output[_MNOLC]);
  }
  if (output[_NOASG] != null) {
    contents[_NOASG] = (0, import_smithy_client.strictParseInt32)(output[_NOASG]);
  }
  if (output[_NOLC] != null) {
    contents[_NOLC] = (0, import_smithy_client.strictParseInt32)(output[_NOLC]);
  }
  return contents;
}, "de_DescribeAccountLimitsAnswer");
var de_DescribeAdjustmentTypesAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.AdjustmentTypes === "") {
    contents[_ATdj] = [];
  } else if (output[_ATdj] != null && output[_ATdj][_me] != null) {
    contents[_ATdj] = de_AdjustmentTypes((0, import_smithy_client.getArrayIfSingleItem)(output[_ATdj][_me]), context);
  }
  return contents;
}, "de_DescribeAdjustmentTypesAnswer");
var de_DescribeAutoScalingNotificationTypesAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.AutoScalingNotificationTypes === "") {
    contents[_ASNT] = [];
  } else if (output[_ASNT] != null && output[_ASNT][_me] != null) {
    contents[_ASNT] = de_AutoScalingNotificationTypes((0, import_smithy_client.getArrayIfSingleItem)(output[_ASNT][_me]), context);
  }
  return contents;
}, "de_DescribeAutoScalingNotificationTypesAnswer");
var de_DescribeInstanceRefreshesAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.InstanceRefreshes === "") {
    contents[_IRn] = [];
  } else if (output[_IRn] != null && output[_IRn][_me] != null) {
    contents[_IRn] = de_InstanceRefreshes((0, import_smithy_client.getArrayIfSingleItem)(output[_IRn][_me]), context);
  }
  if (output[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(output[_NT]);
  }
  return contents;
}, "de_DescribeInstanceRefreshesAnswer");
var de_DescribeLifecycleHooksAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.LifecycleHooks === "") {
    contents[_LH] = [];
  } else if (output[_LH] != null && output[_LH][_me] != null) {
    contents[_LH] = de_LifecycleHooks((0, import_smithy_client.getArrayIfSingleItem)(output[_LH][_me]), context);
  }
  return contents;
}, "de_DescribeLifecycleHooksAnswer");
var de_DescribeLifecycleHookTypesAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.LifecycleHookTypes === "") {
    contents[_LHT] = [];
  } else if (output[_LHT] != null && output[_LHT][_me] != null) {
    contents[_LHT] = de_AutoScalingNotificationTypes((0, import_smithy_client.getArrayIfSingleItem)(output[_LHT][_me]), context);
  }
  return contents;
}, "de_DescribeLifecycleHookTypesAnswer");
var de_DescribeLoadBalancersResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.LoadBalancers === "") {
    contents[_LB] = [];
  } else if (output[_LB] != null && output[_LB][_me] != null) {
    contents[_LB] = de_LoadBalancerStates((0, import_smithy_client.getArrayIfSingleItem)(output[_LB][_me]), context);
  }
  if (output[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(output[_NT]);
  }
  return contents;
}, "de_DescribeLoadBalancersResponse");
var de_DescribeLoadBalancerTargetGroupsResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.LoadBalancerTargetGroups === "") {
    contents[_LBTG] = [];
  } else if (output[_LBTG] != null && output[_LBTG][_me] != null) {
    contents[_LBTG] = de_LoadBalancerTargetGroupStates((0, import_smithy_client.getArrayIfSingleItem)(output[_LBTG][_me]), context);
  }
  if (output[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(output[_NT]);
  }
  return contents;
}, "de_DescribeLoadBalancerTargetGroupsResponse");
var de_DescribeMetricCollectionTypesAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Metrics === "") {
    contents[_Me] = [];
  } else if (output[_Me] != null && output[_Me][_me] != null) {
    contents[_Me] = de_MetricCollectionTypes((0, import_smithy_client.getArrayIfSingleItem)(output[_Me][_me]), context);
  }
  if (output.Granularities === "") {
    contents[_Gr] = [];
  } else if (output[_Gr] != null && output[_Gr][_me] != null) {
    contents[_Gr] = de_MetricGranularityTypes((0, import_smithy_client.getArrayIfSingleItem)(output[_Gr][_me]), context);
  }
  return contents;
}, "de_DescribeMetricCollectionTypesAnswer");
var de_DescribeNotificationConfigurationsAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.NotificationConfigurations === "") {
    contents[_NC] = [];
  } else if (output[_NC] != null && output[_NC][_me] != null) {
    contents[_NC] = de_NotificationConfigurations((0, import_smithy_client.getArrayIfSingleItem)(output[_NC][_me]), context);
  }
  if (output[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(output[_NT]);
  }
  return contents;
}, "de_DescribeNotificationConfigurationsAnswer");
var de_DescribeTerminationPolicyTypesAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TerminationPolicyTypes === "") {
    contents[_TPT] = [];
  } else if (output[_TPT] != null && output[_TPT][_me] != null) {
    contents[_TPT] = de_TerminationPolicies((0, import_smithy_client.getArrayIfSingleItem)(output[_TPT][_me]), context);
  }
  return contents;
}, "de_DescribeTerminationPolicyTypesAnswer");
var de_DescribeTrafficSourcesResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TrafficSources === "") {
    contents[_TS] = [];
  } else if (output[_TS] != null && output[_TS][_me] != null) {
    contents[_TS] = de_TrafficSourceStates((0, import_smithy_client.getArrayIfSingleItem)(output[_TS][_me]), context);
  }
  if (output[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(output[_NT]);
  }
  return contents;
}, "de_DescribeTrafficSourcesResponse");
var de_DescribeWarmPoolAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_WPC] != null) {
    contents[_WPC] = de_WarmPoolConfiguration(output[_WPC], context);
  }
  if (output.Instances === "") {
    contents[_In] = [];
  } else if (output[_In] != null && output[_In][_me] != null) {
    contents[_In] = de_Instances((0, import_smithy_client.getArrayIfSingleItem)(output[_In][_me]), context);
  }
  if (output[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(output[_NT]);
  }
  return contents;
}, "de_DescribeWarmPoolAnswer");
var de_DesiredConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LT] != null) {
    contents[_LT] = de_LaunchTemplateSpecification(output[_LT], context);
  }
  if (output[_MIP] != null) {
    contents[_MIP] = de_MixedInstancesPolicy(output[_MIP], context);
  }
  return contents;
}, "de_DesiredConfiguration");
var de_DetachInstancesAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Activities === "") {
    contents[_Ac] = [];
  } else if (output[_Ac] != null && output[_Ac][_me] != null) {
    contents[_Ac] = de_Activities((0, import_smithy_client.getArrayIfSingleItem)(output[_Ac][_me]), context);
  }
  return contents;
}, "de_DetachInstancesAnswer");
var de_DetachLoadBalancersResultType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_DetachLoadBalancersResultType");
var de_DetachLoadBalancerTargetGroupsResultType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_DetachLoadBalancerTargetGroupsResultType");
var de_DetachTrafficSourcesResultType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_DetachTrafficSourcesResultType");
var de_Ebs = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SI] != null) {
    contents[_SI] = (0, import_smithy_client.expectString)(output[_SI]);
  }
  if (output[_VS] != null) {
    contents[_VS] = (0, import_smithy_client.strictParseInt32)(output[_VS]);
  }
  if (output[_VT] != null) {
    contents[_VT] = (0, import_smithy_client.expectString)(output[_VT]);
  }
  if (output[_DOT] != null) {
    contents[_DOT] = (0, import_smithy_client.parseBoolean)(output[_DOT]);
  }
  if (output[_I] != null) {
    contents[_I] = (0, import_smithy_client.strictParseInt32)(output[_I]);
  }
  if (output[_En] != null) {
    contents[_En] = (0, import_smithy_client.parseBoolean)(output[_En]);
  }
  if (output[_Th] != null) {
    contents[_Th] = (0, import_smithy_client.strictParseInt32)(output[_Th]);
  }
  return contents;
}, "de_Ebs");
var de_EnabledMetric = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Met] != null) {
    contents[_Met] = (0, import_smithy_client.expectString)(output[_Met]);
  }
  if (output[_G] != null) {
    contents[_G] = (0, import_smithy_client.expectString)(output[_G]);
  }
  return contents;
}, "de_EnabledMetric");
var de_EnabledMetrics = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_EnabledMetric(entry, context);
  });
}, "de_EnabledMetrics");
var de_EnterStandbyAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Activities === "") {
    contents[_Ac] = [];
  } else if (output[_Ac] != null && output[_Ac][_me] != null) {
    contents[_Ac] = de_Activities((0, import_smithy_client.getArrayIfSingleItem)(output[_Ac][_me]), context);
  }
  return contents;
}, "de_EnterStandbyAnswer");
var de_ExcludedInstanceTypes = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_ExcludedInstanceTypes");
var de_ExitStandbyAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Activities === "") {
    contents[_Ac] = [];
  } else if (output[_Ac] != null && output[_Ac][_me] != null) {
    contents[_Ac] = de_Activities((0, import_smithy_client.getArrayIfSingleItem)(output[_Ac][_me]), context);
  }
  return contents;
}, "de_ExitStandbyAnswer");
var de_FailedScheduledUpdateGroupActionRequest = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SANc] != null) {
    contents[_SANc] = (0, import_smithy_client.expectString)(output[_SANc]);
  }
  if (output[_EC] != null) {
    contents[_EC] = (0, import_smithy_client.expectString)(output[_EC]);
  }
  if (output[_EMr] != null) {
    contents[_EMr] = (0, import_smithy_client.expectString)(output[_EMr]);
  }
  return contents;
}, "de_FailedScheduledUpdateGroupActionRequest");
var de_FailedScheduledUpdateGroupActionRequests = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_FailedScheduledUpdateGroupActionRequest(entry, context);
  });
}, "de_FailedScheduledUpdateGroupActionRequests");
var de_GetPredictiveScalingForecastAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.LoadForecast === "") {
    contents[_LF] = [];
  } else if (output[_LF] != null && output[_LF][_me] != null) {
    contents[_LF] = de_LoadForecasts((0, import_smithy_client.getArrayIfSingleItem)(output[_LF][_me]), context);
  }
  if (output[_CF] != null) {
    contents[_CF] = de_CapacityForecast(output[_CF], context);
  }
  if (output[_UT] != null) {
    contents[_UT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_UT]));
  }
  return contents;
}, "de_GetPredictiveScalingForecastAnswer");
var de_Instance = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IIn] != null) {
    contents[_IIn] = (0, import_smithy_client.expectString)(output[_IIn]);
  }
  if (output[_IT] != null) {
    contents[_IT] = (0, import_smithy_client.expectString)(output[_IT]);
  }
  if (output[_AZv] != null) {
    contents[_AZv] = (0, import_smithy_client.expectString)(output[_AZv]);
  }
  if (output[_LSi] != null) {
    contents[_LSi] = (0, import_smithy_client.expectString)(output[_LSi]);
  }
  if (output[_HS] != null) {
    contents[_HS] = (0, import_smithy_client.expectString)(output[_HS]);
  }
  if (output[_LCN] != null) {
    contents[_LCN] = (0, import_smithy_client.expectString)(output[_LCN]);
  }
  if (output[_LT] != null) {
    contents[_LT] = de_LaunchTemplateSpecification(output[_LT], context);
  }
  if (output[_PFSI] != null) {
    contents[_PFSI] = (0, import_smithy_client.parseBoolean)(output[_PFSI]);
  }
  if (output[_WC] != null) {
    contents[_WC] = (0, import_smithy_client.expectString)(output[_WC]);
  }
  return contents;
}, "de_Instance");
var de_InstanceGenerations = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_InstanceGenerations");
var de_InstanceMaintenancePolicy = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_MHP] != null) {
    contents[_MHP] = (0, import_smithy_client.strictParseInt32)(output[_MHP]);
  }
  if (output[_MHPa] != null) {
    contents[_MHPa] = (0, import_smithy_client.strictParseInt32)(output[_MHPa]);
  }
  return contents;
}, "de_InstanceMaintenancePolicy");
var de_InstanceMetadataOptions = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_HT] != null) {
    contents[_HT] = (0, import_smithy_client.expectString)(output[_HT]);
  }
  if (output[_HPRHL] != null) {
    contents[_HPRHL] = (0, import_smithy_client.strictParseInt32)(output[_HPRHL]);
  }
  if (output[_HE] != null) {
    contents[_HE] = (0, import_smithy_client.expectString)(output[_HE]);
  }
  return contents;
}, "de_InstanceMetadataOptions");
var de_InstanceMonitoring = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ena] != null) {
    contents[_Ena] = (0, import_smithy_client.parseBoolean)(output[_Ena]);
  }
  return contents;
}, "de_InstanceMonitoring");
var de_InstanceRefresh = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IRIn] != null) {
    contents[_IRIn] = (0, import_smithy_client.expectString)(output[_IRIn]);
  }
  if (output[_ASGN] != null) {
    contents[_ASGN] = (0, import_smithy_client.expectString)(output[_ASGN]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = (0, import_smithy_client.expectString)(output[_Sta]);
  }
  if (output[_SR] != null) {
    contents[_SR] = (0, import_smithy_client.expectString)(output[_SR]);
  }
  if (output[_ST] != null) {
    contents[_ST] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_ST]));
  }
  if (output[_ET] != null) {
    contents[_ET] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_ET]));
  }
  if (output[_PCe] != null) {
    contents[_PCe] = (0, import_smithy_client.strictParseInt32)(output[_PCe]);
  }
  if (output[_ITU] != null) {
    contents[_ITU] = (0, import_smithy_client.strictParseInt32)(output[_ITU]);
  }
  if (output[_PD] != null) {
    contents[_PD] = de_InstanceRefreshProgressDetails(output[_PD], context);
  }
  if (output[_P] != null) {
    contents[_P] = de_RefreshPreferences(output[_P], context);
  }
  if (output[_DCes] != null) {
    contents[_DCes] = de_DesiredConfiguration(output[_DCes], context);
  }
  if (output[_RDo] != null) {
    contents[_RDo] = de_RollbackDetails(output[_RDo], context);
  }
  return contents;
}, "de_InstanceRefresh");
var de_InstanceRefreshes = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_InstanceRefresh(entry, context);
  });
}, "de_InstanceRefreshes");
var de_InstanceRefreshInProgressFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InstanceRefreshInProgressFault");
var de_InstanceRefreshLivePoolProgress = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PCe] != null) {
    contents[_PCe] = (0, import_smithy_client.strictParseInt32)(output[_PCe]);
  }
  if (output[_ITU] != null) {
    contents[_ITU] = (0, import_smithy_client.strictParseInt32)(output[_ITU]);
  }
  return contents;
}, "de_InstanceRefreshLivePoolProgress");
var de_InstanceRefreshProgressDetails = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LPP] != null) {
    contents[_LPP] = de_InstanceRefreshLivePoolProgress(output[_LPP], context);
  }
  if (output[_WPP] != null) {
    contents[_WPP] = de_InstanceRefreshWarmPoolProgress(output[_WPP], context);
  }
  return contents;
}, "de_InstanceRefreshProgressDetails");
var de_InstanceRefreshWarmPoolProgress = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PCe] != null) {
    contents[_PCe] = (0, import_smithy_client.strictParseInt32)(output[_PCe]);
  }
  if (output[_ITU] != null) {
    contents[_ITU] = (0, import_smithy_client.strictParseInt32)(output[_ITU]);
  }
  return contents;
}, "de_InstanceRefreshWarmPoolProgress");
var de_InstanceRequirements = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_VCC] != null) {
    contents[_VCC] = de_VCpuCountRequest(output[_VCC], context);
  }
  if (output[_MMB] != null) {
    contents[_MMB] = de_MemoryMiBRequest(output[_MMB], context);
  }
  if (output.CpuManufacturers === "") {
    contents[_CM] = [];
  } else if (output[_CM] != null && output[_CM][_me] != null) {
    contents[_CM] = de_CpuManufacturers((0, import_smithy_client.getArrayIfSingleItem)(output[_CM][_me]), context);
  }
  if (output[_MGBPVC] != null) {
    contents[_MGBPVC] = de_MemoryGiBPerVCpuRequest(output[_MGBPVC], context);
  }
  if (output.ExcludedInstanceTypes === "") {
    contents[_EIT] = [];
  } else if (output[_EIT] != null && output[_EIT][_me] != null) {
    contents[_EIT] = de_ExcludedInstanceTypes((0, import_smithy_client.getArrayIfSingleItem)(output[_EIT][_me]), context);
  }
  if (output.InstanceGenerations === "") {
    contents[_IG] = [];
  } else if (output[_IG] != null && output[_IG][_me] != null) {
    contents[_IG] = de_InstanceGenerations((0, import_smithy_client.getArrayIfSingleItem)(output[_IG][_me]), context);
  }
  if (output[_SMPPOLP] != null) {
    contents[_SMPPOLP] = (0, import_smithy_client.strictParseInt32)(output[_SMPPOLP]);
  }
  if (output[_MSPAPOOODP] != null) {
    contents[_MSPAPOOODP] = (0, import_smithy_client.strictParseInt32)(output[_MSPAPOOODP]);
  }
  if (output[_ODMPPOLP] != null) {
    contents[_ODMPPOLP] = (0, import_smithy_client.strictParseInt32)(output[_ODMPPOLP]);
  }
  if (output[_BM] != null) {
    contents[_BM] = (0, import_smithy_client.expectString)(output[_BM]);
  }
  if (output[_BP] != null) {
    contents[_BP] = (0, import_smithy_client.expectString)(output[_BP]);
  }
  if (output[_RHS] != null) {
    contents[_RHS] = (0, import_smithy_client.parseBoolean)(output[_RHS]);
  }
  if (output[_NIC] != null) {
    contents[_NIC] = de_NetworkInterfaceCountRequest(output[_NIC], context);
  }
  if (output[_LS] != null) {
    contents[_LS] = (0, import_smithy_client.expectString)(output[_LS]);
  }
  if (output.LocalStorageTypes === "") {
    contents[_LST] = [];
  } else if (output[_LST] != null && output[_LST][_me] != null) {
    contents[_LST] = de_LocalStorageTypes((0, import_smithy_client.getArrayIfSingleItem)(output[_LST][_me]), context);
  }
  if (output[_TLSGB] != null) {
    contents[_TLSGB] = de_TotalLocalStorageGBRequest(output[_TLSGB], context);
  }
  if (output[_BEBM] != null) {
    contents[_BEBM] = de_BaselineEbsBandwidthMbpsRequest(output[_BEBM], context);
  }
  if (output.AcceleratorTypes === "") {
    contents[_AT] = [];
  } else if (output[_AT] != null && output[_AT][_me] != null) {
    contents[_AT] = de_AcceleratorTypes((0, import_smithy_client.getArrayIfSingleItem)(output[_AT][_me]), context);
  }
  if (output[_AC] != null) {
    contents[_AC] = de_AcceleratorCountRequest(output[_AC], context);
  }
  if (output.AcceleratorManufacturers === "") {
    contents[_AM] = [];
  } else if (output[_AM] != null && output[_AM][_me] != null) {
    contents[_AM] = de_AcceleratorManufacturers((0, import_smithy_client.getArrayIfSingleItem)(output[_AM][_me]), context);
  }
  if (output.AcceleratorNames === "") {
    contents[_AN] = [];
  } else if (output[_AN] != null && output[_AN][_me] != null) {
    contents[_AN] = de_AcceleratorNames((0, import_smithy_client.getArrayIfSingleItem)(output[_AN][_me]), context);
  }
  if (output[_ATMMB] != null) {
    contents[_ATMMB] = de_AcceleratorTotalMemoryMiBRequest(output[_ATMMB], context);
  }
  if (output[_NBG] != null) {
    contents[_NBG] = de_NetworkBandwidthGbpsRequest(output[_NBG], context);
  }
  if (output.AllowedInstanceTypes === "") {
    contents[_AIT] = [];
  } else if (output[_AIT] != null && output[_AIT][_me] != null) {
    contents[_AIT] = de_AllowedInstanceTypes((0, import_smithy_client.getArrayIfSingleItem)(output[_AIT][_me]), context);
  }
  return contents;
}, "de_InstanceRequirements");
var de_InstanceReusePolicy = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ROSI] != null) {
    contents[_ROSI] = (0, import_smithy_client.parseBoolean)(output[_ROSI]);
  }
  return contents;
}, "de_InstanceReusePolicy");
var de_Instances = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Instance(entry, context);
  });
}, "de_Instances");
var de_InstancesDistribution = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ODAS] != null) {
    contents[_ODAS] = (0, import_smithy_client.expectString)(output[_ODAS]);
  }
  if (output[_ODBC] != null) {
    contents[_ODBC] = (0, import_smithy_client.strictParseInt32)(output[_ODBC]);
  }
  if (output[_ODPABC] != null) {
    contents[_ODPABC] = (0, import_smithy_client.strictParseInt32)(output[_ODPABC]);
  }
  if (output[_SAS] != null) {
    contents[_SAS] = (0, import_smithy_client.expectString)(output[_SAS]);
  }
  if (output[_SIPp] != null) {
    contents[_SIPp] = (0, import_smithy_client.strictParseInt32)(output[_SIPp]);
  }
  if (output[_SMP] != null) {
    contents[_SMP] = (0, import_smithy_client.expectString)(output[_SMP]);
  }
  return contents;
}, "de_InstancesDistribution");
var de_InvalidNextToken = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InvalidNextToken");
var de_IrreversibleInstanceRefreshFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_IrreversibleInstanceRefreshFault");
var de_LaunchConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LCN] != null) {
    contents[_LCN] = (0, import_smithy_client.expectString)(output[_LCN]);
  }
  if (output[_LCARN] != null) {
    contents[_LCARN] = (0, import_smithy_client.expectString)(output[_LCARN]);
  }
  if (output[_IIm] != null) {
    contents[_IIm] = (0, import_smithy_client.expectString)(output[_IIm]);
  }
  if (output[_KN] != null) {
    contents[_KN] = (0, import_smithy_client.expectString)(output[_KN]);
  }
  if (output.SecurityGroups === "") {
    contents[_SG] = [];
  } else if (output[_SG] != null && output[_SG][_me] != null) {
    contents[_SG] = de_SecurityGroups((0, import_smithy_client.getArrayIfSingleItem)(output[_SG][_me]), context);
  }
  if (output[_CLVPCI] != null) {
    contents[_CLVPCI] = (0, import_smithy_client.expectString)(output[_CLVPCI]);
  }
  if (output.ClassicLinkVPCSecurityGroups === "") {
    contents[_CLVPCSG] = [];
  } else if (output[_CLVPCSG] != null && output[_CLVPCSG][_me] != null) {
    contents[_CLVPCSG] = de_ClassicLinkVPCSecurityGroups((0, import_smithy_client.getArrayIfSingleItem)(output[_CLVPCSG][_me]), context);
  }
  if (output[_UD] != null) {
    contents[_UD] = (0, import_smithy_client.expectString)(output[_UD]);
  }
  if (output[_IT] != null) {
    contents[_IT] = (0, import_smithy_client.expectString)(output[_IT]);
  }
  if (output[_KI] != null) {
    contents[_KI] = (0, import_smithy_client.expectString)(output[_KI]);
  }
  if (output[_RI] != null) {
    contents[_RI] = (0, import_smithy_client.expectString)(output[_RI]);
  }
  if (output.BlockDeviceMappings === "") {
    contents[_BDM] = [];
  } else if (output[_BDM] != null && output[_BDM][_me] != null) {
    contents[_BDM] = de_BlockDeviceMappings((0, import_smithy_client.getArrayIfSingleItem)(output[_BDM][_me]), context);
  }
  if (output[_IM] != null) {
    contents[_IM] = de_InstanceMonitoring(output[_IM], context);
  }
  if (output[_SPp] != null) {
    contents[_SPp] = (0, import_smithy_client.expectString)(output[_SPp]);
  }
  if (output[_IIP] != null) {
    contents[_IIP] = (0, import_smithy_client.expectString)(output[_IIP]);
  }
  if (output[_CT] != null) {
    contents[_CT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CT]));
  }
  if (output[_EO] != null) {
    contents[_EO] = (0, import_smithy_client.parseBoolean)(output[_EO]);
  }
  if (output[_APIA] != null) {
    contents[_APIA] = (0, import_smithy_client.parseBoolean)(output[_APIA]);
  }
  if (output[_PT] != null) {
    contents[_PT] = (0, import_smithy_client.expectString)(output[_PT]);
  }
  if (output[_MO] != null) {
    contents[_MO] = de_InstanceMetadataOptions(output[_MO], context);
  }
  return contents;
}, "de_LaunchConfiguration");
var de_LaunchConfigurations = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_LaunchConfiguration(entry, context);
  });
}, "de_LaunchConfigurations");
var de_LaunchConfigurationsType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.LaunchConfigurations === "") {
    contents[_LC] = [];
  } else if (output[_LC] != null && output[_LC][_me] != null) {
    contents[_LC] = de_LaunchConfigurations((0, import_smithy_client.getArrayIfSingleItem)(output[_LC][_me]), context);
  }
  if (output[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(output[_NT]);
  }
  return contents;
}, "de_LaunchConfigurationsType");
var de_LaunchTemplate = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LTS] != null) {
    contents[_LTS] = de_LaunchTemplateSpecification(output[_LTS], context);
  }
  if (output.Overrides === "") {
    contents[_O] = [];
  } else if (output[_O] != null && output[_O][_me] != null) {
    contents[_O] = de_Overrides((0, import_smithy_client.getArrayIfSingleItem)(output[_O][_me]), context);
  }
  return contents;
}, "de_LaunchTemplate");
var de_LaunchTemplateOverrides = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IT] != null) {
    contents[_IT] = (0, import_smithy_client.expectString)(output[_IT]);
  }
  if (output[_WC] != null) {
    contents[_WC] = (0, import_smithy_client.expectString)(output[_WC]);
  }
  if (output[_LTS] != null) {
    contents[_LTS] = de_LaunchTemplateSpecification(output[_LTS], context);
  }
  if (output[_IR] != null) {
    contents[_IR] = de_InstanceRequirements(output[_IR], context);
  }
  return contents;
}, "de_LaunchTemplateOverrides");
var de_LaunchTemplateSpecification = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LTI] != null) {
    contents[_LTI] = (0, import_smithy_client.expectString)(output[_LTI]);
  }
  if (output[_LTN] != null) {
    contents[_LTN] = (0, import_smithy_client.expectString)(output[_LTN]);
  }
  if (output[_V] != null) {
    contents[_V] = (0, import_smithy_client.expectString)(output[_V]);
  }
  return contents;
}, "de_LaunchTemplateSpecification");
var de_LifecycleHook = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LHN] != null) {
    contents[_LHN] = (0, import_smithy_client.expectString)(output[_LHN]);
  }
  if (output[_ASGN] != null) {
    contents[_ASGN] = (0, import_smithy_client.expectString)(output[_ASGN]);
  }
  if (output[_LTi] != null) {
    contents[_LTi] = (0, import_smithy_client.expectString)(output[_LTi]);
  }
  if (output[_NTARN] != null) {
    contents[_NTARN] = (0, import_smithy_client.expectString)(output[_NTARN]);
  }
  if (output[_RARN] != null) {
    contents[_RARN] = (0, import_smithy_client.expectString)(output[_RARN]);
  }
  if (output[_NM] != null) {
    contents[_NM] = (0, import_smithy_client.expectString)(output[_NM]);
  }
  if (output[_HTe] != null) {
    contents[_HTe] = (0, import_smithy_client.strictParseInt32)(output[_HTe]);
  }
  if (output[_GT] != null) {
    contents[_GT] = (0, import_smithy_client.strictParseInt32)(output[_GT]);
  }
  if (output[_DR] != null) {
    contents[_DR] = (0, import_smithy_client.expectString)(output[_DR]);
  }
  return contents;
}, "de_LifecycleHook");
var de_LifecycleHooks = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_LifecycleHook(entry, context);
  });
}, "de_LifecycleHooks");
var de_LimitExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_LimitExceededFault");
var de_LoadBalancerNames = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_LoadBalancerNames");
var de_LoadBalancerState = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LBNo] != null) {
    contents[_LBNo] = (0, import_smithy_client.expectString)(output[_LBNo]);
  }
  if (output[_Stat] != null) {
    contents[_Stat] = (0, import_smithy_client.expectString)(output[_Stat]);
  }
  return contents;
}, "de_LoadBalancerState");
var de_LoadBalancerStates = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_LoadBalancerState(entry, context);
  });
}, "de_LoadBalancerStates");
var de_LoadBalancerTargetGroupState = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LBTGARN] != null) {
    contents[_LBTGARN] = (0, import_smithy_client.expectString)(output[_LBTGARN]);
  }
  if (output[_Stat] != null) {
    contents[_Stat] = (0, import_smithy_client.expectString)(output[_Stat]);
  }
  return contents;
}, "de_LoadBalancerTargetGroupState");
var de_LoadBalancerTargetGroupStates = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_LoadBalancerTargetGroupState(entry, context);
  });
}, "de_LoadBalancerTargetGroupStates");
var de_LoadForecast = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Timestamps === "") {
    contents[_Tim] = [];
  } else if (output[_Tim] != null && output[_Tim][_me] != null) {
    contents[_Tim] = de_PredictiveScalingForecastTimestamps((0, import_smithy_client.getArrayIfSingleItem)(output[_Tim][_me]), context);
  }
  if (output.Values === "") {
    contents[_Va] = [];
  } else if (output[_Va] != null && output[_Va][_me] != null) {
    contents[_Va] = de_PredictiveScalingForecastValues((0, import_smithy_client.getArrayIfSingleItem)(output[_Va][_me]), context);
  }
  if (output[_MSetr] != null) {
    contents[_MSetr] = de_PredictiveScalingMetricSpecification(output[_MSetr], context);
  }
  return contents;
}, "de_LoadForecast");
var de_LoadForecasts = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_LoadForecast(entry, context);
  });
}, "de_LoadForecasts");
var de_LocalStorageTypes = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_LocalStorageTypes");
var de_MemoryGiBPerVCpuRequest = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.strictParseFloat)(output[_M]);
  }
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.strictParseFloat)(output[_Ma]);
  }
  return contents;
}, "de_MemoryGiBPerVCpuRequest");
var de_MemoryMiBRequest = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.strictParseInt32)(output[_M]);
  }
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.strictParseInt32)(output[_Ma]);
  }
  return contents;
}, "de_MemoryMiBRequest");
var de_Metric = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  if (output[_MN] != null) {
    contents[_MN] = (0, import_smithy_client.expectString)(output[_MN]);
  }
  if (output.Dimensions === "") {
    contents[_D] = [];
  } else if (output[_D] != null && output[_D][_me] != null) {
    contents[_D] = de_MetricDimensions((0, import_smithy_client.getArrayIfSingleItem)(output[_D][_me]), context);
  }
  return contents;
}, "de_Metric");
var de_MetricCollectionType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Met] != null) {
    contents[_Met] = (0, import_smithy_client.expectString)(output[_Met]);
  }
  return contents;
}, "de_MetricCollectionType");
var de_MetricCollectionTypes = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_MetricCollectionType(entry, context);
  });
}, "de_MetricCollectionTypes");
var de_MetricDataQueries = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_MetricDataQuery(entry, context);
  });
}, "de_MetricDataQueries");
var de_MetricDataQuery = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = (0, import_smithy_client.expectString)(output[_Id]);
  }
  if (output[_Ex] != null) {
    contents[_Ex] = (0, import_smithy_client.expectString)(output[_Ex]);
  }
  if (output[_MSe] != null) {
    contents[_MSe] = de_MetricStat(output[_MSe], context);
  }
  if (output[_L] != null) {
    contents[_L] = (0, import_smithy_client.expectString)(output[_L]);
  }
  if (output[_RD] != null) {
    contents[_RD] = (0, import_smithy_client.parseBoolean)(output[_RD]);
  }
  return contents;
}, "de_MetricDataQuery");
var de_MetricDimension = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Na] != null) {
    contents[_Na] = (0, import_smithy_client.expectString)(output[_Na]);
  }
  if (output[_Val] != null) {
    contents[_Val] = (0, import_smithy_client.expectString)(output[_Val]);
  }
  return contents;
}, "de_MetricDimension");
var de_MetricDimensions = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_MetricDimension(entry, context);
  });
}, "de_MetricDimensions");
var de_MetricGranularityType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_G] != null) {
    contents[_G] = (0, import_smithy_client.expectString)(output[_G]);
  }
  return contents;
}, "de_MetricGranularityType");
var de_MetricGranularityTypes = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_MetricGranularityType(entry, context);
  });
}, "de_MetricGranularityTypes");
var de_MetricStat = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Met] != null) {
    contents[_Met] = de_Metric(output[_Met], context);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_U] != null) {
    contents[_U] = (0, import_smithy_client.expectString)(output[_U]);
  }
  return contents;
}, "de_MetricStat");
var de_MixedInstancesPolicy = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LT] != null) {
    contents[_LT] = de_LaunchTemplate(output[_LT], context);
  }
  if (output[_ID] != null) {
    contents[_ID] = de_InstancesDistribution(output[_ID], context);
  }
  return contents;
}, "de_MixedInstancesPolicy");
var de_NetworkBandwidthGbpsRequest = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.strictParseFloat)(output[_M]);
  }
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.strictParseFloat)(output[_Ma]);
  }
  return contents;
}, "de_NetworkBandwidthGbpsRequest");
var de_NetworkInterfaceCountRequest = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.strictParseInt32)(output[_M]);
  }
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.strictParseInt32)(output[_Ma]);
  }
  return contents;
}, "de_NetworkInterfaceCountRequest");
var de_NotificationConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ASGN] != null) {
    contents[_ASGN] = (0, import_smithy_client.expectString)(output[_ASGN]);
  }
  if (output[_TARN] != null) {
    contents[_TARN] = (0, import_smithy_client.expectString)(output[_TARN]);
  }
  if (output[_NTot] != null) {
    contents[_NTot] = (0, import_smithy_client.expectString)(output[_NTot]);
  }
  return contents;
}, "de_NotificationConfiguration");
var de_NotificationConfigurations = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_NotificationConfiguration(entry, context);
  });
}, "de_NotificationConfigurations");
var de_Overrides = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_LaunchTemplateOverrides(entry, context);
  });
}, "de_Overrides");
var de_PoliciesType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.ScalingPolicies === "") {
    contents[_SPca] = [];
  } else if (output[_SPca] != null && output[_SPca][_me] != null) {
    contents[_SPca] = de_ScalingPolicies((0, import_smithy_client.getArrayIfSingleItem)(output[_SPca][_me]), context);
  }
  if (output[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(output[_NT]);
  }
  return contents;
}, "de_PoliciesType");
var de_PolicyARNType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PARN] != null) {
    contents[_PARN] = (0, import_smithy_client.expectString)(output[_PARN]);
  }
  if (output.Alarms === "") {
    contents[_Al] = [];
  } else if (output[_Al] != null && output[_Al][_me] != null) {
    contents[_Al] = de_Alarms((0, import_smithy_client.getArrayIfSingleItem)(output[_Al][_me]), context);
  }
  return contents;
}, "de_PolicyARNType");
var de_PredefinedMetricSpecification = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PMT] != null) {
    contents[_PMT] = (0, import_smithy_client.expectString)(output[_PMT]);
  }
  if (output[_RL] != null) {
    contents[_RL] = (0, import_smithy_client.expectString)(output[_RL]);
  }
  return contents;
}, "de_PredefinedMetricSpecification");
var de_PredictiveScalingConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.MetricSpecifications === "") {
    contents[_MSet] = [];
  } else if (output[_MSet] != null && output[_MSet][_me] != null) {
    contents[_MSet] = de_PredictiveScalingMetricSpecifications((0, import_smithy_client.getArrayIfSingleItem)(output[_MSet][_me]), context);
  }
  if (output[_Mo] != null) {
    contents[_Mo] = (0, import_smithy_client.expectString)(output[_Mo]);
  }
  if (output[_SBT] != null) {
    contents[_SBT] = (0, import_smithy_client.strictParseInt32)(output[_SBT]);
  }
  if (output[_MCBB] != null) {
    contents[_MCBB] = (0, import_smithy_client.expectString)(output[_MCBB]);
  }
  if (output[_MCB] != null) {
    contents[_MCB] = (0, import_smithy_client.strictParseInt32)(output[_MCB]);
  }
  return contents;
}, "de_PredictiveScalingConfiguration");
var de_PredictiveScalingCustomizedCapacityMetric = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.MetricDataQueries === "") {
    contents[_MDQ] = [];
  } else if (output[_MDQ] != null && output[_MDQ][_me] != null) {
    contents[_MDQ] = de_MetricDataQueries((0, import_smithy_client.getArrayIfSingleItem)(output[_MDQ][_me]), context);
  }
  return contents;
}, "de_PredictiveScalingCustomizedCapacityMetric");
var de_PredictiveScalingCustomizedLoadMetric = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.MetricDataQueries === "") {
    contents[_MDQ] = [];
  } else if (output[_MDQ] != null && output[_MDQ][_me] != null) {
    contents[_MDQ] = de_MetricDataQueries((0, import_smithy_client.getArrayIfSingleItem)(output[_MDQ][_me]), context);
  }
  return contents;
}, "de_PredictiveScalingCustomizedLoadMetric");
var de_PredictiveScalingCustomizedScalingMetric = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.MetricDataQueries === "") {
    contents[_MDQ] = [];
  } else if (output[_MDQ] != null && output[_MDQ][_me] != null) {
    contents[_MDQ] = de_MetricDataQueries((0, import_smithy_client.getArrayIfSingleItem)(output[_MDQ][_me]), context);
  }
  return contents;
}, "de_PredictiveScalingCustomizedScalingMetric");
var de_PredictiveScalingForecastTimestamps = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(entry));
  });
}, "de_PredictiveScalingForecastTimestamps");
var de_PredictiveScalingForecastValues = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.strictParseFloat)(entry);
  });
}, "de_PredictiveScalingForecastValues");
var de_PredictiveScalingMetricSpecification = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_TV] != null) {
    contents[_TV] = (0, import_smithy_client.strictParseFloat)(output[_TV]);
  }
  if (output[_PMPS] != null) {
    contents[_PMPS] = de_PredictiveScalingPredefinedMetricPair(output[_PMPS], context);
  }
  if (output[_PSMS] != null) {
    contents[_PSMS] = de_PredictiveScalingPredefinedScalingMetric(output[_PSMS], context);
  }
  if (output[_PLMS] != null) {
    contents[_PLMS] = de_PredictiveScalingPredefinedLoadMetric(output[_PLMS], context);
  }
  if (output[_CSMS] != null) {
    contents[_CSMS] = de_PredictiveScalingCustomizedScalingMetric(output[_CSMS], context);
  }
  if (output[_CLMS] != null) {
    contents[_CLMS] = de_PredictiveScalingCustomizedLoadMetric(output[_CLMS], context);
  }
  if (output[_CCMS] != null) {
    contents[_CCMS] = de_PredictiveScalingCustomizedCapacityMetric(output[_CCMS], context);
  }
  return contents;
}, "de_PredictiveScalingMetricSpecification");
var de_PredictiveScalingMetricSpecifications = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_PredictiveScalingMetricSpecification(entry, context);
  });
}, "de_PredictiveScalingMetricSpecifications");
var de_PredictiveScalingPredefinedLoadMetric = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PMT] != null) {
    contents[_PMT] = (0, import_smithy_client.expectString)(output[_PMT]);
  }
  if (output[_RL] != null) {
    contents[_RL] = (0, import_smithy_client.expectString)(output[_RL]);
  }
  return contents;
}, "de_PredictiveScalingPredefinedLoadMetric");
var de_PredictiveScalingPredefinedMetricPair = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PMT] != null) {
    contents[_PMT] = (0, import_smithy_client.expectString)(output[_PMT]);
  }
  if (output[_RL] != null) {
    contents[_RL] = (0, import_smithy_client.expectString)(output[_RL]);
  }
  return contents;
}, "de_PredictiveScalingPredefinedMetricPair");
var de_PredictiveScalingPredefinedScalingMetric = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PMT] != null) {
    contents[_PMT] = (0, import_smithy_client.expectString)(output[_PMT]);
  }
  if (output[_RL] != null) {
    contents[_RL] = (0, import_smithy_client.expectString)(output[_RL]);
  }
  return contents;
}, "de_PredictiveScalingPredefinedScalingMetric");
var de_Processes = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ProcessType(entry, context);
  });
}, "de_Processes");
var de_ProcessesType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Processes === "") {
    contents[_Pro] = [];
  } else if (output[_Pro] != null && output[_Pro][_me] != null) {
    contents[_Pro] = de_Processes((0, import_smithy_client.getArrayIfSingleItem)(output[_Pro][_me]), context);
  }
  return contents;
}, "de_ProcessesType");
var de_ProcessType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PNr] != null) {
    contents[_PNr] = (0, import_smithy_client.expectString)(output[_PNr]);
  }
  return contents;
}, "de_ProcessType");
var de_PutLifecycleHookAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_PutLifecycleHookAnswer");
var de_PutWarmPoolAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_PutWarmPoolAnswer");
var de_RecordLifecycleActionHeartbeatAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_RecordLifecycleActionHeartbeatAnswer");
var de_RefreshPreferences = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_MHP] != null) {
    contents[_MHP] = (0, import_smithy_client.strictParseInt32)(output[_MHP]);
  }
  if (output[_IW] != null) {
    contents[_IW] = (0, import_smithy_client.strictParseInt32)(output[_IW]);
  }
  if (output.CheckpointPercentages === "") {
    contents[_CP] = [];
  } else if (output[_CP] != null && output[_CP][_me] != null) {
    contents[_CP] = de_CheckpointPercentages((0, import_smithy_client.getArrayIfSingleItem)(output[_CP][_me]), context);
  }
  if (output[_CD] != null) {
    contents[_CD] = (0, import_smithy_client.strictParseInt32)(output[_CD]);
  }
  if (output[_SM] != null) {
    contents[_SM] = (0, import_smithy_client.parseBoolean)(output[_SM]);
  }
  if (output[_AR] != null) {
    contents[_AR] = (0, import_smithy_client.parseBoolean)(output[_AR]);
  }
  if (output[_SIPI] != null) {
    contents[_SIPI] = (0, import_smithy_client.expectString)(output[_SIPI]);
  }
  if (output[_SIt] != null) {
    contents[_SIt] = (0, import_smithy_client.expectString)(output[_SIt]);
  }
  if (output[_AS] != null) {
    contents[_AS] = de_AlarmSpecification(output[_AS], context);
  }
  if (output[_MHPa] != null) {
    contents[_MHPa] = (0, import_smithy_client.strictParseInt32)(output[_MHPa]);
  }
  return contents;
}, "de_RefreshPreferences");
var de_ResourceContentionFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_ResourceContentionFault");
var de_ResourceInUseFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_ResourceInUseFault");
var de_RollbackDetails = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RR] != null) {
    contents[_RR] = (0, import_smithy_client.expectString)(output[_RR]);
  }
  if (output[_RST] != null) {
    contents[_RST] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_RST]));
  }
  if (output[_PCOR] != null) {
    contents[_PCOR] = (0, import_smithy_client.strictParseInt32)(output[_PCOR]);
  }
  if (output[_ITUOR] != null) {
    contents[_ITUOR] = (0, import_smithy_client.strictParseInt32)(output[_ITUOR]);
  }
  if (output[_PDOR] != null) {
    contents[_PDOR] = de_InstanceRefreshProgressDetails(output[_PDOR], context);
  }
  return contents;
}, "de_RollbackDetails");
var de_RollbackInstanceRefreshAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IRIn] != null) {
    contents[_IRIn] = (0, import_smithy_client.expectString)(output[_IRIn]);
  }
  return contents;
}, "de_RollbackInstanceRefreshAnswer");
var de_ScalingActivityInProgressFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_ScalingActivityInProgressFault");
var de_ScalingPolicies = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ScalingPolicy(entry, context);
  });
}, "de_ScalingPolicies");
var de_ScalingPolicy = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ASGN] != null) {
    contents[_ASGN] = (0, import_smithy_client.expectString)(output[_ASGN]);
  }
  if (output[_PN] != null) {
    contents[_PN] = (0, import_smithy_client.expectString)(output[_PN]);
  }
  if (output[_PARN] != null) {
    contents[_PARN] = (0, import_smithy_client.expectString)(output[_PARN]);
  }
  if (output[_PTol] != null) {
    contents[_PTol] = (0, import_smithy_client.expectString)(output[_PTol]);
  }
  if (output[_ATd] != null) {
    contents[_ATd] = (0, import_smithy_client.expectString)(output[_ATd]);
  }
  if (output[_MAS] != null) {
    contents[_MAS] = (0, import_smithy_client.strictParseInt32)(output[_MAS]);
  }
  if (output[_MAM] != null) {
    contents[_MAM] = (0, import_smithy_client.strictParseInt32)(output[_MAM]);
  }
  if (output[_SA] != null) {
    contents[_SA] = (0, import_smithy_client.strictParseInt32)(output[_SA]);
  }
  if (output[_Co] != null) {
    contents[_Co] = (0, import_smithy_client.strictParseInt32)(output[_Co]);
  }
  if (output.StepAdjustments === "") {
    contents[_SAt] = [];
  } else if (output[_SAt] != null && output[_SAt][_me] != null) {
    contents[_SAt] = de_StepAdjustments((0, import_smithy_client.getArrayIfSingleItem)(output[_SAt][_me]), context);
  }
  if (output[_MAT] != null) {
    contents[_MAT] = (0, import_smithy_client.expectString)(output[_MAT]);
  }
  if (output[_EIW] != null) {
    contents[_EIW] = (0, import_smithy_client.strictParseInt32)(output[_EIW]);
  }
  if (output.Alarms === "") {
    contents[_Al] = [];
  } else if (output[_Al] != null && output[_Al][_me] != null) {
    contents[_Al] = de_Alarms((0, import_smithy_client.getArrayIfSingleItem)(output[_Al][_me]), context);
  }
  if (output[_TTC] != null) {
    contents[_TTC] = de_TargetTrackingConfiguration(output[_TTC], context);
  }
  if (output[_Ena] != null) {
    contents[_Ena] = (0, import_smithy_client.parseBoolean)(output[_Ena]);
  }
  if (output[_PSC] != null) {
    contents[_PSC] = de_PredictiveScalingConfiguration(output[_PSC], context);
  }
  return contents;
}, "de_ScalingPolicy");
var de_ScheduledActionsType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.ScheduledUpdateGroupActions === "") {
    contents[_SUGA] = [];
  } else if (output[_SUGA] != null && output[_SUGA][_me] != null) {
    contents[_SUGA] = de_ScheduledUpdateGroupActions((0, import_smithy_client.getArrayIfSingleItem)(output[_SUGA][_me]), context);
  }
  if (output[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(output[_NT]);
  }
  return contents;
}, "de_ScheduledActionsType");
var de_ScheduledUpdateGroupAction = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ASGN] != null) {
    contents[_ASGN] = (0, import_smithy_client.expectString)(output[_ASGN]);
  }
  if (output[_SANc] != null) {
    contents[_SANc] = (0, import_smithy_client.expectString)(output[_SANc]);
  }
  if (output[_SAARN] != null) {
    contents[_SAARN] = (0, import_smithy_client.expectString)(output[_SAARN]);
  }
  if (output[_Ti] != null) {
    contents[_Ti] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Ti]));
  }
  if (output[_ST] != null) {
    contents[_ST] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_ST]));
  }
  if (output[_ET] != null) {
    contents[_ET] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_ET]));
  }
  if (output[_R] != null) {
    contents[_R] = (0, import_smithy_client.expectString)(output[_R]);
  }
  if (output[_MS] != null) {
    contents[_MS] = (0, import_smithy_client.strictParseInt32)(output[_MS]);
  }
  if (output[_MSa] != null) {
    contents[_MSa] = (0, import_smithy_client.strictParseInt32)(output[_MSa]);
  }
  if (output[_DC] != null) {
    contents[_DC] = (0, import_smithy_client.strictParseInt32)(output[_DC]);
  }
  if (output[_TZ] != null) {
    contents[_TZ] = (0, import_smithy_client.expectString)(output[_TZ]);
  }
  return contents;
}, "de_ScheduledUpdateGroupAction");
var de_ScheduledUpdateGroupActions = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ScheduledUpdateGroupAction(entry, context);
  });
}, "de_ScheduledUpdateGroupActions");
var de_SecurityGroups = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_SecurityGroups");
var de_ServiceLinkedRoleFailure = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_ServiceLinkedRoleFailure");
var de_SetInstanceProtectionAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_SetInstanceProtectionAnswer");
var de_StartInstanceRefreshAnswer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IRIn] != null) {
    contents[_IRIn] = (0, import_smithy_client.expectString)(output[_IRIn]);
  }
  return contents;
}, "de_StartInstanceRefreshAnswer");
var de_StepAdjustment = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_MILB] != null) {
    contents[_MILB] = (0, import_smithy_client.strictParseFloat)(output[_MILB]);
  }
  if (output[_MIUB] != null) {
    contents[_MIUB] = (0, import_smithy_client.strictParseFloat)(output[_MIUB]);
  }
  if (output[_SA] != null) {
    contents[_SA] = (0, import_smithy_client.strictParseInt32)(output[_SA]);
  }
  return contents;
}, "de_StepAdjustment");
var de_StepAdjustments = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_StepAdjustment(entry, context);
  });
}, "de_StepAdjustments");
var de_SuspendedProcess = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PNr] != null) {
    contents[_PNr] = (0, import_smithy_client.expectString)(output[_PNr]);
  }
  if (output[_SRu] != null) {
    contents[_SRu] = (0, import_smithy_client.expectString)(output[_SRu]);
  }
  return contents;
}, "de_SuspendedProcess");
var de_SuspendedProcesses = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_SuspendedProcess(entry, context);
  });
}, "de_SuspendedProcesses");
var de_TagDescription = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RIe] != null) {
    contents[_RIe] = (0, import_smithy_client.expectString)(output[_RIe]);
  }
  if (output[_RT] != null) {
    contents[_RT] = (0, import_smithy_client.expectString)(output[_RT]);
  }
  if (output[_K] != null) {
    contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
  }
  if (output[_Val] != null) {
    contents[_Val] = (0, import_smithy_client.expectString)(output[_Val]);
  }
  if (output[_PAL] != null) {
    contents[_PAL] = (0, import_smithy_client.parseBoolean)(output[_PAL]);
  }
  return contents;
}, "de_TagDescription");
var de_TagDescriptionList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_TagDescription(entry, context);
  });
}, "de_TagDescriptionList");
var de_TagsType = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_TagDescriptionList((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
  }
  if (output[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(output[_NT]);
  }
  return contents;
}, "de_TagsType");
var de_TargetGroupARNs = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_TargetGroupARNs");
var de_TargetTrackingConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PMS] != null) {
    contents[_PMS] = de_PredefinedMetricSpecification(output[_PMS], context);
  }
  if (output[_CMS] != null) {
    contents[_CMS] = de_CustomizedMetricSpecification(output[_CMS], context);
  }
  if (output[_TV] != null) {
    contents[_TV] = (0, import_smithy_client.strictParseFloat)(output[_TV]);
  }
  if (output[_DSI] != null) {
    contents[_DSI] = (0, import_smithy_client.parseBoolean)(output[_DSI]);
  }
  return contents;
}, "de_TargetTrackingConfiguration");
var de_TargetTrackingMetricDataQueries = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_TargetTrackingMetricDataQuery(entry, context);
  });
}, "de_TargetTrackingMetricDataQueries");
var de_TargetTrackingMetricDataQuery = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = (0, import_smithy_client.expectString)(output[_Id]);
  }
  if (output[_Ex] != null) {
    contents[_Ex] = (0, import_smithy_client.expectString)(output[_Ex]);
  }
  if (output[_MSe] != null) {
    contents[_MSe] = de_TargetTrackingMetricStat(output[_MSe], context);
  }
  if (output[_L] != null) {
    contents[_L] = (0, import_smithy_client.expectString)(output[_L]);
  }
  if (output[_RD] != null) {
    contents[_RD] = (0, import_smithy_client.parseBoolean)(output[_RD]);
  }
  return contents;
}, "de_TargetTrackingMetricDataQuery");
var de_TargetTrackingMetricStat = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Met] != null) {
    contents[_Met] = de_Metric(output[_Met], context);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_U] != null) {
    contents[_U] = (0, import_smithy_client.expectString)(output[_U]);
  }
  return contents;
}, "de_TargetTrackingMetricStat");
var de_TerminationPolicies = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_TerminationPolicies");
var de_TotalLocalStorageGBRequest = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.strictParseFloat)(output[_M]);
  }
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.strictParseFloat)(output[_Ma]);
  }
  return contents;
}, "de_TotalLocalStorageGBRequest");
var de_TrafficSourceIdentifier = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ide] != null) {
    contents[_Ide] = (0, import_smithy_client.expectString)(output[_Ide]);
  }
  if (output[_Ty] != null) {
    contents[_Ty] = (0, import_smithy_client.expectString)(output[_Ty]);
  }
  return contents;
}, "de_TrafficSourceIdentifier");
var de_TrafficSources = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_TrafficSourceIdentifier(entry, context);
  });
}, "de_TrafficSources");
var de_TrafficSourceState = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_TSr] != null) {
    contents[_TSr] = (0, import_smithy_client.expectString)(output[_TSr]);
  }
  if (output[_Stat] != null) {
    contents[_Stat] = (0, import_smithy_client.expectString)(output[_Stat]);
  }
  if (output[_Ide] != null) {
    contents[_Ide] = (0, import_smithy_client.expectString)(output[_Ide]);
  }
  if (output[_Ty] != null) {
    contents[_Ty] = (0, import_smithy_client.expectString)(output[_Ty]);
  }
  return contents;
}, "de_TrafficSourceState");
var de_TrafficSourceStates = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_TrafficSourceState(entry, context);
  });
}, "de_TrafficSourceStates");
var de_VCpuCountRequest = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.strictParseInt32)(output[_M]);
  }
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.strictParseInt32)(output[_Ma]);
  }
  return contents;
}, "de_VCpuCountRequest");
var de_WarmPoolConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_MGPC] != null) {
    contents[_MGPC] = (0, import_smithy_client.strictParseInt32)(output[_MGPC]);
  }
  if (output[_MS] != null) {
    contents[_MS] = (0, import_smithy_client.strictParseInt32)(output[_MS]);
  }
  if (output[_PS] != null) {
    contents[_PS] = (0, import_smithy_client.expectString)(output[_PS]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = (0, import_smithy_client.expectString)(output[_Sta]);
  }
  if (output[_IRP] != null) {
    contents[_IRP] = de_InstanceReusePolicy(output[_IRP], context);
  }
  return contents;
}, "de_WarmPoolConfiguration");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var throwDefaultError = (0, import_smithy_client.withBaseException)(AutoScalingServiceException);
var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new import_protocol_http.HttpRequest(contents);
}, "buildHttpRpcRequest");
var SHARED_HEADERS = {
  "content-type": "application/x-www-form-urlencoded"
};
var _ = "2011-01-01";
var _A = "Action";
var _AARN = "AlarmARN";
var _AC = "AcceleratorCount";
var _AI = "AttachInstances";
var _AIT = "AllowedInstanceTypes";
var _AIc = "ActivityIds";
var _AIct = "ActivityId";
var _ALB = "AttachLoadBalancers";
var _ALBTG = "AttachLoadBalancerTargetGroups";
var _AM = "AcceleratorManufacturers";
var _AN = "AcceleratorNames";
var _ANl = "AlarmName";
var _APIA = "AssociatePublicIpAddress";
var _AR = "AutoRollback";
var _AS = "AlarmSpecification";
var _ASG = "AutoScalingGroups";
var _ASGARN = "AutoScalingGroupARN";
var _ASGN = "AutoScalingGroupName";
var _ASGNu = "AutoScalingGroupNames";
var _ASGS = "AutoScalingGroupState";
var _ASI = "AutoScalingInstances";
var _ASNT = "AutoScalingNotificationTypes";
var _AT = "AcceleratorTypes";
var _ATMMB = "AcceleratorTotalMemoryMiB";
var _ATS = "AttachTrafficSources";
var _ATd = "AdjustmentType";
var _ATdj = "AdjustmentTypes";
var _AZ = "AvailabilityZones";
var _AZv = "AvailabilityZone";
var _Ac = "Activities";
var _Act = "Activity";
var _Al = "Alarms";
var _BDM = "BlockDeviceMappings";
var _BDSA = "BatchDeleteScheduledAction";
var _BEBM = "BaselineEbsBandwidthMbps";
var _BM = "BareMetal";
var _BP = "BurstablePerformance";
var _BPSUGA = "BatchPutScheduledUpdateGroupAction";
var _BT = "BreachThreshold";
var _C = "Context";
var _CASG = "CreateAutoScalingGroup";
var _CCMS = "CustomizedCapacityMetricSpecification";
var _CD = "CheckpointDelay";
var _CF = "CapacityForecast";
var _CIR = "CancelInstanceRefresh";
var _CLA = "CompleteLifecycleAction";
var _CLC = "CreateLaunchConfiguration";
var _CLMS = "CustomizedLoadMetricSpecification";
var _CLVPCI = "ClassicLinkVPCId";
var _CLVPCSG = "ClassicLinkVPCSecurityGroups";
var _CM = "CpuManufacturers";
var _CMS = "CustomizedMetricSpecification";
var _COUT = "CreateOrUpdateTags";
var _CP = "CheckpointPercentages";
var _CR = "CapacityRebalance";
var _CSMS = "CustomizedScalingMetricSpecification";
var _CT = "CreatedTime";
var _Ca = "Cause";
var _Co = "Cooldown";
var _D = "Dimensions";
var _DAL = "DescribeAccountLimits";
var _DASG = "DeleteAutoScalingGroup";
var _DASGe = "DescribeAutoScalingGroups";
var _DASI = "DescribeAutoScalingInstances";
var _DASNT = "DescribeAutoScalingNotificationTypes";
var _DAT = "DescribeAdjustmentTypes";
var _DC = "DesiredCapacity";
var _DCT = "DesiredCapacityType";
var _DCe = "DefaultCooldown";
var _DCes = "DesiredConfiguration";
var _DI = "DetachInstances";
var _DIR = "DescribeInstanceRefreshes";
var _DIW = "DefaultInstanceWarmup";
var _DLB = "DescribeLoadBalancers";
var _DLBTG = "DescribeLoadBalancerTargetGroups";
var _DLBTGe = "DetachLoadBalancerTargetGroups";
var _DLBe = "DetachLoadBalancers";
var _DLC = "DeleteLaunchConfiguration";
var _DLCe = "DescribeLaunchConfigurations";
var _DLH = "DeleteLifecycleHook";
var _DLHT = "DescribeLifecycleHookTypes";
var _DLHe = "DescribeLifecycleHooks";
var _DMC = "DisableMetricsCollection";
var _DMCT = "DescribeMetricCollectionTypes";
var _DN = "DeviceName";
var _DNC = "DeleteNotificationConfiguration";
var _DNCe = "DescribeNotificationConfigurations";
var _DOT = "DeleteOnTermination";
var _DP = "DeletePolicy";
var _DPe = "DescribePolicies";
var _DR = "DefaultResult";
var _DSA = "DeleteScheduledAction";
var _DSAe = "DescribeScalingActivities";
var _DSAes = "DescribeScheduledActions";
var _DSI = "DisableScaleIn";
var _DSPT = "DescribeScalingProcessTypes";
var _DT = "DeleteTags";
var _DTPT = "DescribeTerminationPolicyTypes";
var _DTS = "DescribeTrafficSources";
var _DTSe = "DetachTrafficSources";
var _DTe = "DescribeTags";
var _DWP = "DeleteWarmPool";
var _DWPe = "DescribeWarmPool";
var _De = "Description";
var _Det = "Details";
var _E = "Ebs";
var _EC = "ErrorCode";
var _EIT = "ExcludedInstanceTypes";
var _EIW = "EstimatedInstanceWarmup";
var _EM = "EnabledMetrics";
var _EMC = "EnableMetricsCollection";
var _EMr = "ErrorMessage";
var _EO = "EbsOptimized";
var _EP = "ExecutePolicy";
var _ES = "EnterStandby";
var _ESx = "ExitStandby";
var _ET = "EndTime";
var _En = "Encrypted";
var _Ena = "Enabled";
var _Ex = "Expression";
var _F = "Filters";
var _FD = "ForceDelete";
var _FSA = "FailedScheduledActions";
var _FSUGA = "FailedScheduledUpdateGroupActions";
var _G = "Granularity";
var _GPSF = "GetPredictiveScalingForecast";
var _GT = "GlobalTimeout";
var _Gr = "Granularities";
var _HC = "HonorCooldown";
var _HCGP = "HealthCheckGracePeriod";
var _HCT = "HealthCheckType";
var _HE = "HttpEndpoint";
var _HPRHL = "HttpPutResponseHopLimit";
var _HS = "HealthStatus";
var _HT = "HttpTokens";
var _HTe = "HeartbeatTimeout";
var _I = "Iops";
var _ID = "InstancesDistribution";
var _IDG = "IncludeDeletedGroups";
var _IG = "InstanceGenerations";
var _II = "InstanceIds";
var _IIP = "IamInstanceProfile";
var _IIm = "ImageId";
var _IIn = "InstanceId";
var _IM = "InstanceMonitoring";
var _IMP = "InstanceMaintenancePolicy";
var _IR = "InstanceRequirements";
var _IRI = "InstanceRefreshIds";
var _IRIn = "InstanceRefreshId";
var _IRP = "InstanceReusePolicy";
var _IRn = "InstanceRefreshes";
var _IT = "InstanceType";
var _ITU = "InstancesToUpdate";
var _ITUOR = "InstancesToUpdateOnRollback";
var _IW = "InstanceWarmup";
var _Id = "Id";
var _Ide = "Identifier";
var _In = "Instances";
var _K = "Key";
var _KI = "KernelId";
var _KN = "KeyName";
var _L = "Label";
var _LAR = "LifecycleActionResult";
var _LAT = "LifecycleActionToken";
var _LB = "LoadBalancers";
var _LBN = "LoadBalancerNames";
var _LBNo = "LoadBalancerName";
var _LBTG = "LoadBalancerTargetGroups";
var _LBTGARN = "LoadBalancerTargetGroupARN";
var _LC = "LaunchConfigurations";
var _LCARN = "LaunchConfigurationARN";
var _LCN = "LaunchConfigurationName";
var _LCNa = "LaunchConfigurationNames";
var _LF = "LoadForecast";
var _LH = "LifecycleHooks";
var _LHN = "LifecycleHookName";
var _LHNi = "LifecycleHookNames";
var _LHSL = "LifecycleHookSpecificationList";
var _LHT = "LifecycleHookTypes";
var _LPP = "LivePoolProgress";
var _LS = "LocalStorage";
var _LST = "LocalStorageTypes";
var _LSi = "LifecycleState";
var _LT = "LaunchTemplate";
var _LTI = "LaunchTemplateId";
var _LTN = "LaunchTemplateName";
var _LTS = "LaunchTemplateSpecification";
var _LTi = "LifecycleTransition";
var _M = "Min";
var _MAM = "MinAdjustmentMagnitude";
var _MAS = "MinAdjustmentStep";
var _MAT = "MetricAggregationType";
var _MCB = "MaxCapacityBuffer";
var _MCBB = "MaxCapacityBreachBehavior";
var _MDQ = "MetricDataQueries";
var _MGBPVC = "MemoryGiBPerVCpu";
var _MGPC = "MaxGroupPreparedCapacity";
var _MHP = "MinHealthyPercentage";
var _MHPa = "MaxHealthyPercentage";
var _MIL = "MaxInstanceLifetime";
var _MILB = "MetricIntervalLowerBound";
var _MIP = "MixedInstancesPolicy";
var _MIUB = "MetricIntervalUpperBound";
var _MMB = "MemoryMiB";
var _MN = "MetricName";
var _MNOASG = "MaxNumberOfAutoScalingGroups";
var _MNOLC = "MaxNumberOfLaunchConfigurations";
var _MO = "MetadataOptions";
var _MR = "MaxRecords";
var _MS = "MinSize";
var _MSPAPOOODP = "MaxSpotPriceAsPercentageOfOptimalOnDemandPrice";
var _MSa = "MaxSize";
var _MSe = "MetricStat";
var _MSet = "MetricSpecifications";
var _MSetr = "MetricSpecification";
var _MV = "MetricValue";
var _Ma = "Max";
var _Me = "Metrics";
var _Met = "Metric";
var _Mo = "Mode";
var _N = "Namespace";
var _NBG = "NetworkBandwidthGbps";
var _NC = "NotificationConfigurations";
var _ND = "NoDevice";
var _NIC = "NetworkInterfaceCount";
var _NIPFSI = "NewInstancesProtectedFromScaleIn";
var _NM = "NotificationMetadata";
var _NOASG = "NumberOfAutoScalingGroups";
var _NOLC = "NumberOfLaunchConfigurations";
var _NT = "NextToken";
var _NTARN = "NotificationTargetARN";
var _NTo = "NotificationTypes";
var _NTot = "NotificationType";
var _Na = "Name";
var _O = "Overrides";
var _ODAS = "OnDemandAllocationStrategy";
var _ODBC = "OnDemandBaseCapacity";
var _ODMPPOLP = "OnDemandMaxPricePercentageOverLowestPrice";
var _ODPABC = "OnDemandPercentageAboveBaseCapacity";
var _P = "Preferences";
var _PAL = "PropagateAtLaunch";
var _PARN = "PolicyARN";
var _PC = "PredictedCapacity";
var _PCOR = "PercentageCompleteOnRollback";
var _PCe = "PercentageComplete";
var _PD = "ProgressDetails";
var _PDOR = "ProgressDetailsOnRollback";
var _PFSI = "ProtectedFromScaleIn";
var _PG = "PlacementGroup";
var _PLH = "PutLifecycleHook";
var _PLMS = "PredefinedLoadMetricSpecification";
var _PMPS = "PredefinedMetricPairSpecification";
var _PMS = "PredefinedMetricSpecification";
var _PMT = "PredefinedMetricType";
var _PN = "PolicyName";
var _PNC = "PutNotificationConfiguration";
var _PNo = "PolicyNames";
var _PNr = "ProcessName";
var _PS = "PoolState";
var _PSC = "PredictiveScalingConfiguration";
var _PSMS = "PredefinedScalingMetricSpecification";
var _PSP = "PutScalingPolicy";
var _PSUGA = "PutScheduledUpdateGroupAction";
var _PT = "PlacementTenancy";
var _PTo = "PolicyTypes";
var _PTol = "PolicyType";
var _PWP = "PutWarmPool";
var _Pr = "Progress";
var _Pro = "Processes";
var _R = "Recurrence";
var _RARN = "RoleARN";
var _RD = "ReturnData";
var _RDo = "RollbackDetails";
var _RHS = "RequireHibernateSupport";
var _RI = "RamdiskId";
var _RIR = "RollbackInstanceRefresh";
var _RIe = "ResourceId";
var _RL = "ResourceLabel";
var _RLAH = "RecordLifecycleActionHeartbeat";
var _ROSI = "ReuseOnScaleIn";
var _RP = "ResumeProcesses";
var _RR = "RollbackReason";
var _RST = "RollbackStartTime";
var _RT = "ResourceType";
var _S = "Statistic";
var _SA = "ScalingAdjustment";
var _SAARN = "ScheduledActionARN";
var _SAN = "ScheduledActionNames";
var _SANc = "ScheduledActionName";
var _SAS = "SpotAllocationStrategy";
var _SAt = "StepAdjustments";
var _SBT = "SchedulingBufferTime";
var _SC = "StatusCode";
var _SDC = "SetDesiredCapacity";
var _SDDC = "ShouldDecrementDesiredCapacity";
var _SG = "SecurityGroups";
var _SI = "SnapshotId";
var _SIH = "SetInstanceHealth";
var _SIP = "SetInstanceProtection";
var _SIPI = "ScaleInProtectedInstances";
var _SIPp = "SpotInstancePools";
var _SIR = "StartInstanceRefresh";
var _SIt = "StandbyInstances";
var _SLRARN = "ServiceLinkedRoleARN";
var _SM = "SkipMatching";
var _SMP = "SpotMaxPrice";
var _SMPPOLP = "SpotMaxPricePercentageOverLowestPrice";
var _SMt = "StatusMessage";
var _SP = "SuspendProcesses";
var _SPc = "ScalingProcesses";
var _SPca = "ScalingPolicies";
var _SPp = "SpotPrice";
var _SPu = "SuspendedProcesses";
var _SR = "StatusReason";
var _SRGP = "ShouldRespectGracePeriod";
var _SRu = "SuspensionReason";
var _ST = "StartTime";
var _SUGA = "ScheduledUpdateGroupActions";
var _St = "Stat";
var _Sta = "Status";
var _Stat = "State";
var _Str = "Strategy";
var _T = "Tags";
var _TARN = "TopicARN";
var _TGARN = "TargetGroupARNs";
var _TIIASG = "TerminateInstanceInAutoScalingGroup";
var _TLSGB = "TotalLocalStorageGB";
var _TP = "TerminationPolicies";
var _TPT = "TerminationPolicyTypes";
var _TS = "TrafficSources";
var _TST = "TrafficSourceType";
var _TSr = "TrafficSource";
var _TTC = "TargetTrackingConfiguration";
var _TV = "TargetValue";
var _TZ = "TimeZone";
var _Th = "Throughput";
var _Ti = "Time";
var _Tim = "Timestamps";
var _Ty = "Type";
var _U = "Unit";
var _UASG = "UpdateAutoScalingGroup";
var _UD = "UserData";
var _UT = "UpdateTime";
var _V = "Version";
var _VCC = "VCpuCount";
var _VN = "VirtualName";
var _VPCZI = "VPCZoneIdentifier";
var _VS = "VolumeSize";
var _VT = "VolumeType";
var _Va = "Values";
var _Val = "Value";
var _WC = "WeightedCapacity";
var _WPC = "WarmPoolConfiguration";
var _WPP = "WarmPoolProgress";
var _WPS = "WarmPoolSize";
var _m = "message";
var _me = "member";
var buildFormUrlencodedString = /* @__PURE__ */ __name((formEntries) => Object.entries(formEntries).map(([key, value]) => (0, import_smithy_client.extendedEncodeURIComponent)(key) + "=" + (0, import_smithy_client.extendedEncodeURIComponent)(value)).join("&"), "buildFormUrlencodedString");
var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {
  var _a;
  if (((_a = data.Error) == null ? void 0 : _a.Code) !== void 0) {
    return data.Error.Code;
  }
  if (output.statusCode == 404) {
    return "NotFound";
  }
}, "loadQueryErrorCode");

// src/commands/AttachInstancesCommand.ts
var _AttachInstancesCommand = class _AttachInstancesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "AttachInstances", {}).n("AutoScalingClient", "AttachInstancesCommand").f(void 0, void 0).ser(se_AttachInstancesCommand).de(de_AttachInstancesCommand).build() {
};
__name(_AttachInstancesCommand, "AttachInstancesCommand");
var AttachInstancesCommand = _AttachInstancesCommand;

// src/commands/AttachLoadBalancersCommand.ts



var _AttachLoadBalancersCommand = class _AttachLoadBalancersCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "AttachLoadBalancers", {}).n("AutoScalingClient", "AttachLoadBalancersCommand").f(void 0, void 0).ser(se_AttachLoadBalancersCommand).de(de_AttachLoadBalancersCommand).build() {
};
__name(_AttachLoadBalancersCommand, "AttachLoadBalancersCommand");
var AttachLoadBalancersCommand = _AttachLoadBalancersCommand;

// src/commands/AttachLoadBalancerTargetGroupsCommand.ts



var _AttachLoadBalancerTargetGroupsCommand = class _AttachLoadBalancerTargetGroupsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "AttachLoadBalancerTargetGroups", {}).n("AutoScalingClient", "AttachLoadBalancerTargetGroupsCommand").f(void 0, void 0).ser(se_AttachLoadBalancerTargetGroupsCommand).de(de_AttachLoadBalancerTargetGroupsCommand).build() {
};
__name(_AttachLoadBalancerTargetGroupsCommand, "AttachLoadBalancerTargetGroupsCommand");
var AttachLoadBalancerTargetGroupsCommand = _AttachLoadBalancerTargetGroupsCommand;

// src/commands/AttachTrafficSourcesCommand.ts



var _AttachTrafficSourcesCommand = class _AttachTrafficSourcesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "AttachTrafficSources", {}).n("AutoScalingClient", "AttachTrafficSourcesCommand").f(void 0, void 0).ser(se_AttachTrafficSourcesCommand).de(de_AttachTrafficSourcesCommand).build() {
};
__name(_AttachTrafficSourcesCommand, "AttachTrafficSourcesCommand");
var AttachTrafficSourcesCommand = _AttachTrafficSourcesCommand;

// src/commands/BatchDeleteScheduledActionCommand.ts



var _BatchDeleteScheduledActionCommand = class _BatchDeleteScheduledActionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "BatchDeleteScheduledAction", {}).n("AutoScalingClient", "BatchDeleteScheduledActionCommand").f(void 0, void 0).ser(se_BatchDeleteScheduledActionCommand).de(de_BatchDeleteScheduledActionCommand).build() {
};
__name(_BatchDeleteScheduledActionCommand, "BatchDeleteScheduledActionCommand");
var BatchDeleteScheduledActionCommand = _BatchDeleteScheduledActionCommand;

// src/commands/BatchPutScheduledUpdateGroupActionCommand.ts



var _BatchPutScheduledUpdateGroupActionCommand = class _BatchPutScheduledUpdateGroupActionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "BatchPutScheduledUpdateGroupAction", {}).n("AutoScalingClient", "BatchPutScheduledUpdateGroupActionCommand").f(void 0, void 0).ser(se_BatchPutScheduledUpdateGroupActionCommand).de(de_BatchPutScheduledUpdateGroupActionCommand).build() {
};
__name(_BatchPutScheduledUpdateGroupActionCommand, "BatchPutScheduledUpdateGroupActionCommand");
var BatchPutScheduledUpdateGroupActionCommand = _BatchPutScheduledUpdateGroupActionCommand;

// src/commands/CancelInstanceRefreshCommand.ts



var _CancelInstanceRefreshCommand = class _CancelInstanceRefreshCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "CancelInstanceRefresh", {}).n("AutoScalingClient", "CancelInstanceRefreshCommand").f(void 0, void 0).ser(se_CancelInstanceRefreshCommand).de(de_CancelInstanceRefreshCommand).build() {
};
__name(_CancelInstanceRefreshCommand, "CancelInstanceRefreshCommand");
var CancelInstanceRefreshCommand = _CancelInstanceRefreshCommand;

// src/commands/CompleteLifecycleActionCommand.ts



var _CompleteLifecycleActionCommand = class _CompleteLifecycleActionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "CompleteLifecycleAction", {}).n("AutoScalingClient", "CompleteLifecycleActionCommand").f(void 0, void 0).ser(se_CompleteLifecycleActionCommand).de(de_CompleteLifecycleActionCommand).build() {
};
__name(_CompleteLifecycleActionCommand, "CompleteLifecycleActionCommand");
var CompleteLifecycleActionCommand = _CompleteLifecycleActionCommand;

// src/commands/CreateAutoScalingGroupCommand.ts



var _CreateAutoScalingGroupCommand = class _CreateAutoScalingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "CreateAutoScalingGroup", {}).n("AutoScalingClient", "CreateAutoScalingGroupCommand").f(void 0, void 0).ser(se_CreateAutoScalingGroupCommand).de(de_CreateAutoScalingGroupCommand).build() {
};
__name(_CreateAutoScalingGroupCommand, "CreateAutoScalingGroupCommand");
var CreateAutoScalingGroupCommand = _CreateAutoScalingGroupCommand;

// src/commands/CreateLaunchConfigurationCommand.ts



var _CreateLaunchConfigurationCommand = class _CreateLaunchConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "CreateLaunchConfiguration", {}).n("AutoScalingClient", "CreateLaunchConfigurationCommand").f(void 0, void 0).ser(se_CreateLaunchConfigurationCommand).de(de_CreateLaunchConfigurationCommand).build() {
};
__name(_CreateLaunchConfigurationCommand, "CreateLaunchConfigurationCommand");
var CreateLaunchConfigurationCommand = _CreateLaunchConfigurationCommand;

// src/commands/CreateOrUpdateTagsCommand.ts



var _CreateOrUpdateTagsCommand = class _CreateOrUpdateTagsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "CreateOrUpdateTags", {}).n("AutoScalingClient", "CreateOrUpdateTagsCommand").f(void 0, void 0).ser(se_CreateOrUpdateTagsCommand).de(de_CreateOrUpdateTagsCommand).build() {
};
__name(_CreateOrUpdateTagsCommand, "CreateOrUpdateTagsCommand");
var CreateOrUpdateTagsCommand = _CreateOrUpdateTagsCommand;

// src/commands/DeleteAutoScalingGroupCommand.ts



var _DeleteAutoScalingGroupCommand = class _DeleteAutoScalingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DeleteAutoScalingGroup", {}).n("AutoScalingClient", "DeleteAutoScalingGroupCommand").f(void 0, void 0).ser(se_DeleteAutoScalingGroupCommand).de(de_DeleteAutoScalingGroupCommand).build() {
};
__name(_DeleteAutoScalingGroupCommand, "DeleteAutoScalingGroupCommand");
var DeleteAutoScalingGroupCommand = _DeleteAutoScalingGroupCommand;

// src/commands/DeleteLaunchConfigurationCommand.ts



var _DeleteLaunchConfigurationCommand = class _DeleteLaunchConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DeleteLaunchConfiguration", {}).n("AutoScalingClient", "DeleteLaunchConfigurationCommand").f(void 0, void 0).ser(se_DeleteLaunchConfigurationCommand).de(de_DeleteLaunchConfigurationCommand).build() {
};
__name(_DeleteLaunchConfigurationCommand, "DeleteLaunchConfigurationCommand");
var DeleteLaunchConfigurationCommand = _DeleteLaunchConfigurationCommand;

// src/commands/DeleteLifecycleHookCommand.ts



var _DeleteLifecycleHookCommand = class _DeleteLifecycleHookCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DeleteLifecycleHook", {}).n("AutoScalingClient", "DeleteLifecycleHookCommand").f(void 0, void 0).ser(se_DeleteLifecycleHookCommand).de(de_DeleteLifecycleHookCommand).build() {
};
__name(_DeleteLifecycleHookCommand, "DeleteLifecycleHookCommand");
var DeleteLifecycleHookCommand = _DeleteLifecycleHookCommand;

// src/commands/DeleteNotificationConfigurationCommand.ts



var _DeleteNotificationConfigurationCommand = class _DeleteNotificationConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DeleteNotificationConfiguration", {}).n("AutoScalingClient", "DeleteNotificationConfigurationCommand").f(void 0, void 0).ser(se_DeleteNotificationConfigurationCommand).de(de_DeleteNotificationConfigurationCommand).build() {
};
__name(_DeleteNotificationConfigurationCommand, "DeleteNotificationConfigurationCommand");
var DeleteNotificationConfigurationCommand = _DeleteNotificationConfigurationCommand;

// src/commands/DeletePolicyCommand.ts



var _DeletePolicyCommand = class _DeletePolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DeletePolicy", {}).n("AutoScalingClient", "DeletePolicyCommand").f(void 0, void 0).ser(se_DeletePolicyCommand).de(de_DeletePolicyCommand).build() {
};
__name(_DeletePolicyCommand, "DeletePolicyCommand");
var DeletePolicyCommand = _DeletePolicyCommand;

// src/commands/DeleteScheduledActionCommand.ts



var _DeleteScheduledActionCommand = class _DeleteScheduledActionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DeleteScheduledAction", {}).n("AutoScalingClient", "DeleteScheduledActionCommand").f(void 0, void 0).ser(se_DeleteScheduledActionCommand).de(de_DeleteScheduledActionCommand).build() {
};
__name(_DeleteScheduledActionCommand, "DeleteScheduledActionCommand");
var DeleteScheduledActionCommand = _DeleteScheduledActionCommand;

// src/commands/DeleteTagsCommand.ts



var _DeleteTagsCommand = class _DeleteTagsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DeleteTags", {}).n("AutoScalingClient", "DeleteTagsCommand").f(void 0, void 0).ser(se_DeleteTagsCommand).de(de_DeleteTagsCommand).build() {
};
__name(_DeleteTagsCommand, "DeleteTagsCommand");
var DeleteTagsCommand = _DeleteTagsCommand;

// src/commands/DeleteWarmPoolCommand.ts



var _DeleteWarmPoolCommand = class _DeleteWarmPoolCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DeleteWarmPool", {}).n("AutoScalingClient", "DeleteWarmPoolCommand").f(void 0, void 0).ser(se_DeleteWarmPoolCommand).de(de_DeleteWarmPoolCommand).build() {
};
__name(_DeleteWarmPoolCommand, "DeleteWarmPoolCommand");
var DeleteWarmPoolCommand = _DeleteWarmPoolCommand;

// src/commands/DescribeAccountLimitsCommand.ts



var _DescribeAccountLimitsCommand = class _DescribeAccountLimitsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeAccountLimits", {}).n("AutoScalingClient", "DescribeAccountLimitsCommand").f(void 0, void 0).ser(se_DescribeAccountLimitsCommand).de(de_DescribeAccountLimitsCommand).build() {
};
__name(_DescribeAccountLimitsCommand, "DescribeAccountLimitsCommand");
var DescribeAccountLimitsCommand = _DescribeAccountLimitsCommand;

// src/commands/DescribeAdjustmentTypesCommand.ts



var _DescribeAdjustmentTypesCommand = class _DescribeAdjustmentTypesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeAdjustmentTypes", {}).n("AutoScalingClient", "DescribeAdjustmentTypesCommand").f(void 0, void 0).ser(se_DescribeAdjustmentTypesCommand).de(de_DescribeAdjustmentTypesCommand).build() {
};
__name(_DescribeAdjustmentTypesCommand, "DescribeAdjustmentTypesCommand");
var DescribeAdjustmentTypesCommand = _DescribeAdjustmentTypesCommand;

// src/commands/DescribeAutoScalingGroupsCommand.ts



var _DescribeAutoScalingGroupsCommand = class _DescribeAutoScalingGroupsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeAutoScalingGroups", {}).n("AutoScalingClient", "DescribeAutoScalingGroupsCommand").f(void 0, void 0).ser(se_DescribeAutoScalingGroupsCommand).de(de_DescribeAutoScalingGroupsCommand).build() {
};
__name(_DescribeAutoScalingGroupsCommand, "DescribeAutoScalingGroupsCommand");
var DescribeAutoScalingGroupsCommand = _DescribeAutoScalingGroupsCommand;

// src/commands/DescribeAutoScalingInstancesCommand.ts



var _DescribeAutoScalingInstancesCommand = class _DescribeAutoScalingInstancesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeAutoScalingInstances", {}).n("AutoScalingClient", "DescribeAutoScalingInstancesCommand").f(void 0, void 0).ser(se_DescribeAutoScalingInstancesCommand).de(de_DescribeAutoScalingInstancesCommand).build() {
};
__name(_DescribeAutoScalingInstancesCommand, "DescribeAutoScalingInstancesCommand");
var DescribeAutoScalingInstancesCommand = _DescribeAutoScalingInstancesCommand;

// src/commands/DescribeAutoScalingNotificationTypesCommand.ts



var _DescribeAutoScalingNotificationTypesCommand = class _DescribeAutoScalingNotificationTypesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeAutoScalingNotificationTypes", {}).n("AutoScalingClient", "DescribeAutoScalingNotificationTypesCommand").f(void 0, void 0).ser(se_DescribeAutoScalingNotificationTypesCommand).de(de_DescribeAutoScalingNotificationTypesCommand).build() {
};
__name(_DescribeAutoScalingNotificationTypesCommand, "DescribeAutoScalingNotificationTypesCommand");
var DescribeAutoScalingNotificationTypesCommand = _DescribeAutoScalingNotificationTypesCommand;

// src/commands/DescribeInstanceRefreshesCommand.ts



var _DescribeInstanceRefreshesCommand = class _DescribeInstanceRefreshesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeInstanceRefreshes", {}).n("AutoScalingClient", "DescribeInstanceRefreshesCommand").f(void 0, void 0).ser(se_DescribeInstanceRefreshesCommand).de(de_DescribeInstanceRefreshesCommand).build() {
};
__name(_DescribeInstanceRefreshesCommand, "DescribeInstanceRefreshesCommand");
var DescribeInstanceRefreshesCommand = _DescribeInstanceRefreshesCommand;

// src/commands/DescribeLaunchConfigurationsCommand.ts



var _DescribeLaunchConfigurationsCommand = class _DescribeLaunchConfigurationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeLaunchConfigurations", {}).n("AutoScalingClient", "DescribeLaunchConfigurationsCommand").f(void 0, void 0).ser(se_DescribeLaunchConfigurationsCommand).de(de_DescribeLaunchConfigurationsCommand).build() {
};
__name(_DescribeLaunchConfigurationsCommand, "DescribeLaunchConfigurationsCommand");
var DescribeLaunchConfigurationsCommand = _DescribeLaunchConfigurationsCommand;

// src/commands/DescribeLifecycleHooksCommand.ts



var _DescribeLifecycleHooksCommand = class _DescribeLifecycleHooksCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeLifecycleHooks", {}).n("AutoScalingClient", "DescribeLifecycleHooksCommand").f(void 0, void 0).ser(se_DescribeLifecycleHooksCommand).de(de_DescribeLifecycleHooksCommand).build() {
};
__name(_DescribeLifecycleHooksCommand, "DescribeLifecycleHooksCommand");
var DescribeLifecycleHooksCommand = _DescribeLifecycleHooksCommand;

// src/commands/DescribeLifecycleHookTypesCommand.ts



var _DescribeLifecycleHookTypesCommand = class _DescribeLifecycleHookTypesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeLifecycleHookTypes", {}).n("AutoScalingClient", "DescribeLifecycleHookTypesCommand").f(void 0, void 0).ser(se_DescribeLifecycleHookTypesCommand).de(de_DescribeLifecycleHookTypesCommand).build() {
};
__name(_DescribeLifecycleHookTypesCommand, "DescribeLifecycleHookTypesCommand");
var DescribeLifecycleHookTypesCommand = _DescribeLifecycleHookTypesCommand;

// src/commands/DescribeLoadBalancersCommand.ts



var _DescribeLoadBalancersCommand = class _DescribeLoadBalancersCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeLoadBalancers", {}).n("AutoScalingClient", "DescribeLoadBalancersCommand").f(void 0, void 0).ser(se_DescribeLoadBalancersCommand).de(de_DescribeLoadBalancersCommand).build() {
};
__name(_DescribeLoadBalancersCommand, "DescribeLoadBalancersCommand");
var DescribeLoadBalancersCommand = _DescribeLoadBalancersCommand;

// src/commands/DescribeLoadBalancerTargetGroupsCommand.ts



var _DescribeLoadBalancerTargetGroupsCommand = class _DescribeLoadBalancerTargetGroupsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeLoadBalancerTargetGroups", {}).n("AutoScalingClient", "DescribeLoadBalancerTargetGroupsCommand").f(void 0, void 0).ser(se_DescribeLoadBalancerTargetGroupsCommand).de(de_DescribeLoadBalancerTargetGroupsCommand).build() {
};
__name(_DescribeLoadBalancerTargetGroupsCommand, "DescribeLoadBalancerTargetGroupsCommand");
var DescribeLoadBalancerTargetGroupsCommand = _DescribeLoadBalancerTargetGroupsCommand;

// src/commands/DescribeMetricCollectionTypesCommand.ts



var _DescribeMetricCollectionTypesCommand = class _DescribeMetricCollectionTypesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeMetricCollectionTypes", {}).n("AutoScalingClient", "DescribeMetricCollectionTypesCommand").f(void 0, void 0).ser(se_DescribeMetricCollectionTypesCommand).de(de_DescribeMetricCollectionTypesCommand).build() {
};
__name(_DescribeMetricCollectionTypesCommand, "DescribeMetricCollectionTypesCommand");
var DescribeMetricCollectionTypesCommand = _DescribeMetricCollectionTypesCommand;

// src/commands/DescribeNotificationConfigurationsCommand.ts



var _DescribeNotificationConfigurationsCommand = class _DescribeNotificationConfigurationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeNotificationConfigurations", {}).n("AutoScalingClient", "DescribeNotificationConfigurationsCommand").f(void 0, void 0).ser(se_DescribeNotificationConfigurationsCommand).de(de_DescribeNotificationConfigurationsCommand).build() {
};
__name(_DescribeNotificationConfigurationsCommand, "DescribeNotificationConfigurationsCommand");
var DescribeNotificationConfigurationsCommand = _DescribeNotificationConfigurationsCommand;

// src/commands/DescribePoliciesCommand.ts



var _DescribePoliciesCommand = class _DescribePoliciesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribePolicies", {}).n("AutoScalingClient", "DescribePoliciesCommand").f(void 0, void 0).ser(se_DescribePoliciesCommand).de(de_DescribePoliciesCommand).build() {
};
__name(_DescribePoliciesCommand, "DescribePoliciesCommand");
var DescribePoliciesCommand = _DescribePoliciesCommand;

// src/commands/DescribeScalingActivitiesCommand.ts



var _DescribeScalingActivitiesCommand = class _DescribeScalingActivitiesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeScalingActivities", {}).n("AutoScalingClient", "DescribeScalingActivitiesCommand").f(void 0, void 0).ser(se_DescribeScalingActivitiesCommand).de(de_DescribeScalingActivitiesCommand).build() {
};
__name(_DescribeScalingActivitiesCommand, "DescribeScalingActivitiesCommand");
var DescribeScalingActivitiesCommand = _DescribeScalingActivitiesCommand;

// src/commands/DescribeScalingProcessTypesCommand.ts



var _DescribeScalingProcessTypesCommand = class _DescribeScalingProcessTypesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeScalingProcessTypes", {}).n("AutoScalingClient", "DescribeScalingProcessTypesCommand").f(void 0, void 0).ser(se_DescribeScalingProcessTypesCommand).de(de_DescribeScalingProcessTypesCommand).build() {
};
__name(_DescribeScalingProcessTypesCommand, "DescribeScalingProcessTypesCommand");
var DescribeScalingProcessTypesCommand = _DescribeScalingProcessTypesCommand;

// src/commands/DescribeScheduledActionsCommand.ts



var _DescribeScheduledActionsCommand = class _DescribeScheduledActionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeScheduledActions", {}).n("AutoScalingClient", "DescribeScheduledActionsCommand").f(void 0, void 0).ser(se_DescribeScheduledActionsCommand).de(de_DescribeScheduledActionsCommand).build() {
};
__name(_DescribeScheduledActionsCommand, "DescribeScheduledActionsCommand");
var DescribeScheduledActionsCommand = _DescribeScheduledActionsCommand;

// src/commands/DescribeTagsCommand.ts



var _DescribeTagsCommand = class _DescribeTagsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeTags", {}).n("AutoScalingClient", "DescribeTagsCommand").f(void 0, void 0).ser(se_DescribeTagsCommand).de(de_DescribeTagsCommand).build() {
};
__name(_DescribeTagsCommand, "DescribeTagsCommand");
var DescribeTagsCommand = _DescribeTagsCommand;

// src/commands/DescribeTerminationPolicyTypesCommand.ts



var _DescribeTerminationPolicyTypesCommand = class _DescribeTerminationPolicyTypesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeTerminationPolicyTypes", {}).n("AutoScalingClient", "DescribeTerminationPolicyTypesCommand").f(void 0, void 0).ser(se_DescribeTerminationPolicyTypesCommand).de(de_DescribeTerminationPolicyTypesCommand).build() {
};
__name(_DescribeTerminationPolicyTypesCommand, "DescribeTerminationPolicyTypesCommand");
var DescribeTerminationPolicyTypesCommand = _DescribeTerminationPolicyTypesCommand;

// src/commands/DescribeTrafficSourcesCommand.ts



var _DescribeTrafficSourcesCommand = class _DescribeTrafficSourcesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeTrafficSources", {}).n("AutoScalingClient", "DescribeTrafficSourcesCommand").f(void 0, void 0).ser(se_DescribeTrafficSourcesCommand).de(de_DescribeTrafficSourcesCommand).build() {
};
__name(_DescribeTrafficSourcesCommand, "DescribeTrafficSourcesCommand");
var DescribeTrafficSourcesCommand = _DescribeTrafficSourcesCommand;

// src/commands/DescribeWarmPoolCommand.ts



var _DescribeWarmPoolCommand = class _DescribeWarmPoolCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DescribeWarmPool", {}).n("AutoScalingClient", "DescribeWarmPoolCommand").f(void 0, void 0).ser(se_DescribeWarmPoolCommand).de(de_DescribeWarmPoolCommand).build() {
};
__name(_DescribeWarmPoolCommand, "DescribeWarmPoolCommand");
var DescribeWarmPoolCommand = _DescribeWarmPoolCommand;

// src/commands/DetachInstancesCommand.ts



var _DetachInstancesCommand = class _DetachInstancesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DetachInstances", {}).n("AutoScalingClient", "DetachInstancesCommand").f(void 0, void 0).ser(se_DetachInstancesCommand).de(de_DetachInstancesCommand).build() {
};
__name(_DetachInstancesCommand, "DetachInstancesCommand");
var DetachInstancesCommand = _DetachInstancesCommand;

// src/commands/DetachLoadBalancersCommand.ts



var _DetachLoadBalancersCommand = class _DetachLoadBalancersCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DetachLoadBalancers", {}).n("AutoScalingClient", "DetachLoadBalancersCommand").f(void 0, void 0).ser(se_DetachLoadBalancersCommand).de(de_DetachLoadBalancersCommand).build() {
};
__name(_DetachLoadBalancersCommand, "DetachLoadBalancersCommand");
var DetachLoadBalancersCommand = _DetachLoadBalancersCommand;

// src/commands/DetachLoadBalancerTargetGroupsCommand.ts



var _DetachLoadBalancerTargetGroupsCommand = class _DetachLoadBalancerTargetGroupsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DetachLoadBalancerTargetGroups", {}).n("AutoScalingClient", "DetachLoadBalancerTargetGroupsCommand").f(void 0, void 0).ser(se_DetachLoadBalancerTargetGroupsCommand).de(de_DetachLoadBalancerTargetGroupsCommand).build() {
};
__name(_DetachLoadBalancerTargetGroupsCommand, "DetachLoadBalancerTargetGroupsCommand");
var DetachLoadBalancerTargetGroupsCommand = _DetachLoadBalancerTargetGroupsCommand;

// src/commands/DetachTrafficSourcesCommand.ts



var _DetachTrafficSourcesCommand = class _DetachTrafficSourcesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DetachTrafficSources", {}).n("AutoScalingClient", "DetachTrafficSourcesCommand").f(void 0, void 0).ser(se_DetachTrafficSourcesCommand).de(de_DetachTrafficSourcesCommand).build() {
};
__name(_DetachTrafficSourcesCommand, "DetachTrafficSourcesCommand");
var DetachTrafficSourcesCommand = _DetachTrafficSourcesCommand;

// src/commands/DisableMetricsCollectionCommand.ts



var _DisableMetricsCollectionCommand = class _DisableMetricsCollectionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "DisableMetricsCollection", {}).n("AutoScalingClient", "DisableMetricsCollectionCommand").f(void 0, void 0).ser(se_DisableMetricsCollectionCommand).de(de_DisableMetricsCollectionCommand).build() {
};
__name(_DisableMetricsCollectionCommand, "DisableMetricsCollectionCommand");
var DisableMetricsCollectionCommand = _DisableMetricsCollectionCommand;

// src/commands/EnableMetricsCollectionCommand.ts



var _EnableMetricsCollectionCommand = class _EnableMetricsCollectionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "EnableMetricsCollection", {}).n("AutoScalingClient", "EnableMetricsCollectionCommand").f(void 0, void 0).ser(se_EnableMetricsCollectionCommand).de(de_EnableMetricsCollectionCommand).build() {
};
__name(_EnableMetricsCollectionCommand, "EnableMetricsCollectionCommand");
var EnableMetricsCollectionCommand = _EnableMetricsCollectionCommand;

// src/commands/EnterStandbyCommand.ts



var _EnterStandbyCommand = class _EnterStandbyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "EnterStandby", {}).n("AutoScalingClient", "EnterStandbyCommand").f(void 0, void 0).ser(se_EnterStandbyCommand).de(de_EnterStandbyCommand).build() {
};
__name(_EnterStandbyCommand, "EnterStandbyCommand");
var EnterStandbyCommand = _EnterStandbyCommand;

// src/commands/ExecutePolicyCommand.ts



var _ExecutePolicyCommand = class _ExecutePolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "ExecutePolicy", {}).n("AutoScalingClient", "ExecutePolicyCommand").f(void 0, void 0).ser(se_ExecutePolicyCommand).de(de_ExecutePolicyCommand).build() {
};
__name(_ExecutePolicyCommand, "ExecutePolicyCommand");
var ExecutePolicyCommand = _ExecutePolicyCommand;

// src/commands/ExitStandbyCommand.ts



var _ExitStandbyCommand = class _ExitStandbyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "ExitStandby", {}).n("AutoScalingClient", "ExitStandbyCommand").f(void 0, void 0).ser(se_ExitStandbyCommand).de(de_ExitStandbyCommand).build() {
};
__name(_ExitStandbyCommand, "ExitStandbyCommand");
var ExitStandbyCommand = _ExitStandbyCommand;

// src/commands/GetPredictiveScalingForecastCommand.ts



var _GetPredictiveScalingForecastCommand = class _GetPredictiveScalingForecastCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "GetPredictiveScalingForecast", {}).n("AutoScalingClient", "GetPredictiveScalingForecastCommand").f(void 0, void 0).ser(se_GetPredictiveScalingForecastCommand).de(de_GetPredictiveScalingForecastCommand).build() {
};
__name(_GetPredictiveScalingForecastCommand, "GetPredictiveScalingForecastCommand");
var GetPredictiveScalingForecastCommand = _GetPredictiveScalingForecastCommand;

// src/commands/PutLifecycleHookCommand.ts



var _PutLifecycleHookCommand = class _PutLifecycleHookCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "PutLifecycleHook", {}).n("AutoScalingClient", "PutLifecycleHookCommand").f(void 0, void 0).ser(se_PutLifecycleHookCommand).de(de_PutLifecycleHookCommand).build() {
};
__name(_PutLifecycleHookCommand, "PutLifecycleHookCommand");
var PutLifecycleHookCommand = _PutLifecycleHookCommand;

// src/commands/PutNotificationConfigurationCommand.ts



var _PutNotificationConfigurationCommand = class _PutNotificationConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "PutNotificationConfiguration", {}).n("AutoScalingClient", "PutNotificationConfigurationCommand").f(void 0, void 0).ser(se_PutNotificationConfigurationCommand).de(de_PutNotificationConfigurationCommand).build() {
};
__name(_PutNotificationConfigurationCommand, "PutNotificationConfigurationCommand");
var PutNotificationConfigurationCommand = _PutNotificationConfigurationCommand;

// src/commands/PutScalingPolicyCommand.ts



var _PutScalingPolicyCommand = class _PutScalingPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "PutScalingPolicy", {}).n("AutoScalingClient", "PutScalingPolicyCommand").f(void 0, void 0).ser(se_PutScalingPolicyCommand).de(de_PutScalingPolicyCommand).build() {
};
__name(_PutScalingPolicyCommand, "PutScalingPolicyCommand");
var PutScalingPolicyCommand = _PutScalingPolicyCommand;

// src/commands/PutScheduledUpdateGroupActionCommand.ts



var _PutScheduledUpdateGroupActionCommand = class _PutScheduledUpdateGroupActionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "PutScheduledUpdateGroupAction", {}).n("AutoScalingClient", "PutScheduledUpdateGroupActionCommand").f(void 0, void 0).ser(se_PutScheduledUpdateGroupActionCommand).de(de_PutScheduledUpdateGroupActionCommand).build() {
};
__name(_PutScheduledUpdateGroupActionCommand, "PutScheduledUpdateGroupActionCommand");
var PutScheduledUpdateGroupActionCommand = _PutScheduledUpdateGroupActionCommand;

// src/commands/PutWarmPoolCommand.ts



var _PutWarmPoolCommand = class _PutWarmPoolCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "PutWarmPool", {}).n("AutoScalingClient", "PutWarmPoolCommand").f(void 0, void 0).ser(se_PutWarmPoolCommand).de(de_PutWarmPoolCommand).build() {
};
__name(_PutWarmPoolCommand, "PutWarmPoolCommand");
var PutWarmPoolCommand = _PutWarmPoolCommand;

// src/commands/RecordLifecycleActionHeartbeatCommand.ts



var _RecordLifecycleActionHeartbeatCommand = class _RecordLifecycleActionHeartbeatCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "RecordLifecycleActionHeartbeat", {}).n("AutoScalingClient", "RecordLifecycleActionHeartbeatCommand").f(void 0, void 0).ser(se_RecordLifecycleActionHeartbeatCommand).de(de_RecordLifecycleActionHeartbeatCommand).build() {
};
__name(_RecordLifecycleActionHeartbeatCommand, "RecordLifecycleActionHeartbeatCommand");
var RecordLifecycleActionHeartbeatCommand = _RecordLifecycleActionHeartbeatCommand;

// src/commands/ResumeProcessesCommand.ts



var _ResumeProcessesCommand = class _ResumeProcessesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "ResumeProcesses", {}).n("AutoScalingClient", "ResumeProcessesCommand").f(void 0, void 0).ser(se_ResumeProcessesCommand).de(de_ResumeProcessesCommand).build() {
};
__name(_ResumeProcessesCommand, "ResumeProcessesCommand");
var ResumeProcessesCommand = _ResumeProcessesCommand;

// src/commands/RollbackInstanceRefreshCommand.ts



var _RollbackInstanceRefreshCommand = class _RollbackInstanceRefreshCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "RollbackInstanceRefresh", {}).n("AutoScalingClient", "RollbackInstanceRefreshCommand").f(void 0, void 0).ser(se_RollbackInstanceRefreshCommand).de(de_RollbackInstanceRefreshCommand).build() {
};
__name(_RollbackInstanceRefreshCommand, "RollbackInstanceRefreshCommand");
var RollbackInstanceRefreshCommand = _RollbackInstanceRefreshCommand;

// src/commands/SetDesiredCapacityCommand.ts



var _SetDesiredCapacityCommand = class _SetDesiredCapacityCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "SetDesiredCapacity", {}).n("AutoScalingClient", "SetDesiredCapacityCommand").f(void 0, void 0).ser(se_SetDesiredCapacityCommand).de(de_SetDesiredCapacityCommand).build() {
};
__name(_SetDesiredCapacityCommand, "SetDesiredCapacityCommand");
var SetDesiredCapacityCommand = _SetDesiredCapacityCommand;

// src/commands/SetInstanceHealthCommand.ts



var _SetInstanceHealthCommand = class _SetInstanceHealthCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "SetInstanceHealth", {}).n("AutoScalingClient", "SetInstanceHealthCommand").f(void 0, void 0).ser(se_SetInstanceHealthCommand).de(de_SetInstanceHealthCommand).build() {
};
__name(_SetInstanceHealthCommand, "SetInstanceHealthCommand");
var SetInstanceHealthCommand = _SetInstanceHealthCommand;

// src/commands/SetInstanceProtectionCommand.ts



var _SetInstanceProtectionCommand = class _SetInstanceProtectionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "SetInstanceProtection", {}).n("AutoScalingClient", "SetInstanceProtectionCommand").f(void 0, void 0).ser(se_SetInstanceProtectionCommand).de(de_SetInstanceProtectionCommand).build() {
};
__name(_SetInstanceProtectionCommand, "SetInstanceProtectionCommand");
var SetInstanceProtectionCommand = _SetInstanceProtectionCommand;

// src/commands/StartInstanceRefreshCommand.ts



var _StartInstanceRefreshCommand = class _StartInstanceRefreshCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "StartInstanceRefresh", {}).n("AutoScalingClient", "StartInstanceRefreshCommand").f(void 0, void 0).ser(se_StartInstanceRefreshCommand).de(de_StartInstanceRefreshCommand).build() {
};
__name(_StartInstanceRefreshCommand, "StartInstanceRefreshCommand");
var StartInstanceRefreshCommand = _StartInstanceRefreshCommand;

// src/commands/SuspendProcessesCommand.ts



var _SuspendProcessesCommand = class _SuspendProcessesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "SuspendProcesses", {}).n("AutoScalingClient", "SuspendProcessesCommand").f(void 0, void 0).ser(se_SuspendProcessesCommand).de(de_SuspendProcessesCommand).build() {
};
__name(_SuspendProcessesCommand, "SuspendProcessesCommand");
var SuspendProcessesCommand = _SuspendProcessesCommand;

// src/commands/TerminateInstanceInAutoScalingGroupCommand.ts



var _TerminateInstanceInAutoScalingGroupCommand = class _TerminateInstanceInAutoScalingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "TerminateInstanceInAutoScalingGroup", {}).n("AutoScalingClient", "TerminateInstanceInAutoScalingGroupCommand").f(void 0, void 0).ser(se_TerminateInstanceInAutoScalingGroupCommand).de(de_TerminateInstanceInAutoScalingGroupCommand).build() {
};
__name(_TerminateInstanceInAutoScalingGroupCommand, "TerminateInstanceInAutoScalingGroupCommand");
var TerminateInstanceInAutoScalingGroupCommand = _TerminateInstanceInAutoScalingGroupCommand;

// src/commands/UpdateAutoScalingGroupCommand.ts



var _UpdateAutoScalingGroupCommand = class _UpdateAutoScalingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AutoScaling_2011_01_01", "UpdateAutoScalingGroup", {}).n("AutoScalingClient", "UpdateAutoScalingGroupCommand").f(void 0, void 0).ser(se_UpdateAutoScalingGroupCommand).de(de_UpdateAutoScalingGroupCommand).build() {
};
__name(_UpdateAutoScalingGroupCommand, "UpdateAutoScalingGroupCommand");
var UpdateAutoScalingGroupCommand = _UpdateAutoScalingGroupCommand;

// src/AutoScaling.ts
var commands = {
  AttachInstancesCommand,
  AttachLoadBalancersCommand,
  AttachLoadBalancerTargetGroupsCommand,
  AttachTrafficSourcesCommand,
  BatchDeleteScheduledActionCommand,
  BatchPutScheduledUpdateGroupActionCommand,
  CancelInstanceRefreshCommand,
  CompleteLifecycleActionCommand,
  CreateAutoScalingGroupCommand,
  CreateLaunchConfigurationCommand,
  CreateOrUpdateTagsCommand,
  DeleteAutoScalingGroupCommand,
  DeleteLaunchConfigurationCommand,
  DeleteLifecycleHookCommand,
  DeleteNotificationConfigurationCommand,
  DeletePolicyCommand,
  DeleteScheduledActionCommand,
  DeleteTagsCommand,
  DeleteWarmPoolCommand,
  DescribeAccountLimitsCommand,
  DescribeAdjustmentTypesCommand,
  DescribeAutoScalingGroupsCommand,
  DescribeAutoScalingInstancesCommand,
  DescribeAutoScalingNotificationTypesCommand,
  DescribeInstanceRefreshesCommand,
  DescribeLaunchConfigurationsCommand,
  DescribeLifecycleHooksCommand,
  DescribeLifecycleHookTypesCommand,
  DescribeLoadBalancersCommand,
  DescribeLoadBalancerTargetGroupsCommand,
  DescribeMetricCollectionTypesCommand,
  DescribeNotificationConfigurationsCommand,
  DescribePoliciesCommand,
  DescribeScalingActivitiesCommand,
  DescribeScalingProcessTypesCommand,
  DescribeScheduledActionsCommand,
  DescribeTagsCommand,
  DescribeTerminationPolicyTypesCommand,
  DescribeTrafficSourcesCommand,
  DescribeWarmPoolCommand,
  DetachInstancesCommand,
  DetachLoadBalancersCommand,
  DetachLoadBalancerTargetGroupsCommand,
  DetachTrafficSourcesCommand,
  DisableMetricsCollectionCommand,
  EnableMetricsCollectionCommand,
  EnterStandbyCommand,
  ExecutePolicyCommand,
  ExitStandbyCommand,
  GetPredictiveScalingForecastCommand,
  PutLifecycleHookCommand,
  PutNotificationConfigurationCommand,
  PutScalingPolicyCommand,
  PutScheduledUpdateGroupActionCommand,
  PutWarmPoolCommand,
  RecordLifecycleActionHeartbeatCommand,
  ResumeProcessesCommand,
  RollbackInstanceRefreshCommand,
  SetDesiredCapacityCommand,
  SetInstanceHealthCommand,
  SetInstanceProtectionCommand,
  StartInstanceRefreshCommand,
  SuspendProcessesCommand,
  TerminateInstanceInAutoScalingGroupCommand,
  UpdateAutoScalingGroupCommand
};
var _AutoScaling = class _AutoScaling extends AutoScalingClient {
};
__name(_AutoScaling, "AutoScaling");
var AutoScaling = _AutoScaling;
(0, import_smithy_client.createAggregatedClient)(commands, AutoScaling);

// src/pagination/DescribeAutoScalingGroupsPaginator.ts

var paginateDescribeAutoScalingGroups = (0, import_core.createPaginator)(AutoScalingClient, DescribeAutoScalingGroupsCommand, "NextToken", "NextToken", "MaxRecords");

// src/pagination/DescribeAutoScalingInstancesPaginator.ts

var paginateDescribeAutoScalingInstances = (0, import_core.createPaginator)(AutoScalingClient, DescribeAutoScalingInstancesCommand, "NextToken", "NextToken", "MaxRecords");

// src/pagination/DescribeInstanceRefreshesPaginator.ts

var paginateDescribeInstanceRefreshes = (0, import_core.createPaginator)(AutoScalingClient, DescribeInstanceRefreshesCommand, "NextToken", "NextToken", "MaxRecords");

// src/pagination/DescribeLaunchConfigurationsPaginator.ts

var paginateDescribeLaunchConfigurations = (0, import_core.createPaginator)(AutoScalingClient, DescribeLaunchConfigurationsCommand, "NextToken", "NextToken", "MaxRecords");

// src/pagination/DescribeLoadBalancerTargetGroupsPaginator.ts

var paginateDescribeLoadBalancerTargetGroups = (0, import_core.createPaginator)(AutoScalingClient, DescribeLoadBalancerTargetGroupsCommand, "NextToken", "NextToken", "MaxRecords");

// src/pagination/DescribeLoadBalancersPaginator.ts

var paginateDescribeLoadBalancers = (0, import_core.createPaginator)(AutoScalingClient, DescribeLoadBalancersCommand, "NextToken", "NextToken", "MaxRecords");

// src/pagination/DescribeNotificationConfigurationsPaginator.ts

var paginateDescribeNotificationConfigurations = (0, import_core.createPaginator)(AutoScalingClient, DescribeNotificationConfigurationsCommand, "NextToken", "NextToken", "MaxRecords");

// src/pagination/DescribePoliciesPaginator.ts

var paginateDescribePolicies = (0, import_core.createPaginator)(AutoScalingClient, DescribePoliciesCommand, "NextToken", "NextToken", "MaxRecords");

// src/pagination/DescribeScalingActivitiesPaginator.ts

var paginateDescribeScalingActivities = (0, import_core.createPaginator)(AutoScalingClient, DescribeScalingActivitiesCommand, "NextToken", "NextToken", "MaxRecords");

// src/pagination/DescribeScheduledActionsPaginator.ts

var paginateDescribeScheduledActions = (0, import_core.createPaginator)(AutoScalingClient, DescribeScheduledActionsCommand, "NextToken", "NextToken", "MaxRecords");

// src/pagination/DescribeTagsPaginator.ts

var paginateDescribeTags = (0, import_core.createPaginator)(AutoScalingClient, DescribeTagsCommand, "NextToken", "NextToken", "MaxRecords");

// src/pagination/DescribeTrafficSourcesPaginator.ts

var paginateDescribeTrafficSources = (0, import_core.createPaginator)(AutoScalingClient, DescribeTrafficSourcesCommand, "NextToken", "NextToken", "MaxRecords");

// src/pagination/DescribeWarmPoolPaginator.ts

var paginateDescribeWarmPool = (0, import_core.createPaginator)(AutoScalingClient, DescribeWarmPoolCommand, "NextToken", "NextToken", "MaxRecords");

// src/waiters/waitForGroupExists.ts
var import_util_waiter = require("@smithy/util-waiter");
var checkState = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeAutoScalingGroupsCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.AutoScalingGroups.length > 0;
      }, "returnComparator");
      if (returnComparator() == true) {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.AutoScalingGroups.length > 0;
      }, "returnComparator");
      if (returnComparator() == false) {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForGroupExists = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
}, "waitForGroupExists");
var waitUntilGroupExists = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilGroupExists");

// src/waiters/waitForGroupInService.ts

var checkState2 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeAutoScalingGroupsCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.AutoScalingGroups);
        const projection_3 = flat_1.map((element_2) => {
          const filterRes_5 = element_2.Instances.filter((element_4) => {
            return element_4.LifecycleState == "InService";
          });
          const result_6 = [];
          result_6.push(filterRes_5.length >= element_2.MinSize);
          element_2 = result_6;
          return element_2;
        });
        const flat_7 = [].concat(...projection_3);
        return flat_7.includes(false);
      }, "returnComparator");
      if (returnComparator() == false) {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.AutoScalingGroups);
        const projection_3 = flat_1.map((element_2) => {
          const filterRes_5 = element_2.Instances.filter((element_4) => {
            return element_4.LifecycleState == "InService";
          });
          const result_6 = [];
          result_6.push(filterRes_5.length >= element_2.MinSize);
          element_2 = result_6;
          return element_2;
        });
        const flat_7 = [].concat(...projection_3);
        return flat_7.includes(false);
      }, "returnComparator");
      if (returnComparator() == true) {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForGroupInService = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
}, "waitForGroupInService");
var waitUntilGroupInService = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilGroupInService");

// src/waiters/waitForGroupNotExists.ts

var checkState3 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeAutoScalingGroupsCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.AutoScalingGroups.length > 0;
      }, "returnComparator");
      if (returnComparator() == false) {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.AutoScalingGroups.length > 0;
      }, "returnComparator");
      if (returnComparator() == true) {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForGroupNotExists = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
}, "waitForGroupNotExists");
var waitUntilGroupNotExists = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilGroupNotExists");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  AutoScalingServiceException,
  __Client,
  AutoScalingClient,
  AutoScaling,
  $Command,
  AttachInstancesCommand,
  AttachLoadBalancerTargetGroupsCommand,
  AttachLoadBalancersCommand,
  AttachTrafficSourcesCommand,
  BatchDeleteScheduledActionCommand,
  BatchPutScheduledUpdateGroupActionCommand,
  CancelInstanceRefreshCommand,
  CompleteLifecycleActionCommand,
  CreateAutoScalingGroupCommand,
  CreateLaunchConfigurationCommand,
  CreateOrUpdateTagsCommand,
  DeleteAutoScalingGroupCommand,
  DeleteLaunchConfigurationCommand,
  DeleteLifecycleHookCommand,
  DeleteNotificationConfigurationCommand,
  DeletePolicyCommand,
  DeleteScheduledActionCommand,
  DeleteTagsCommand,
  DeleteWarmPoolCommand,
  DescribeAccountLimitsCommand,
  DescribeAdjustmentTypesCommand,
  DescribeAutoScalingGroupsCommand,
  DescribeAutoScalingInstancesCommand,
  DescribeAutoScalingNotificationTypesCommand,
  DescribeInstanceRefreshesCommand,
  DescribeLaunchConfigurationsCommand,
  DescribeLifecycleHookTypesCommand,
  DescribeLifecycleHooksCommand,
  DescribeLoadBalancerTargetGroupsCommand,
  DescribeLoadBalancersCommand,
  DescribeMetricCollectionTypesCommand,
  DescribeNotificationConfigurationsCommand,
  DescribePoliciesCommand,
  DescribeScalingActivitiesCommand,
  DescribeScalingProcessTypesCommand,
  DescribeScheduledActionsCommand,
  DescribeTagsCommand,
  DescribeTerminationPolicyTypesCommand,
  DescribeTrafficSourcesCommand,
  DescribeWarmPoolCommand,
  DetachInstancesCommand,
  DetachLoadBalancerTargetGroupsCommand,
  DetachLoadBalancersCommand,
  DetachTrafficSourcesCommand,
  DisableMetricsCollectionCommand,
  EnableMetricsCollectionCommand,
  EnterStandbyCommand,
  ExecutePolicyCommand,
  ExitStandbyCommand,
  GetPredictiveScalingForecastCommand,
  PutLifecycleHookCommand,
  PutNotificationConfigurationCommand,
  PutScalingPolicyCommand,
  PutScheduledUpdateGroupActionCommand,
  PutWarmPoolCommand,
  RecordLifecycleActionHeartbeatCommand,
  ResumeProcessesCommand,
  RollbackInstanceRefreshCommand,
  SetDesiredCapacityCommand,
  SetInstanceHealthCommand,
  SetInstanceProtectionCommand,
  StartInstanceRefreshCommand,
  SuspendProcessesCommand,
  TerminateInstanceInAutoScalingGroupCommand,
  UpdateAutoScalingGroupCommand,
  paginateDescribeAutoScalingGroups,
  paginateDescribeAutoScalingInstances,
  paginateDescribeInstanceRefreshes,
  paginateDescribeLaunchConfigurations,
  paginateDescribeLoadBalancerTargetGroups,
  paginateDescribeLoadBalancers,
  paginateDescribeNotificationConfigurations,
  paginateDescribePolicies,
  paginateDescribeScalingActivities,
  paginateDescribeScheduledActions,
  paginateDescribeTags,
  paginateDescribeTrafficSources,
  paginateDescribeWarmPool,
  waitForGroupExists,
  waitUntilGroupExists,
  waitForGroupInService,
  waitUntilGroupInService,
  waitForGroupNotExists,
  waitUntilGroupNotExists,
  AcceleratorManufacturer,
  AcceleratorName,
  AcceleratorType,
  ActiveInstanceRefreshNotFoundFault,
  ScalingActivityStatusCode,
  AlreadyExistsFault,
  ResourceContentionFault,
  ServiceLinkedRoleFailure,
  LimitExceededFault,
  BareMetal,
  BurstablePerformance,
  CpuManufacturer,
  InstanceGeneration,
  LocalStorage,
  LocalStorageType,
  InstanceMetadataEndpointState,
  InstanceMetadataHttpTokensState,
  ResourceInUseFault,
  ScalingActivityInProgressFault,
  LifecycleState,
  WarmPoolState,
  WarmPoolStatus,
  InvalidNextToken,
  ScaleInProtectedInstances,
  StandbyInstances,
  InstanceRefreshStatus,
  PredictiveScalingMaxCapacityBreachBehavior,
  PredefinedLoadMetricType,
  PredefinedMetricPairType,
  PredefinedScalingMetricType,
  PredictiveScalingMode,
  MetricStatistic,
  MetricType,
  IrreversibleInstanceRefreshFault,
  InstanceRefreshInProgressFault,
  RefreshStrategy
});

