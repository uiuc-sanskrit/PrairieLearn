import { Config, TsProject, TsProjectWithFiles } from './types';
/**
 * Returns an extended TsProject array, containing also the paths of all files in the project that will be processed
 * @param projects
 * @param config
 */
export declare function collect_projects_files(projects: TsProject[], config: Config): Promise<TsProjectWithFiles[]>;
/**
 * Returns a flat array with the source and target paths of all files that will be processed
 * @param globed_projects
 */
export declare function collect_projects_files_flat(globed_projects: TsProjectWithFiles[]): Promise<{
    source_path: string;
    target_path: string;
}[]>;
/**
 * Copies all files from the source path to the output path
 * @param projects
 * @param config
 */
export declare function copy_files(projects: TsProject[], config: Config): Promise<void>;
/**
 * Starts a watcher listening to the changes in the source path and synchronizing them to the output path
 * @param projects
 * @param config
 */
export declare function watch_files(projects: TsProject[], config: Config): Promise<void>;
